// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: captcha.flex

package com.cesar31.captchaweb.parser;

import static com.cesar31.captchaweb.parser.CaptchaParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CaptchaLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\13\1\20\1\21\1\22\1\23"+
    "\1\24\10\25\1\26\1\27\1\30\1\31\1\32\1\13"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\45\1\54\1\55\1\56\1\57\1\60\1\45"+
    "\1\61\1\62\1\45\1\63\1\64\1\65\1\13\1\66"+
    "\1\0\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\7\0\1\3"+
    "\32\0\1\3\1\13\10\0\1\45\12\0\1\45\4\0"+
    "\1\45\4\0\1\13\27\45\1\0\37\45\1\0\u01ca\45"+
    "\4\0\14\45\16\0\5\45\7\0\1\45\1\0\1\45"+
    "\21\0\165\45\1\0\2\45\2\0\4\45\1\0\1\45"+
    "\6\0\1\45\1\0\3\45\1\0\1\45\1\0\24\45"+
    "\1\0\123\45\1\0\213\45\1\0\255\45\1\0\46\45"+
    "\2\0\1\45\6\0\51\45\10\0\55\45\1\0\1\45"+
    "\1\0\2\45\1\0\2\45\1\0\1\45\10\0\33\45"+
    "\4\0\4\45\35\0\13\45\5\0\100\45\12\124\4\0"+
    "\146\45\1\0\10\45\2\0\12\45\1\0\6\45\12\124"+
    "\3\45\2\0\1\45\20\0\73\45\2\0\145\45\16\0"+
    "\12\124\54\45\4\0\1\45\2\0\1\45\2\0\56\45"+
    "\22\0\34\45\4\0\13\45\65\0\25\45\1\0\10\45"+
    "\25\0\17\45\1\0\201\45\2\0\12\124\1\0\23\45"+
    "\1\0\10\45\2\0\2\45\2\0\26\45\1\0\7\45"+
    "\1\0\1\45\3\0\4\45\2\0\11\45\2\0\2\45"+
    "\2\0\4\45\10\0\1\45\4\0\2\45\1\0\5\45"+
    "\2\0\12\124\2\45\12\0\1\45\1\0\1\45\2\0"+
    "\3\45\1\0\6\45\4\0\2\45\2\0\26\45\1\0"+
    "\7\45\1\0\2\45\1\0\2\45\1\0\2\45\2\0"+
    "\1\45\1\0\5\45\4\0\2\45\2\0\3\45\3\0"+
    "\1\45\7\0\4\45\1\0\1\45\7\0\12\124\6\45"+
    "\13\0\3\45\1\0\11\45\1\0\3\45\1\0\26\45"+
    "\1\0\7\45\1\0\2\45\1\0\5\45\2\0\12\45"+
    "\1\0\3\45\1\0\3\45\2\0\1\45\17\0\4\45"+
    "\2\0\12\124\11\0\7\45\1\0\3\45\1\0\10\45"+
    "\2\0\2\45\2\0\26\45\1\0\7\45\1\0\2\45"+
    "\1\0\5\45\2\0\11\45\2\0\2\45\2\0\3\45"+
    "\10\0\2\45\4\0\2\45\1\0\5\45\2\0\12\124"+
    "\1\0\1\45\20\0\2\45\1\0\6\45\3\0\3\45"+
    "\1\0\4\45\3\0\2\45\1\0\1\45\1\0\2\45"+
    "\3\0\2\45\3\0\3\45\3\0\14\45\4\0\5\45"+
    "\3\0\3\45\1\0\4\45\2\0\1\45\6\0\1\45"+
    "\16\0\12\124\20\0\15\45\1\0\3\45\1\0\27\45"+
    "\1\0\20\45\3\0\10\45\1\0\3\45\1\0\4\45"+
    "\7\0\2\45\1\0\3\45\5\0\4\45\2\0\12\124"+
    "\20\0\4\45\1\0\10\45\1\0\3\45\1\0\27\45"+
    "\1\0\12\45\1\0\5\45\2\0\11\45\1\0\3\45"+
    "\1\0\4\45\7\0\2\45\7\0\1\45\1\0\4\45"+
    "\2\0\12\124\1\0\2\45\15\0\4\45\1\0\10\45"+
    "\1\0\3\45\1\0\63\45\1\0\3\45\1\0\5\45"+
    "\5\0\4\45\7\0\5\45\2\0\12\124\12\0\6\45"+
    "\2\0\2\45\1\0\22\45\3\0\30\45\1\0\11\45"+
    "\1\0\1\45\2\0\7\45\3\0\1\45\4\0\6\45"+
    "\1\0\1\45\1\0\10\45\6\0\12\124\2\0\2\45"+
    "\15\0\72\45\5\0\17\45\1\0\12\124\47\0\2\45"+
    "\1\0\1\45\1\0\5\45\1\0\30\45\1\0\1\45"+
    "\1\0\27\45\2\0\5\45\1\0\1\45\1\0\6\45"+
    "\2\0\12\124\2\0\4\45\40\0\1\45\27\0\2\45"+
    "\6\0\12\124\13\0\1\45\1\0\1\45\1\0\1\45"+
    "\4\0\12\45\1\0\44\45\4\0\24\45\1\0\22\45"+
    "\1\0\44\45\11\0\1\45\71\0\100\45\12\124\6\0"+
    "\100\45\12\124\4\45\2\0\46\45\1\0\1\45\5\0"+
    "\1\45\2\0\53\45\1\0\115\45\1\0\4\45\2\0"+
    "\7\45\1\0\1\45\1\0\4\45\2\0\51\45\1\0"+
    "\4\45\2\0\41\45\1\0\4\45\2\0\7\45\1\0"+
    "\1\45\1\0\4\45\2\0\17\45\1\0\71\45\1\0"+
    "\4\45\2\0\103\45\2\0\3\45\40\0\20\45\20\0"+
    "\126\45\2\0\6\45\3\0\u016c\45\2\0\21\45\1\3"+
    "\32\45\5\0\113\45\3\0\13\45\7\0\15\45\1\0"+
    "\7\45\13\0\25\45\13\0\24\45\14\0\15\45\1\0"+
    "\3\45\1\0\2\45\14\0\124\45\3\0\1\45\4\0"+
    "\2\45\2\0\12\124\41\0\3\45\2\0\12\124\6\0"+
    "\131\45\7\0\53\45\5\0\106\45\12\0\37\45\1\0"+
    "\14\45\4\0\14\45\12\0\12\124\36\45\2\0\5\45"+
    "\13\0\54\45\4\0\32\45\6\0\12\124\46\0\34\45"+
    "\4\0\77\45\1\0\35\45\2\0\1\45\12\124\6\0"+
    "\12\124\15\0\1\45\10\0\17\45\101\0\114\45\4\0"+
    "\12\124\21\0\11\45\14\0\60\45\12\124\72\45\14\0"+
    "\70\45\10\0\12\124\3\0\3\45\12\124\44\45\2\0"+
    "\11\45\7\0\53\45\2\0\3\45\20\0\3\45\1\0"+
    "\47\45\5\0\372\45\1\0\33\45\2\0\6\45\2\0"+
    "\46\45\2\0\6\45\2\0\10\45\1\0\1\45\1\0"+
    "\1\45\1\0\1\45\1\0\37\45\2\0\65\45\1\0"+
    "\7\45\1\0\1\45\3\0\3\45\1\0\7\45\3\0"+
    "\4\45\2\0\6\45\4\0\15\45\5\0\3\45\1\0"+
    "\7\45\3\0\13\3\35\0\2\3\5\0\1\3\17\0"+
    "\2\45\23\0\1\45\12\0\1\3\21\0\1\45\15\0"+
    "\1\45\20\0\15\45\63\0\41\45\21\0\1\45\4\0"+
    "\1\45\2\0\12\45\1\0\1\45\3\0\5\45\6\0"+
    "\1\45\1\0\1\45\1\0\1\45\1\0\4\45\1\0"+
    "\13\45\2\0\4\45\5\0\5\45\4\0\1\45\21\0"+
    "\51\45\u022d\0\64\45\26\0\57\45\1\0\57\45\1\0"+
    "\205\45\6\0\11\45\14\0\46\45\1\0\1\45\5\0"+
    "\1\45\2\0\70\45\7\0\1\45\17\0\30\45\11\0"+
    "\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0"+
    "\7\45\1\0\7\45\1\0\7\45\1\0\7\45\1\0"+
    "\40\45\57\0\1\45\320\0\1\3\4\0\3\45\31\0"+
    "\17\45\1\0\5\45\2\0\5\45\4\0\126\45\2\0"+
    "\2\45\2\0\3\45\1\0\132\45\1\0\4\45\5\0"+
    "\53\45\1\0\136\45\21\0\33\45\65\0\306\45\112\0"+
    "\360\45\20\0\215\45\103\0\56\45\2\0\15\45\3\0"+
    "\20\45\12\124\2\45\24\0\63\45\1\0\12\45\1\0"+
    "\163\45\45\0\11\45\2\0\147\45\2\0\65\45\2\0"+
    "\5\45\60\0\61\45\30\0\64\45\14\0\106\45\12\0"+
    "\12\124\6\0\30\45\3\0\1\45\1\0\3\45\12\124"+
    "\44\45\2\0\44\45\14\0\35\45\3\0\101\45\16\0"+
    "\1\45\12\124\6\0\20\45\12\124\5\45\1\0\67\45"+
    "\11\0\16\45\2\0\12\124\6\0\27\45\3\0\111\45"+
    "\30\0\3\45\2\0\20\45\2\0\5\45\12\0\6\45"+
    "\2\0\6\45\2\0\6\45\11\0\7\45\1\0\7\45"+
    "\1\0\53\45\1\0\14\45\10\0\173\45\1\0\2\45"+
    "\2\0\12\124\6\0\244\45\14\0\27\45\4\0\61\45"+
    "\4\0\156\45\2\0\152\45\46\0\7\45\14\0\5\45"+
    "\5\0\14\45\1\0\15\45\1\0\5\45\1\0\1\45"+
    "\1\0\2\45\1\0\2\45\1\0\154\45\41\0\153\45"+
    "\22\0\100\45\2\0\66\45\50\0\14\45\4\0\20\45"+
    "\20\0\20\45\3\0\2\45\30\0\3\45\40\0\5\45"+
    "\1\0\207\45\23\0\12\124\7\0\32\45\4\0\1\45"+
    "\1\0\32\45\13\0\131\45\3\0\6\45\2\0\6\45"+
    "\2\0\6\45\2\0\3\45\43\0\14\45\1\0\32\45"+
    "\1\0\23\45\1\0\2\45\1\0\17\45\2\0\16\45"+
    "\42\0\173\45\105\0\65\45\210\0\1\45\202\0\35\45"+
    "\3\0\61\45\17\0\1\45\37\0\40\45\15\0\36\45"+
    "\5\0\53\45\5\0\36\45\2\0\44\45\4\0\10\45"+
    "\1\0\5\45\52\0\236\45\2\0\12\124\6\0\44\45"+
    "\4\0\44\45\4\0\50\45\10\0\64\45\234\0\67\45"+
    "\11\0\26\45\12\0\10\45\230\0\6\45\2\0\1\45"+
    "\1\0\54\45\1\0\2\45\3\0\1\45\2\0\27\45"+
    "\12\0\27\45\11\0\37\45\101\0\23\45\1\0\2\45"+
    "\12\0\26\45\12\0\32\45\106\0\70\45\6\0\2\45"+
    "\100\0\4\45\1\0\2\45\5\0\10\45\1\0\3\45"+
    "\1\0\35\45\2\0\3\45\4\0\1\45\40\0\35\45"+
    "\3\0\35\45\43\0\10\45\1\0\36\45\31\0\66\45"+
    "\12\0\26\45\12\0\23\45\15\0\22\45\156\0\111\45"+
    "\67\0\63\45\15\0\63\45\15\0\50\45\10\0\12\124"+
    "\306\0\35\45\12\0\1\45\10\0\41\45\217\0\27\45"+
    "\11\0\107\45\37\0\12\124\17\0\74\45\25\0\31\45"+
    "\7\0\12\124\6\0\65\45\1\0\12\124\4\0\3\45"+
    "\11\0\44\45\2\0\1\45\11\0\105\45\4\0\4\45"+
    "\3\0\12\124\1\45\1\0\1\45\43\0\22\45\1\0"+
    "\45\45\6\0\1\45\101\0\7\45\1\0\1\45\1\0"+
    "\4\45\1\0\17\45\1\0\12\45\7\0\73\45\5\0"+
    "\12\124\6\0\4\45\1\0\10\45\2\0\2\45\2\0"+
    "\26\45\1\0\7\45\1\0\2\45\1\0\5\45\1\0"+
    "\12\45\2\0\2\45\2\0\3\45\2\0\1\45\6\0"+
    "\1\45\5\0\7\45\2\0\7\45\3\0\5\45\213\0"+
    "\113\45\5\0\12\124\4\0\2\45\40\0\106\45\1\0"+
    "\1\45\10\0\12\124\246\0\66\45\2\0\11\45\27\0"+
    "\6\45\42\0\101\45\3\0\1\45\13\0\12\124\46\0"+
    "\71\45\7\0\12\124\66\0\33\45\2\0\17\45\4\0"+
    "\12\124\306\0\73\45\145\0\100\45\12\124\25\0\1\45"+
    "\240\0\10\45\2\0\56\45\2\0\10\45\1\0\2\45"+
    "\33\0\77\45\10\0\1\45\10\0\112\45\3\0\1\45"+
    "\42\0\71\45\7\0\11\45\1\0\55\45\1\0\11\45"+
    "\17\0\12\124\30\0\36\45\2\0\26\45\1\0\16\45"+
    "\111\0\7\45\1\0\2\45\1\0\54\45\3\0\1\45"+
    "\1\0\2\45\1\0\11\45\10\0\12\124\6\0\6\45"+
    "\1\0\2\45\1\0\45\45\1\0\2\45\1\0\6\45"+
    "\7\0\12\124\u0136\0\27\45\11\0\232\45\146\0\157\45"+
    "\21\0\304\45\274\0\57\45\321\0\107\45\271\0\71\45"+
    "\7\0\37\45\1\0\12\124\146\0\36\45\2\0\5\45"+
    "\13\0\67\45\11\0\4\45\14\0\12\124\11\0\25\45"+
    "\5\0\23\45\260\0\100\45\200\0\113\45\4\0\71\45"+
    "\7\0\21\45\100\0\2\45\1\0\1\45\34\0\370\45"+
    "\10\0\363\45\15\0\37\45\61\0\3\45\21\0\4\45"+
    "\10\0\u018c\45\4\0\153\45\5\0\15\45\3\0\11\45"+
    "\7\0\12\45\3\0\2\45\306\0\5\45\3\0\6\45"+
    "\10\0\10\45\2\0\7\45\36\0\4\45\224\0\3\45"+
    "\273\0\125\45\1\0\107\45\1\0\2\45\2\0\1\45"+
    "\2\0\2\45\2\0\4\45\1\0\14\45\1\0\1\45"+
    "\1\0\7\45\1\0\101\45\1\0\4\45\2\0\10\45"+
    "\1\0\7\45\1\0\34\45\1\0\4\45\1\0\5\45"+
    "\1\0\1\45\3\0\7\45\1\0\u0154\45\2\0\31\45"+
    "\1\0\31\45\1\0\37\45\1\0\31\45\1\0\37\45"+
    "\1\0\31\45\1\0\37\45\1\0\31\45\1\0\37\45"+
    "\1\0\31\45\1\0\10\45\2\0\62\124\67\45\4\0"+
    "\62\45\10\0\1\45\16\0\1\45\26\0\5\45\1\0"+
    "\17\45\120\0\7\45\1\0\21\45\2\0\7\45\1\0"+
    "\2\45\1\0\5\45\325\0\55\45\3\0\16\45\2\0"+
    "\12\124\4\0\1\45\u0171\0\60\45\12\124\6\0\305\45"+
    "\13\0\7\45\51\0\114\45\4\0\12\124\246\0\4\45"+
    "\1\0\33\45\1\0\2\45\1\0\1\45\2\0\1\45"+
    "\1\0\12\45\1\0\4\45\1\0\1\45\1\0\1\45"+
    "\6\0\1\45\4\0\1\45\1\0\1\45\1\0\1\45"+
    "\1\0\3\45\1\0\2\45\1\0\1\45\2\0\1\45"+
    "\1\0\1\45\1\0\1\45\1\0\1\45\1\0\1\45"+
    "\1\0\2\45\1\0\1\45\2\0\4\45\1\0\7\45"+
    "\1\0\4\45\1\0\4\45\1\0\1\45\1\0\12\45"+
    "\1\0\21\45\5\0\3\45\1\0\5\45\1\0\21\45"+
    "\164\0\32\45\6\0\32\45\6\0\32\45\166\0\327\45"+
    "\51\0\65\45\13\0\336\45\2\0\u0182\45\16\0\u0131\45"+
    "\37\0\36\45\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\3\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\1\17"+
    "\1\20\11\4\1\21\1\22\15\4\1\23\1\1\1\24"+
    "\1\4\1\25\1\0\3\4\1\0\30\4\1\26\1\4"+
    "\1\0\1\27\1\30\1\31\26\4\1\32\12\4\1\33"+
    "\1\2\2\34\1\4\2\35\1\36\40\4\1\37\1\0"+
    "\2\4\1\40\10\4\1\41\10\4\1\42\16\4\1\43"+
    "\6\4\1\44\37\4\1\0\4\4\1\45\3\4\1\46"+
    "\12\4\1\47\1\50\7\4\1\51\2\4\1\52\4\4"+
    "\1\53\1\4\1\54\1\4\1\55\2\4\1\56\1\57"+
    "\2\4\1\60\1\61\7\4\1\62\11\4\1\63\4\4"+
    "\1\0\5\4\1\64\2\4\1\65\17\4\1\66\1\67"+
    "\1\4\1\70\1\0\4\4\1\0\1\71\13\4\1\72"+
    "\1\4\1\0\1\4\1\73\1\4\1\0\3\4\1\74"+
    "\1\4\1\75\1\76\1\4\1\77\2\4\1\100\13\4"+
    "\2\0\1\101\2\4\1\102\1\0\1\4\1\103\2\4"+
    "\1\0\1\4\1\0\1\2\1\104\3\4\1\105\4\4"+
    "\1\106\3\4\1\107\1\110\1\4\1\111\1\112\2\0"+
    "\1\113\1\114\1\0\2\4\2\0\2\4\1\115\1\116"+
    "\1\117\6\4\5\0\10\4\1\0\1\120\3\0\1\121"+
    "\2\4\1\122\1\4\1\123\1\4\1\124\1\0\1\125"+
    "\2\0\1\4\1\126\2\4\1\127\1\0\1\103\1\4"+
    "\1\130\1\4\1\131\1\0\1\4\1\132\4\4\1\133";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe"+
    "\0\u01a9\0\u01a9\0\u01a9\0\u01a9\0\125\0\125\0\u0253\0\u02a8"+
    "\0\u01a9\0\u01a9\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6"+
    "\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\125\0\125"+
    "\0\u06f9\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c"+
    "\0\u09a1\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u01a9\0\u0b4a\0\u01a9"+
    "\0\u0b9f\0\125\0\u0bf4\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d"+
    "\0\u0df2\0\u0e47\0\u0e9c\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u1045"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed"+
    "\0\u1342\0\u1397\0\u13ec\0\u1441\0\u1496\0\u14eb\0\u1540\0\u01a9"+
    "\0\u1595\0\u15ea\0\125\0\125\0\125\0\u163f\0\u1694\0\u16e9"+
    "\0\u173e\0\u1793\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991"+
    "\0\u19e6\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39"+
    "\0\u1c8e\0\u1ce3\0\u1d38\0\u01a9\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c"+
    "\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\125\0\u20df"+
    "\0\125\0\u01a9\0\u2134\0\u01a9\0\125\0\u01a9\0\u2189\0\u21de"+
    "\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387\0\u23dc\0\u2431\0\u2486"+
    "\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f\0\u2684\0\u26d9\0\u272e"+
    "\0\u2783\0\u27d8\0\u282d\0\u2882\0\u28d7\0\u292c\0\u2981\0\u29d6"+
    "\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a\0\u2b7f\0\u2bd4\0\u1595\0\u2c29"+
    "\0\u2c7e\0\u2cd3\0\u01a9\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c"+
    "\0\u2ed1\0\u2f26\0\u2f7b\0\u01a9\0\u2fd0\0\u3025\0\u307a\0\u30cf"+
    "\0\u3124\0\u3179\0\u31ce\0\u3223\0\u01a9\0\u3278\0\u32cd\0\u3322"+
    "\0\u3377\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca"+
    "\0\u361f\0\u3674\0\u36c9\0\u01a9\0\u371e\0\u3773\0\u37c8\0\u381d"+
    "\0\u3872\0\u38c7\0\u01a9\0\u391c\0\u3971\0\u39c6\0\u3a1b\0\u3a70"+
    "\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18"+
    "\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0"+
    "\0\u4015\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268"+
    "\0\u42bd\0\u4312\0\u4367\0\u43bc\0\u4411\0\u4466\0\u44bb\0\u01a9"+
    "\0\u4510\0\u4565\0\u45ba\0\u01a9\0\u460f\0\u4664\0\u46b9\0\u470e"+
    "\0\u4763\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u490c\0\u01a9\0\u01a9"+
    "\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f\0\u01a9"+
    "\0\u4bb4\0\u4c09\0\u01a9\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u01a9"+
    "\0\u4db2\0\u01a9\0\u4e07\0\u01a9\0\u4e5c\0\u4eb1\0\u01a9\0\u01a9"+
    "\0\u4f06\0\u4f5b\0\u01a9\0\u01a9\0\u4fb0\0\u5005\0\u505a\0\u50af"+
    "\0\u5104\0\u5159\0\u51ae\0\u01a9\0\u5203\0\u5258\0\u52ad\0\u5302"+
    "\0\u5357\0\u53ac\0\u5401\0\u5456\0\u54ab\0\u01a9\0\u5500\0\u5555"+
    "\0\u55aa\0\u55ff\0\u5654\0\u56a9\0\u56fe\0\u5753\0\u57a8\0\u57fd"+
    "\0\u01a9\0\u5852\0\u58a7\0\u01a9\0\u58fc\0\u5951\0\u59a6\0\u59fb"+
    "\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e\0\u5ca3"+
    "\0\u5cf8\0\u5d4d\0\u5da2\0\u01a9\0\u01a9\0\u5df7\0\u01a9\0\u5e4c"+
    "\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5\0\u01a9\0\u604a\0\u609f"+
    "\0\u60f4\0\u6149\0\u619e\0\u61f3\0\u6248\0\u629d\0\u62f2\0\u6347"+
    "\0\u639c\0\u01a9\0\u63f1\0\u6446\0\u649b\0\u01a9\0\u64f0\0\u6545"+
    "\0\u659a\0\u65ef\0\u6644\0\u01a9\0\u6699\0\u01a9\0\u01a9\0\u66ee"+
    "\0\u01a9\0\u6743\0\u6798\0\u01a9\0\u67ed\0\u6842\0\u6897\0\u68ec"+
    "\0\u6941\0\u6996\0\u69eb\0\u6a40\0\u6a95\0\u6aea\0\u6b3f\0\u6b94"+
    "\0\u6be9\0\u01a9\0\u6c3e\0\u6c93\0\u01a9\0\u6ce8\0\u6d3d\0\u01a9"+
    "\0\u6d92\0\u6de7\0\u6e3c\0\u6e91\0\u6ee6\0\u4367\0\u01a9\0\u6f3b"+
    "\0\u6f90\0\u6fe5\0\u01a9\0\u703a\0\u708f\0\u70e4\0\u7139\0\u01a9"+
    "\0\u718e\0\u71e3\0\u7238\0\u01a9\0\u01a9\0\u728d\0\u01a9\0\u01a9"+
    "\0\u72e2\0\u7337\0\u01a9\0\u01a9\0\u738c\0\u73e1\0\u7436\0\u748b"+
    "\0\u74e0\0\u7535\0\u758a\0\u01a9\0\u01a9\0\u01a9\0\u75df\0\u7634"+
    "\0\u7689\0\u76de\0\u7733\0\u7788\0\u77dd\0\u7832\0\u7887\0\u78dc"+
    "\0\u7931\0\u7986\0\u79db\0\u7a30\0\u7a85\0\u7ada\0\u7b2f\0\u7b84"+
    "\0\u7bd9\0\u7c2e\0\125\0\u7c83\0\u7cd8\0\u7d2d\0\u01a9\0\u7d82"+
    "\0\u7dd7\0\u01a9\0\u7e2c\0\u01a9\0\u7e81\0\u01a9\0\u7ed6\0\125"+
    "\0\u7f2b\0\u7f80\0\u7fd5\0\u01a9\0\u802a\0\u807f\0\125\0\u80d4"+
    "\0\125\0\u8129\0\u01a9\0\u817e\0\u81d3\0\u81d3\0\u8228\0\u01a9"+
    "\0\u827d\0\u82d2\0\u8327\0\u837c\0\u01a9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\3\7\1\10"+
    "\1\7\1\11\1\12\1\13\1\14\1\15\1\7\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\7\1\30\1\31\1\32\6\7\1\33\1\7"+
    "\1\34\1\35\1\7\1\36\6\7\1\37\1\7\1\40"+
    "\1\7\1\41\1\42\1\43\1\44\1\7\1\45\1\7"+
    "\1\46\1\47\4\7\1\50\1\51\2\7\1\52\1\53"+
    "\1\54\2\7\1\55\3\7\1\56\1\57\1\60\1\7"+
    "\127\0\1\3\127\0\1\61\12\7\1\0\1\7\1\0"+
    "\5\7\1\0\1\62\1\0\30\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\2\63\1\0\1\63\1\0\1\64"+
    "\1\7\1\65\1\66\7\64\1\67\1\64\1\63\1\70"+
    "\2\71\2\64\3\63\1\64\1\72\1\73\1\74\3\73"+
    "\1\75\15\73\1\76\2\73\1\63\1\7\1\63\1\73"+
    "\1\77\1\100\1\101\2\73\1\102\1\103\1\104\1\73"+
    "\1\105\1\73\1\106\1\107\1\110\1\111\1\112\1\73"+
    "\1\113\1\114\1\115\2\73\1\116\1\73\1\117\1\73"+
    "\1\64\1\63\1\64\1\73\5\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\30\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\5\7\1\120\5\7\1\0\1\7"+
    "\1\0\5\7\3\0\30\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\121\1\0\5\7"+
    "\3\0\30\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\121\1\0\3\20\2\7\3\0"+
    "\30\7\1\0\1\7\1\0\34\7\1\0\2\7\5\0"+
    "\1\122\23\0\1\123\124\0\1\124\124\0\1\125\100\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\7\7\1\126\24\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\14\7\1\127"+
    "\5\7\1\130\5\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\1\7\1\131\26\7\1\0\1\7\1\0\1\132\33\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\5\7\1\133\22\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\26\7\1\134\1\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\5\7\1\135\22\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\24\7\1\136\3\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\16\7\1\137\11\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\5\7\1\140\22\7\1\0\1\7\1\0\34\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\30\7\1\0\1\7\1\0\14\7\1\141\17\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\30\7\1\0\1\7\1\0\1\7\1\142\15\7"+
    "\1\143\14\7\1\0\2\7\5\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\30\7\1\0\1\7\1\0\1\132"+
    "\7\7\1\144\3\7\1\145\2\7\1\146\14\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\5\7\1\147\26\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\1\7\1\150\15\7\1\151"+
    "\14\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\30\7\1\0\1\7\1\0\5\7\1\152"+
    "\14\7\1\153\11\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\4\7\1\154\11\7\1\155\15\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\1\7\1\156\32\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\16\7\1\157\15\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\17\7\1\160\14\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\22\7\1\161\1\7\1\162\7\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\5\7\1\163\14\7\1\164"+
    "\6\7\1\165\2\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\11\7\1\166\22\7\1\0\2\7\122\0\1\167\2\0"+
    "\2\170\1\3\1\170\1\4\13\61\1\170\1\61\1\170"+
    "\5\61\3\170\30\61\1\170\1\61\1\170\34\61\1\170"+
    "\2\61\2\63\1\0\1\63\1\0\1\63\1\171\55\63"+
    "\1\0\42\63\1\0\1\63\1\0\1\64\1\172\11\64"+
    "\1\63\1\64\1\63\5\64\3\63\30\64\1\63\1\7"+
    "\1\63\34\64\1\63\2\64\2\63\1\0\1\63\1\0"+
    "\1\64\1\172\11\64\1\63\1\64\1\63\3\173\2\64"+
    "\3\63\1\64\6\173\21\64\1\63\1\7\1\63\1\64"+
    "\6\173\25\64\1\63\2\64\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\7\64\1\67\1\64\1\63"+
    "\3\66\2\64\3\63\1\64\27\66\1\63\1\7\1\63"+
    "\33\66\1\64\1\63\1\64\1\66\2\63\1\0\1\63"+
    "\1\0\1\63\1\175\1\63\1\67\7\63\1\67\2\63"+
    "\3\67\6\63\27\67\1\63\1\0\1\63\33\67\3\63"+
    "\1\67\2\63\1\0\1\63\1\0\1\64\1\176\1\64"+
    "\1\66\1\177\2\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\20\73\1\201\12\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\176\1\64\1\66\1\177"+
    "\2\64\1\200\3\64\1\67\1\64\1\63\3\71\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\20\73\1\201"+
    "\12\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\22\73\1\202\10\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\33\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\17\73\1\203\13\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\5\73\1\204\25\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\5\73\1\205\25\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\21\73\1\206\11\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\14\73"+
    "\1\207\16\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\5\73\1\210\2\73\1\211"+
    "\6\73\1\212\13\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\25\73\1\213\5\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\22\73\1\214\10\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\24\73"+
    "\1\215\6\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\25\73\1\216\5\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\5\73\1\217\3\73\1\220\21\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\1\73\1\221\31\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\1\73\1\222\23\73"+
    "\1\223\5\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\14\73\1\224\16\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\25\73\1\225\5\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\1\73\1\226"+
    "\3\73\1\227\3\73\1\230\5\73\1\231\13\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\1\73\1\232\7\73\1\233\21\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\5\73\1\234\25\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\10\73\1\235\22\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\5\73\1\236\25\73\1\64\1\63\1\64"+
    "\1\73\5\0\13\7\1\0\1\7\1\0\3\237\2\7"+
    "\3\0\30\7\1\0\1\7\1\0\34\7\1\0\1\7"+
    "\1\237\20\0\1\240\111\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\30\7\1\0\1\7\1\0\14\7\1\241"+
    "\17\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\5\7\1\242\22\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\3\7\1\243\24\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\21\7\1\244\6\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\2\7\1\245\1\7\1\246\2\7\1\247"+
    "\1\250\1\251\2\7\1\252\2\7\1\253\1\254\1\7"+
    "\1\255\1\256\4\7\1\0\1\7\1\0\2\7\1\245"+
    "\1\7\1\246\2\7\1\247\1\250\1\251\2\7\1\252"+
    "\2\7\1\253\1\254\2\7\1\255\1\256\7\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\22\7\1\257\5\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\11\7\1\260\16\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\23\7\1\261\4\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\15\7\1\262\12\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\1\263\33\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\25\7"+
    "\1\264\2\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\24\7\1\265\7\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\3\7\1\266\30\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\17\7\1\267\14\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\1\7\1\270\32\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\1\7\1\271\32\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\14\7\1\272\17\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\3\7\1\273\30\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\14\7\1\274\17\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\16\7\1\275\15\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\11\7\1\276\22\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\5\7\1\277\26\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\24\7\1\300\7\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\15\7\1\301\16\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\3\7\1\302\30\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\27\7\1\303\4\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\3\7\1\304\30\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\22\7\1\305\11\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\30\7\1\306\3\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\25\7\1\307\6\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\20\7\1\310\13\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\4\7\1\311\27\7\1\0\2\7"+
    "\2\170\1\3\1\170\1\4\120\170\2\63\1\0\1\63"+
    "\1\0\1\64\1\172\11\64\1\63\1\64\1\63\3\312"+
    "\2\64\3\63\1\64\6\312\21\64\1\63\1\7\1\63"+
    "\1\64\6\312\25\64\1\63\2\64\2\63\1\0\1\63"+
    "\1\0\1\64\1\313\11\64\1\63\1\64\1\63\5\64"+
    "\3\63\30\64\1\63\1\7\1\63\34\64\1\63\2\64"+
    "\2\63\1\0\1\63\1\0\1\64\1\172\6\64\1\314"+
    "\2\64\1\63\1\64\1\63\5\64\3\63\30\64\1\63"+
    "\1\7\1\63\34\64\1\63\2\64\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\30\73\1\315\2\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\11\73\1\316\21\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\25\73\1\317\5\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\16\73\1\320\14\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\22\73"+
    "\1\321\10\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\25\73\1\322\5\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\1\73\1\323\23\73\1\324\5\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\16\73\1\325\14\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\5\73\1\326\25\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\14\73\1\327\16\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\3\73"+
    "\1\330\27\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\1\73\1\331\3\73\1\332"+
    "\25\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\24\73\1\333\6\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\23\73\1\334\7\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\6\73\1\335\24\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\15\73\1\324\15\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\22\73"+
    "\1\336\10\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\26\73\1\331\4\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\15\73\1\337\15\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\11\73\1\340"+
    "\21\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\22\73\1\341\10\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\4\73\1\342\26\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\4\73\1\343\26\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\7\73\1\344\23\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\27\73"+
    "\1\327\3\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\16\73\1\345\14\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\14\73\1\346\16\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\1\73\1\347"+
    "\26\73\1\350\2\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\11\73\1\351\21\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\14\73\1\352\16\73\1\64\1\63\1\64"+
    "\1\73\20\0\1\353\111\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\30\7\1\0\1\7\1\0\17\7\1\354"+
    "\14\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\21\7\1\355\6\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\1\7\1\356\26\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\17\7\1\357\1\7\1\360\2\7\1\361"+
    "\3\7\1\0\1\7\1\0\17\7\1\357\2\7\1\360"+
    "\2\7\1\361\6\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\11\7\1\362\16\7\1\0"+
    "\1\7\1\0\11\7\1\362\22\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\3\7\1\363"+
    "\24\7\1\0\1\7\1\0\3\7\1\363\30\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\1\7\1\364"+
    "\3\7\3\0\5\7\1\365\22\7\1\0\1\7\1\0"+
    "\5\7\1\365\26\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\15\7\1\366\1\367\11\7"+
    "\1\0\1\7\1\0\15\7\1\366\1\367\15\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\11\7\1\370\16\7\1\0\1\7\1\0\11\7\1\370"+
    "\22\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\20\7\1\371\7\7\1\0\1\7\1\0"+
    "\20\7\1\371\13\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\5\7\1\372\12\7\1\373"+
    "\1\374\6\7\1\0\1\7\1\0\5\7\1\372\12\7"+
    "\1\373\1\7\1\374\11\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\5\7\1\375\3\7"+
    "\1\376\16\7\1\0\1\7\1\0\5\7\1\375\3\7"+
    "\1\376\22\7\1\0\2\7\5\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\3\7\1\377\24\7\1\0\1\7"+
    "\1\0\34\7\1\0\2\7\5\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\23\7\1\u0100\4\7\1\0\1\7"+
    "\1\0\34\7\1\0\2\7\5\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\11\7\1\u0101\6\7\1\u0102\7\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\30\7\1\0\1\7"+
    "\1\0\1\u0103\33\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\14\7\1\u0104\13\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\5\7\1\u0105\22\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\13\7\1\u0106\20\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\14\7\1\u0107\17\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\22\7\1\u0108\11\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\23\7\1\u0109\10\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\17\7\1\u010a\3\7\1\u010b\10\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\11\7\1\u010c\22\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\23\7\1\u010d\10\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\24\7\1\u010e\7\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\7\7\1\u010f\24\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\6\7\1\u0110\25\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\5\7\1\u0111\26\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\5\7\1\u0112\26\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\14\7\1\u0113\17\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\23\7\1\u0114\10\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\11\7\1\u0115\22\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\24\7\1\u0116\7\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\5\7\1\u0117\26\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\5\7\1\u0118\26\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\24\7\1\u0119\7\7\1\0\2\7\2\63"+
    "\1\0\1\63\1\0\1\64\1\172\11\64\1\63\1\64"+
    "\1\63\3\u011a\2\64\3\63\1\64\6\u011a\21\64\1\63"+
    "\1\7\1\63\1\64\6\u011a\25\64\1\63\2\64\2\63"+
    "\1\0\1\63\1\0\1\64\1\u011b\11\64\1\63\1\64"+
    "\1\63\5\64\3\63\30\64\1\63\1\7\1\63\34\64"+
    "\1\63\2\64\2\63\1\0\1\63\1\0\1\64\1\u011c"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\33\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\1\73\1\u011d\31\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\22\73\1\u011e\10\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\5\73\1\u011f\25\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\4\73\1\u0120\26\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\1\73"+
    "\1\343\31\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\3\73\1\u0121\27\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\5\73\1\343\25\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\24\73\1\u0122"+
    "\6\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\3\73\1\u0123\27\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\u0124"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\33\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\10\73\1\u0125\22\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\31\73\1\343\1\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\5\73\1\u0126\25\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\20\73\1\u0127\12\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\24\73"+
    "\1\u0128\6\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\24\73\1\u0129\6\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\17\73\1\u012a\13\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\2\73\1\u012b"+
    "\30\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\26\73\1\324\4\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\20\73\1\u012c\12\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\11\73\1\u012d\21\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\u012e\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\33\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\10\73\1\335\22\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\23\73\1\u012f\7\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\26\73"+
    "\1\u0130\4\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\14\73\1\343\16\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\24\73\1\u0131\6\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\24\73\1\324"+
    "\6\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\14\73\1\u0132\16\73\1\64\1\63"+
    "\1\64\1\73\20\353\1\u0133\104\353\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\2\7\1\u0134\31\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\23\7\1\u0135\4\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\3\7\1\u0136\24\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\4\7\1\u0137\23\7\1\0"+
    "\1\7\1\0\4\7\1\u0137\27\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\23\7\1\u0138"+
    "\4\7\1\0\1\7\1\0\24\7\1\u0138\7\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\25\7\1\u0139\2\7\1\0\1\7\1\0\26\7\1\u0139"+
    "\5\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\11\7\1\u013a\16\7\1\0\1\7\1\0"+
    "\11\7\1\u013a\22\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\1\7\1\u013b\26\7\1\0"+
    "\1\7\1\0\1\7\1\u013b\32\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\7\7\1\u013c"+
    "\20\7\1\0\1\7\1\0\7\7\1\u013c\24\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\20\7\1\u013d\7\7\1\0\1\7\1\0\20\7\1\u013d"+
    "\13\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\16\7\1\u013e\11\7\1\0\1\7\1\0"+
    "\16\7\1\u013e\15\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\23\7\1\u013f\4\7\1\0"+
    "\1\7\1\0\24\7\1\u013f\7\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\14\7\1\u0140"+
    "\13\7\1\0\1\7\1\0\14\7\1\u0140\17\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\1\7\1\u0141\26\7\1\0\1\7\1\0\1\7\1\u0141"+
    "\32\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\3\7\1\u0142\24\7\1\0\1\7\1\0"+
    "\3\7\1\u0142\30\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\26\7\1\u0143\1\7\1\0"+
    "\1\7\1\0\30\7\1\u0143\3\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\23\7\1\u0144"+
    "\4\7\1\0\1\7\1\0\24\7\1\u0144\7\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\15\7\1\u0145\12\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\1\7\1\u0146\26\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\1\7\1\u0147\26\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\17\7\1\u0148\10\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\21\7\1\u0149\6\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\7\7\1\u014a\24\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\5\7\1\u014b\26\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\23\7\1\u014c\10\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\22\7\1\u014d\11\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\15\7\1\u014e\16\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\5\7\1\u014f\26\7\1\0"+
    "\2\7\5\0\13\7\1\u0150\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\34\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\10\7\1\u0151\23\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\7\7\1\u0152\24\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\11\7\1\u0153\22\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\16\7\1\u0154\15\7\1\0\2\7\5\0"+
    "\13\7\1\u0155\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\10\7\1\u0156\23\7\1\0\2\7\2\63\1\0\1\63"+
    "\1\0\1\64\1\172\11\64\1\63\1\64\1\63\3\u0157"+
    "\2\64\3\63\1\64\6\u0157\21\64\1\63\1\7\1\63"+
    "\1\64\6\u0157\25\64\1\63\2\64\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\14\73\1\u0158\16\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\11\73\1\u0159\21\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\26\73\1\u015a\4\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\1\73\1\u015b\31\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\13\73"+
    "\1\343\17\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\5\73\1\u015c\25\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\13\73\1\u015d\17\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\23\73\1\u015e"+
    "\7\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\16\73\1\343\14\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\1\u015f\1\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\23\73\1\u0160\7\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\11\73\1\u0161"+
    "\21\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\u0162\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\33\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\17\73\1\u0126"+
    "\13\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\174\1\64\1\66\3\64\1\200\3\64"+
    "\1\67\1\64\1\63\3\73\2\64\3\63\1\64\27\73"+
    "\1\63\1\7\1\63\5\73\1\u0163\25\73\1\64\1\63"+
    "\1\64\1\73\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\14\73\1\324\16\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\17\73\1\u0131\13\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\u0164"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\33\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\5\73\1\u0165\25\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\u0166\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\33\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\17\73\1\u0167\13\73"+
    "\1\64\1\63\1\64\1\73\20\353\1\u0168\104\353\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\1\7\1\u0169\32\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\1\u016a\33\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\23\7\1\u016b\4\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\27\7\1\u016c\1\0"+
    "\1\7\1\0\31\7\1\u016c\2\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\23\7\1\u016d"+
    "\4\7\1\0\1\7\1\0\24\7\1\u016d\7\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\3\7\1\u016e\24\7\1\0\1\7\1\0\3\7\1\u016e"+
    "\30\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\4\7\1\u016f\23\7\1\0\1\7\1\0"+
    "\4\7\1\u016f\27\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\24\7\1\u0170\3\7\1\0"+
    "\1\7\1\0\25\7\1\u0170\6\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\13\7\1\u0171"+
    "\14\7\1\0\1\7\1\0\13\7\1\u0171\20\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\11\7\1\u0172\16\7\1\0\1\7\1\0\11\7\1\u0172"+
    "\22\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\5\7\1\u0173\22\7\1\0\1\7\1\0"+
    "\5\7\1\u0173\26\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\15\7\1\u0174\12\7\1\0"+
    "\1\7\1\0\15\7\1\u0174\16\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\11\7\1\u0175"+
    "\16\7\1\0\1\7\1\0\11\7\1\u0175\22\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\23\7\1\u0176\4\7\1\0\1\7\1\0\24\7\1\u0176"+
    "\7\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\14\7\1\u0177\13\7\1\0\1\7\1\0"+
    "\14\7\1\u0177\17\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\20\7\1\u0178\7\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\21\7\1\u0179\6\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\14\7\1\u017a\13\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\1\7\1\u017b\26\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\22\7\1\u017c\5\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\22\7\1\u017d\11\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\1\7\1\u017e\32\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\1\7\1\u017f\32\7\1\0\2\7\74\0\1\u0180\14\0"+
    "\1\u0181\20\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\24\7\1\u0182\7\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\5\7\1\u0183\26\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\3\7\1\u0184\30\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\7\7\1\u0185\24\7\1\0"+
    "\2\7\67\0\1\u0186\35\0\2\63\1\0\1\63\1\0"+
    "\1\64\1\172\11\64\1\63\1\64\1\63\3\u0187\2\64"+
    "\3\63\1\64\6\u0187\21\64\1\63\1\7\1\63\1\64"+
    "\6\u0187\25\64\1\63\2\64\2\63\1\0\1\63\1\0"+
    "\1\64\1\u0188\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\33\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\5\73\1\u0189\25\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\1\73\1\u0158\31\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\16\73"+
    "\1\u015a\14\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\64\1\174\1\64\1\66\3\64\1\200"+
    "\3\64\1\67\1\64\1\63\3\73\2\64\3\63\1\64"+
    "\27\73\1\63\1\7\1\63\22\73\1\u0129\10\73\1\64"+
    "\1\63\1\64\1\73\2\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\2\73\1\u018a\30\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\2\64"+
    "\3\63\1\64\27\73\1\63\1\7\1\63\11\73\1\322"+
    "\21\73\1\64\1\63\1\64\1\73\2\63\1\0\1\63"+
    "\1\0\1\64\1\172\11\64\1\63\1\64\1\u018b\5\64"+
    "\3\63\30\64\1\63\1\7\1\63\34\64\1\63\2\64"+
    "\2\63\1\0\1\63\1\0\1\64\1\174\1\64\1\66"+
    "\3\64\1\200\3\64\1\67\1\64\1\63\3\73\1\u015f"+
    "\1\64\3\63\1\64\27\73\1\63\1\7\1\63\33\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\6\73\1\u018c\24\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\22\73"+
    "\1\u0131\10\73\1\64\1\63\1\64\1\73\2\63\1\0"+
    "\1\63\1\0\1\63\1\175\1\63\1\67\7\63\1\67"+
    "\2\63\3\67\6\63\27\67\1\63\1\0\1\63\23\67"+
    "\1\u018d\7\67\3\63\1\67\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\22\73\1\343\10\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\64\1\174\1\64"+
    "\1\66\3\64\1\200\3\64\1\67\1\64\1\63\3\73"+
    "\2\64\3\63\1\64\27\73\1\63\1\7\1\63\27\73"+
    "\1\343\3\73\1\64\1\63\1\64\1\73\20\353\1\u0168"+
    "\11\353\1\u018e\72\353\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\30\7\1\0\1\7\1\0\14\7\1\u018f"+
    "\17\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\11\7\1\u0190\16\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\5\7\1\u0191\22\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\17\7\1\u0192\10\7\1\0\1\7\1\0"+
    "\17\7\1\u0192\14\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\23\7\1\u0193\4\7\1\0"+
    "\1\7\1\0\24\7\1\u0193\7\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\17\7\1\u0194"+
    "\10\7\1\0\1\7\1\0\17\7\1\u0194\14\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\3\7\1\u0195\24\7\1\0\1\7\1\0\3\7\1\u0195"+
    "\30\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\20\7\1\u0196\7\7\1\0\1\7\1\0"+
    "\20\7\1\u0196\13\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\1\7\1\u0197\26\7\1\0"+
    "\1\7\1\0\1\7\1\u0197\32\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\5\7\1\u0198"+
    "\22\7\1\0\1\7\1\0\5\7\1\u0198\26\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\1\7\1\u0199\26\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\1\u019a\33\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\5\7"+
    "\1\u019b\22\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\4\7"+
    "\1\u019c\23\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\5\7"+
    "\1\u019d\22\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\17\7\1\u019e\14\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\16\7\1\u019f\15\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\14\7\1\u01a0\17\7\1\0\2\7"+
    "\67\0\1\u01a1\134\0\1\u01a2\32\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\30\7\1\0\1\7\1\0\22\7"+
    "\1\u01a3\11\7\1\0\2\7\5\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\30\7\1\0\1\7\1\0\13\7"+
    "\1\u01a4\20\7\1\0\2\7\102\0\1\u01a5\22\0\2\63"+
    "\1\0\1\63\1\0\1\64\1\172\11\64\1\63\1\64"+
    "\1\63\3\u01a6\2\64\3\63\1\64\6\u01a6\21\64\1\63"+
    "\1\7\1\63\1\64\6\u01a6\25\64\1\63\2\64\2\63"+
    "\1\0\1\63\1\0\1\64\1\174\1\64\1\66\3\64"+
    "\1\200\3\64\1\67\1\64\1\63\3\73\2\64\3\63"+
    "\1\64\27\73\1\63\1\7\1\63\22\73\1\u0158\10\73"+
    "\1\64\1\63\1\64\1\73\2\63\1\0\1\63\1\0"+
    "\1\64\1\174\1\64\1\66\3\64\1\200\3\64\1\67"+
    "\1\64\1\63\3\73\2\64\3\63\1\64\27\73\1\63"+
    "\1\7\1\63\17\73\1\u01a7\13\73\1\64\1\63\1\64"+
    "\1\73\2\63\1\0\1\63\1\0\1\63\1\171\13\63"+
    "\1\u01a8\41\63\1\0\42\63\1\0\1\63\1\0\1\64"+
    "\1\174\1\64\1\66\3\64\1\200\3\64\1\67\1\64"+
    "\1\63\3\73\2\64\3\63\1\64\27\73\1\63\1\7"+
    "\1\63\31\73\1\u0129\1\73\1\64\1\63\1\64\1\73"+
    "\2\63\1\0\1\63\1\0\1\63\1\175\1\63\1\67"+
    "\7\63\1\67\2\63\3\67\6\63\27\67\1\63\1\0"+
    "\1\63\5\67\1\u01a9\25\67\3\63\1\67\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\16\7\1\u01aa\11\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\21\7\1\u01ab\6\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\16\7\1\u01ac\11\7"+
    "\1\0\1\7\1\0\16\7\1\u01ac\15\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\16\7"+
    "\1\u01ad\11\7\1\0\1\7\1\0\16\7\1\u01ad\15\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\23\7\1\u01ae\4\7\1\0\1\7\1\0\24\7"+
    "\1\u01ae\7\7\1\0\2\7\5\0\13\7\1\0\1\7"+
    "\1\0\5\7\3\0\23\7\1\u01af\4\7\1\0\1\7"+
    "\1\0\24\7\1\u01af\7\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\21\7\1\u01b0\6\7"+
    "\1\0\1\7\1\0\22\7\1\u01b0\11\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\21\7"+
    "\1\u01b1\6\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\16\7"+
    "\1\u01b2\11\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\1\7"+
    "\1\u01b3\26\7\1\0\1\7\1\0\34\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\30\7"+
    "\1\0\1\7\1\0\25\7\1\u01b4\6\7\1\0\2\7"+
    "\103\0\1\u01b5\141\0\1\u01b6\103\0\1\u01b7\25\0\2\63"+
    "\1\0\1\63\1\0\1\64\1\u012e\11\64\1\63\1\64"+
    "\1\63\5\64\3\63\30\64\1\63\1\7\1\63\34\64"+
    "\1\63\2\64\2\63\1\0\1\63\1\0\1\64\1\174"+
    "\1\64\1\66\3\64\1\200\3\64\1\67\1\64\1\63"+
    "\3\73\2\64\3\63\1\64\27\73\1\63\1\7\1\63"+
    "\30\73\1\u0131\2\73\1\64\1\63\1\64\1\73\2\63"+
    "\1\0\1\63\1\0\1\63\1\171\11\63\2\u01b8\1\63"+
    "\3\u01b8\6\63\27\u01b8\1\63\1\0\1\63\33\u01b8\3\63"+
    "\1\u01b8\2\63\1\0\1\63\1\0\1\63\1\175\1\63"+
    "\1\67\7\63\1\67\2\63\3\67\6\63\27\67\1\63"+
    "\1\0\1\63\22\67\1\u01b9\10\67\3\63\1\67\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\6\7\1\u01ba"+
    "\21\7\1\0\1\7\1\0\34\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\30\7\1\0"+
    "\1\7\1\0\1\u01bb\33\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\11\7\1\u01bc\16\7"+
    "\1\0\1\7\1\0\11\7\1\u01bc\22\7\1\0\2\7"+
    "\5\0\13\7\1\0\1\7\1\0\5\7\3\0\5\7"+
    "\1\u01bd\22\7\1\0\1\7\1\0\5\7\1\u01bd\26\7"+
    "\1\0\2\7\5\0\13\7\1\0\1\7\1\0\5\7"+
    "\3\0\30\7\1\0\1\7\1\0\1\u01be\33\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\24\7\1\u01bf\3\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\23\7\1\u01c0\4\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\30\7\1\0\1\7\1\0\16\7\1\u01c1\15\7\1\0"+
    "\2\7\77\0\1\u01c2\120\0\1\u01c3\126\0\1\u01c4\27\0"+
    "\2\63\1\0\1\63\1\0\1\63\1\171\11\63\1\u01b8"+
    "\1\u01c5\1\63\3\u01b8\6\63\27\u01b8\1\63\1\0\1\63"+
    "\33\u01b8\3\63\1\u01b8\2\63\1\0\1\63\1\0\1\63"+
    "\1\175\1\63\1\67\7\63\1\67\2\63\3\67\6\63"+
    "\27\67\1\63\1\0\1\63\11\67\1\u01c6\21\67\3\63"+
    "\1\67\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\17\7\1\u01c7\10\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\1\7\1\u01c8\26\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\16\7\1\u01c9\11\7\1\0\1\7\1\0\16\7\1\u01c9"+
    "\15\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\1\7\1\u01ca\26\7\1\0\1\7\1\0"+
    "\1\7\1\u01ca\32\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\16\7\1\u01cb\11\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\15\7\1\u01cc\12\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\17\7\1\u01cd\10\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\30\7\1\0\1\7\1\0"+
    "\4\7\1\u01ce\27\7\1\0\2\7\102\0\1\u01cf\126\0"+
    "\1\u01d0\20\0\2\63\1\0\1\63\1\0\1\63\1\171"+
    "\11\63\1\u01b8\1\u01c5\1\63\3\u01d1\6\63\27\u01d1\1\63"+
    "\1\0\1\63\33\u01d1\3\63\1\u01d1\2\63\1\0\1\63"+
    "\1\0\1\63\1\175\1\63\1\67\7\63\1\67\2\63"+
    "\3\67\6\63\27\67\1\63\1\0\1\63\6\67\1\u01d2"+
    "\24\67\3\63\1\67\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\14\7\1\u01d3\13\7\1\0\1\7\1\0"+
    "\34\7\1\0\2\7\5\0\13\7\1\0\1\7\1\0"+
    "\5\7\3\0\7\7\1\u01d4\20\7\1\0\1\7\1\0"+
    "\7\7\1\u01d4\24\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\24\7\1\u01d5\3\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\5\0\13\7\1\0"+
    "\1\7\1\0\5\7\3\0\21\7\1\u01d6\6\7\1\0"+
    "\1\7\1\0\34\7\1\0\2\7\117\0\1\u01d7\5\0"+
    "\2\63\1\0\1\63\1\0\1\63\1\171\11\63\1\u01b8"+
    "\1\u01c5\1\63\3\u01d8\6\63\27\u01d8\1\63\1\0\1\63"+
    "\33\u01d8\3\63\1\u01d8\2\63\1\0\1\63\1\0\1\63"+
    "\1\u01d9\1\63\1\67\7\63\1\67\2\63\3\67\6\63"+
    "\27\67\1\63\1\0\1\63\33\67\3\63\1\67\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\5\7\1\u01da"+
    "\22\7\1\0\1\7\1\0\34\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\15\7\1\u01db"+
    "\12\7\1\0\1\7\1\0\34\7\1\0\2\7\5\0"+
    "\13\7\1\0\1\7\1\0\5\7\3\0\11\7\1\u01dc"+
    "\16\7\1\0\1\7\1\0\34\7\1\0\2\7\1\u01d8"+
    "\1\63\1\0\1\63\1\0\1\u01d8\1\u01dd\55\u01d8\1\u01de"+
    "\40\u01d8\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\1\7\1\u01df\26\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\5\0\13\7\1\0\1\7\1\0\5\7\3\0"+
    "\17\7\1\u01e0\10\7\1\0\1\7\1\0\34\7\1\0"+
    "\2\7\1\u01de\4\0\1\u01de\1\u01dd\116\u01de\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\23\7\1\u01e1\4\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\17\7\1\u01e2\10\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\21\7\1\u01e3\6\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\11\7\1\u01e4\16\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7\5\0\13\7"+
    "\1\0\1\7\1\0\5\7\3\0\17\7\1\u01e5\10\7"+
    "\1\0\1\7\1\0\34\7\1\0\2\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33745];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\11\1\2\11\20\1\2\11\21\1\1\11"+
    "\1\0\3\1\1\0\32\1\1\0\3\11\41\1\1\11"+
    "\1\1\1\11\3\1\1\11\42\1\1\0\112\1\1\0"+
    "\107\1\1\0\34\1\1\0\4\1\1\0\16\1\1\0"+
    "\3\1\1\0\27\1\2\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\23\1\2\0\2\1\1\0\2\1\2\0"+
    "\13\1\5\0\10\1\1\0\1\11\3\0\10\1\1\0"+
    "\1\11\2\0\4\1\1\11\1\0\1\11\4\1\1\0"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
		private Symbol symbol(int type) {
			return new Symbol(type, yyline + 1, yycolumn + 1);
		}

		private Symbol symbol(int type, Object object) {
			return new Symbol(type, yyline + 1, yycolumn + 1, object);
		}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaptchaLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 92: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 93: break;
          case 3:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 94: break;
          case 4:
            { return symbol(IN, yytext());
            }
            // fall through
          case 95: break;
          case 5:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 96: break;
          case 6:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 97: break;
          case 7:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 98: break;
          case 8:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 99: break;
          case 9:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 100: break;
          case 10:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 101: break;
          case 11:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 102: break;
          case 12:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 103: break;
          case 13:
            { return symbol(SEMI, yytext());
            }
            // fall through
          case 104: break;
          case 14:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 105: break;
          case 15:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 106: break;
          case 16:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 107: break;
          case 17:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 108: break;
          case 18:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 109: break;
          case 19:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 110: break;
          case 20:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 111: break;
          case 21:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 112: break;
          case 22:
            { return symbol(AND, yytext());
            }
            // fall through
          case 113: break;
          case 23:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 114: break;
          case 24:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 115: break;
          case 25:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 116: break;
          case 26:
            { return symbol(ID, yytext());
            }
            // fall through
          case 117: break;
          case 27:
            { return symbol(OR, yytext());
            }
            // fall through
          case 118: break;
          case 28:
            { return symbol(STRING, yytext());
            }
            // fall through
          case 119: break;
          case 29:
            { return symbol(ID_, yytext());
            }
            // fall through
          case 120: break;
          case 30:
            { return symbol(INTQ, yytext());
            }
            // fall through
          case 121: break;
          case 31:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 122: break;
          case 32:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 123: break;
          case 33:
            { return symbol(PARAGRAPH, yytext());
            }
            // fall through
          case 124: break;
          case 34:
            { return symbol(ALT, yytext());
            }
            // fall through
          case 125: break;
          case 35:
            { return symbol(SRC, yytext());
            }
            // fall through
          case 126: break;
          case 36:
            { return symbol(PERCNTG, yytext());
            }
            // fall through
          case 127: break;
          case 37:
            { return symbol(BR, yytext());
            }
            // fall through
          case 128: break;
          case 38:
            { return symbol(H1, yytext());
            }
            // fall through
          case 129: break;
          case 39:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 130: break;
          case 40:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 131: break;
          case 41:
            { return symbol(CHAR, yytext());
            }
            // fall through
          case 132: break;
          case 42:
            { return symbol(COLS, yytext());
            }
            // fall through
          case 133: break;
          case 43:
            { return symbol(HREF, yytext());
            }
            // fall through
          case 134: break;
          case 44:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 135: break;
          case 45:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 136: break;
          case 46:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 137: break;
          case 47:
            { return symbol(TYPE, yytext());
            }
            // fall through
          case 138: break;
          case 48:
            { return symbol(ONCLICK, yytext());
            }
            // fall through
          case 139: break;
          case 49:
            { return symbol(PIXEL, yytext());
            }
            // fall through
          case 140: break;
          case 50:
            { return symbol(CLASS_VALUE, yytext());
            }
            // fall through
          case 141: break;
          case 51:
            { return symbol(COLOUR, yytext());
            }
            // fall through
          case 142: break;
          case 52:
            { return symbol(DIV, yytext());
            }
            // fall through
          case 143: break;
          case 53:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 144: break;
          case 54:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 145: break;
          case 55:
            { return symbol(COLOR, yytext());
            }
            // fall through
          case 146: break;
          case 56:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 147: break;
          case 57:
            { return symbol(WIDTH, yytext());
            }
            // fall through
          case 148: break;
          case 58:
            { return symbol(ALIGN_VALUE, yytext());
            }
            // fall through
          case 149: break;
          case 59:
            { return symbol(TYPE_VALUE, yytext());
            }
            // fall through
          case 150: break;
          case 60:
            { return symbol(BODY, yytext());
            }
            // fall through
          case 151: break;
          case 61:
            { return symbol(GCIC, yytext());
            }
            // fall through
          case 152: break;
          case 62:
            { return symbol(HEAD, yytext());
            }
            // fall through
          case 153: break;
          case 63:
            { return symbol(LINK, yytext());
            }
            // fall through
          case 154: break;
          case 64:
            { return symbol(SPAM, yytext());
            }
            // fall through
          case 155: break;
          case 65:
            { return symbol(HEIGHT, yytext());
            }
            // fall through
          case 156: break;
          case 66:
            { return symbol(STR, yytext());
            }
            // fall through
          case 157: break;
          case 67:
            { return symbol(FONTF_VALUE, yytext());
            }
            // fall through
          case 158: break;
          case 68:
            { return symbol(GLOBAL, yytext());
            }
            // fall through
          case 159: break;
          case 69:
            { return symbol(INPUT, yytext());
            }
            // fall through
          case 160: break;
          case 70:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 161: break;
          case 71:
            { return symbol(ON_LOAD, yytext());
            }
            // fall through
          case 162: break;
          case 72:
            { return symbol(REVERSE, yytext());
            }
            // fall through
          case 163: break;
          case 73:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 164: break;
          case 74:
            { return symbol(DEC, yytext());
            }
            // fall through
          case 165: break;
          case 75:
            { return symbol(INT, yytext());
            }
            // fall through
          case 166: break;
          case 76:
            { return symbol(CLICK, yytext());
            }
            // fall through
          case 167: break;
          case 77:
            { return symbol(BUTTON, yytext());
            }
            // fall through
          case 168: break;
          case 78:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 169: break;
          case 79:
            { return symbol(SELECT, yytext());
            }
            // fall through
          case 170: break;
          case 80:
            { return symbol(FONTS, yytext());
            }
            // fall through
          case 171: break;
          case 81:
            { return symbol(ALERT, yytext());
            }
            // fall through
          case 172: break;
          case 82:
            { return symbol(TXTAREA, yytext());
            }
            // fall through
          case 173: break;
          case 83:
            { return symbol(LETPAR, yytext());
            }
            // fall through
          case 174: break;
          case 84:
            { return symbol(BCKGRND, yytext());
            }
            // fall through
          case 175: break;
          case 85:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 176: break;
          case 86:
            { return symbol(SCRIPT, yytext());
            }
            // fall through
          case 177: break;
          case 87:
            { return symbol(FONTF, yytext());
            }
            // fall through
          case 178: break;
          case 88:
            { return symbol(LETIMPAR, yytext());
            }
            // fall through
          case 179: break;
          case 89:
            { return symbol(URL, yytext());
            }
            // fall through
          case 180: break;
          case 90:
            { return symbol(RANDOM_N, yytext());
            }
            // fall through
          case 181: break;
          case 91:
            { return symbol(RANDOM_C, yytext());
            }
            // fall through
          case 182: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
