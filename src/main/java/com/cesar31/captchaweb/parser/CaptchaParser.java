
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.captchaweb.parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CaptchaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CaptchaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CaptchaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CaptchaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CaptchaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\002\070\006\000\002\002\004\000\002\106" +
    "\005\000\002\107\004\000\002\107\003\000\002\110\003" +
    "\000\002\110\003\000\002\111\005\000\002\112\004\000" +
    "\002\112\002\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\113\003" +
    "\000\002\113\003\000\002\113\003\000\002\115\005\000" +
    "\002\116\004\000\002\116\002\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\120\005\000\002\120\003\000\002\117\006" +
    "\000\002\117\004\000\002\124\005\000\002\124\003\000" +
    "\002\123\006\000\002\123\004\000\002\126\005\000\002" +
    "\126\003\000\002\125\006\000\002\125\004\000\002\130" +
    "\005\000\002\130\003\000\002\127\006\000\002\127\004" +
    "\000\002\122\005\000\002\122\003\000\002\121\006\000" +
    "\002\121\004\000\002\141\003\000\002\141\002\000\002" +
    "\131\005\000\002\131\005\000\002\131\003\000\002\132" +
    "\005\000\002\132\005\000\002\132\003\000\002\133\004" +
    "\000\002\133\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\005\000\002\137\005\000\002" +
    "\137\003\000\002\140\003\000\002\140\003\000\002\140" +
    "\003\000\002\140\003\000\002\140\003\000\002\143\005" +
    "\000\002\143\003\000\002\144\005\000\002\144\003\000" +
    "\002\145\004\000\002\145\003\000\002\146\003\000\002" +
    "\146\003\000\002\146\005\000\002\142\003\000\002\142" +
    "\003\000\002\147\005\000\002\147\005\000\002\147\005" +
    "\000\002\147\005\000\002\147\005\000\002\147\005\000" +
    "\002\071\005\000\002\072\004\000\002\073\005\000\002" +
    "\074\005\000\002\076\005\000\002\100\004\000\002\101" +
    "\004\000\002\075\005\000\002\104\005\000\002\103\004" +
    "\000\002\103\002\000\002\102\005\000\002\077\004\000" +
    "\002\105\005\000\002\135\004\000\002\135\002\000\002" +
    "\114\003\000\002\114\003\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\011\006\000\002" +
    "\011\006\000\002\030\006\000\002\030\006\000\002\030" +
    "\006\000\002\031\006\000\002\031\006\000\002\032\006" +
    "\000\002\032\006\000\002\033\006\000\002\033\006\000" +
    "\002\034\006\000\002\034\006\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\036" +
    "\006\000\002\036\006\000\002\037\006\000\002\037\006" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\041\006\000\002\041\006\000\002\042\006\000\002" +
    "\042\006\000\002\042\006\000\002\043\006\000\002\043" +
    "\006\000\002\044\005\000\002\044\005\000\002\006\004" +
    "\000\002\006\002\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\022\003\000\002\022\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\136\003\000\002\136\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\017\003\000\002" +
    "\017\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\005\000\002\047\005" +
    "\000\002\050\006\000\002\050\006\000\002\050\006\000" +
    "\002\050\006\000\002\050\006\000\002\051\006\000\002" +
    "\051\006\000\002\051\006\000\002\051\006\000\002\051" +
    "\006\000\002\052\006\000\002\052\006\000\002\052\006" +
    "\000\002\052\006\000\002\052\006\000\002\053\006\000" +
    "\002\053\006\000\002\053\006\000\002\053\006\000\002" +
    "\053\006\000\002\054\006\000\002\054\006\000\002\054" +
    "\006\000\002\054\006\000\002\054\006\000\002\055\006" +
    "\000\002\055\006\000\002\055\006\000\002\055\006\000" +
    "\002\055\006\000\002\056\006\000\002\056\006\000\002" +
    "\056\006\000\002\056\006\000\002\056\006\000\002\057" +
    "\006\000\002\057\006\000\002\057\006\000\002\057\006" +
    "\000\002\057\006\000\002\060\006\000\002\060\006\000" +
    "\002\060\006\000\002\060\006\000\002\060\006\000\002" +
    "\061\006\000\002\061\006\000\002\061\006\000\002\061" +
    "\006\000\002\061\006\000\002\062\006\000\002\062\006" +
    "\000\002\062\006\000\002\062\006\000\002\062\006\000" +
    "\002\063\006\000\002\063\006\000\002\063\006\000\002" +
    "\063\006\000\002\063\006\000\002\064\006\000\002\064" +
    "\006\000\002\064\006\000\002\064\006\000\002\064\006" +
    "\000\002\065\006\000\002\065\006\000\002\065\006\000" +
    "\002\065\006\000\002\065\006\000\002\066\006\000\002" +
    "\066\006\000\002\066\006\000\002\066\006\000\002\066" +
    "\006\000\002\067\006\000\002\067\006\000\002\067\006" +
    "\000\002\067\006\000\002\067\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u027e\000\006\003\004\101\005\001\002\000\004\004" +
    "\u027e\001\002\000\006\003\u0278\004\u0279\001\002\000\006" +
    "\003\011\101\014\001\002\000\004\002\010\001\002\000" +
    "\004\002\000\001\002\000\004\005\u0276\001\002\000\006" +
    "\003\323\101\324\001\002\000\006\003\023\101\026\001" +
    "\002\000\006\003\015\005\016\001\002\000\004\100\021" +
    "\001\002\000\006\003\020\100\017\001\002\000\006\003" +
    "\uff95\101\uff95\001\002\000\006\003\uff92\101\uff92\001\002" +
    "\000\006\003\uff93\101\uff93\001\002\000\006\003\ufffd\101" +
    "\ufffd\001\002\000\006\006\274\007\272\001\002\000\006" +
    "\003\ufffb\101\ufffb\001\002\000\006\003\302\101\303\001" +
    "\002\000\006\006\064\007\061\001\002\000\006\003\056" +
    "\101\060\001\002\000\012\003\uff9b\101\uff9b\142\uff9b\143" +
    "\uff9b\001\002\000\006\003\ufffc\101\ufffc\001\002\000\012" +
    "\003\034\101\035\142\033\143\037\001\002\000\012\003" +
    "\uff9a\101\uff9a\142\uff9a\143\uff9a\001\002\000\004\122\052" +
    "\001\002\000\006\003\041\122\042\001\002\000\006\003" +
    "\uffaa\101\uffaa\001\002\000\012\003\uff99\101\uff99\142\uff99" +
    "\143\uff99\001\002\000\012\003\uff9c\101\uff9c\142\uff9c\143" +
    "\uff9c\001\002\000\004\006\050\001\002\000\006\003\043" +
    "\006\044\001\002\000\004\100\047\001\002\000\006\003" +
    "\046\100\045\001\002\000\006\003\uff14\101\uff14\001\002" +
    "\000\006\003\uff10\101\uff10\001\002\000\006\003\uff11\101" +
    "\uff11\001\002\000\004\100\051\001\002\000\006\003\uff12" +
    "\101\uff12\001\002\000\004\006\053\001\002\000\004\100" +
    "\054\001\002\000\006\003\uff13\101\uff13\001\002\000\006" +
    "\003\ufffe\101\ufffe\001\002\000\010\006\274\007\272\122" +
    "\273\001\002\000\006\003\uffff\101\uffff\001\002\000\012" +
    "\003\062\006\064\007\061\122\063\001\002\000\010\003" +
    "\uff6c\100\uff6c\104\uff6c\001\002\000\004\005\074\001\002" +
    "\000\006\003\067\005\070\001\002\000\006\003\065\100" +
    "\066\001\002\000\012\003\uff8f\101\uff8f\142\uff8f\143\uff8f" +
    "\001\002\000\012\003\uff91\101\uff91\142\uff91\143\uff91\001" +
    "\002\000\004\100\073\001\002\000\006\003\071\100\072" +
    "\001\002\000\006\003\uff15\101\uff15\001\002\000\006\003" +
    "\uff19\101\uff19\001\002\000\006\003\uff16\101\uff16\001\002" +
    "\000\004\100\075\001\002\000\006\003\uff17\101\uff17\001" +
    "\002\000\010\003\100\100\077\104\101\001\002\000\006" +
    "\003\uff8e\101\uff8e\001\002\000\046\003\123\025\141\026" +
    "\134\027\130\030\144\031\104\032\145\034\114\035\121" +
    "\036\127\037\131\041\116\042\142\043\106\044\126\045" +
    "\137\046\136\130\110\001\002\000\046\003\123\025\141" +
    "\026\134\027\130\030\144\031\104\032\145\034\114\035" +
    "\121\036\127\037\131\041\116\042\142\043\106\044\126" +
    "\045\137\046\136\130\110\001\002\000\010\003\uff6d\100" +
    "\uff6d\104\uff6d\001\002\000\006\003\uff66\105\uff66\001\002" +
    "\000\006\003\263\126\264\001\002\000\006\003\256\126" +
    "\257\001\002\000\006\003\uff29\126\uff29\001\002\000\006" +
    "\003\251\126\252\001\002\000\006\003\uff32\126\uff32\001" +
    "\002\000\006\003\244\126\245\001\002\000\006\003\uff67" +
    "\105\uff67\001\002\000\006\003\uff5d\105\uff5d\001\002\000" +
    "\006\003\237\126\240\001\002\000\006\003\uff60\105\uff60" +
    "\001\002\000\006\003\232\126\233\001\002\000\006\003" +
    "\230\105\231\001\002\000\006\003\uff5f\105\uff5f\001\002" +
    "\000\006\003\223\126\224\001\002\000\006\003\uff64\105" +
    "\uff64\001\002\000\010\003\uff5b\105\uff5b\126\205\001\002" +
    "\000\006\003\200\126\201\001\002\000\006\003\uff5e\105" +
    "\uff5e\001\002\000\006\003\uff28\126\uff28\001\002\000\006" +
    "\003\173\126\174\001\002\000\006\003\uff47\126\uff47\001" +
    "\002\000\006\003\uff33\126\uff33\001\002\000\006\003\uff68" +
    "\105\uff68\001\002\000\006\003\uff5c\105\uff5c\001\002\000" +
    "\006\003\uff48\126\uff48\001\002\000\006\003\uff62\105\uff62" +
    "\001\002\000\006\003\166\126\167\001\002\000\006\003" +
    "\161\126\162\001\002\000\006\003\uff65\105\uff65\001\002" +
    "\000\006\003\uff4e\126\uff4e\001\002\000\006\003\uff4d\126" +
    "\uff4d\001\002\000\006\003\uff63\105\uff63\001\002\000\006" +
    "\003\154\126\155\001\002\000\006\003\147\126\150\001" +
    "\002\000\006\003\uff61\105\uff61\001\002\000\004\135\153" +
    "\001\002\000\006\003\151\135\152\001\002\000\006\003" +
    "\uff3c\105\uff3c\001\002\000\006\003\uff3f\105\uff3f\001\002" +
    "\000\006\003\uff3d\105\uff3d\001\002\000\004\073\160\001" +
    "\002\000\006\003\157\073\156\001\002\000\006\003\uff46" +
    "\105\uff46\001\002\000\006\003\uff44\105\uff44\001\002\000" +
    "\006\003\uff45\105\uff45\001\002\000\004\144\165\001\002" +
    "\000\006\003\164\144\163\001\002\000\006\003\uff25\105" +
    "\uff25\001\002\000\006\003\uff23\105\uff23\001\002\000\006" +
    "\003\uff24\105\uff24\001\002\000\004\141\172\001\002\000" +
    "\006\003\170\141\171\001\002\000\006\003\uff1f\105\uff1f" +
    "\001\002\000\006\003\uff22\105\uff22\001\002\000\006\003" +
    "\uff20\105\uff20\001\002\000\004\144\177\001\002\000\006" +
    "\003\176\144\175\001\002\000\006\003\uff56\105\uff56\001" +
    "\002\000\006\003\uff53\105\uff53\001\002\000\006\003\uff54" +
    "\105\uff54\001\002\000\004\071\204\001\002\000\006\003" +
    "\202\071\203\001\002\000\006\003\uff49\105\uff49\001\002" +
    "\000\006\003\uff4c\105\uff4c\001\002\000\006\003\uff4a\105" +
    "\uff4a\001\002\000\032\071\220\072\210\073\222\075\207" +
    "\123\215\127\217\131\211\134\221\135\206\136\216\141" +
    "\212\144\213\001\002\000\006\003\uff3e\105\uff3e\001\002" +
    "\000\006\003\uff59\105\uff59\001\002\000\006\003\uff36\105" +
    "\uff36\001\002\000\006\003\uff42\105\uff42\001\002\000\006" +
    "\003\uff21\105\uff21\001\002\000\006\003\uff55\105\uff55\001" +
    "\002\000\006\003\uff2c\105\uff2c\001\002\000\006\003\uff51" +
    "\105\uff51\001\002\000\006\003\uff30\105\uff30\001\002\000" +
    "\006\003\uff26\105\uff26\001\002\000\006\003\uff4b\105\uff4b" +
    "\001\002\000\006\003\uff3a\105\uff3a\001\002\000\006\003" +
    "\uff27\105\uff27\001\002\000\004\075\227\001\002\000\006" +
    "\003\226\075\225\001\002\000\006\003\uff5a\105\uff5a\001" +
    "\002\000\006\003\uff57\105\uff57\001\002\000\006\003\uff58" +
    "\105\uff58\001\002\000\010\003\uff69\100\uff69\104\uff69\001" +
    "\002\000\010\003\uff6b\100\uff6b\104\uff6b\001\002\000\004" +
    "\136\236\001\002\000\006\003\234\136\235\001\002\000" +
    "\006\003\uff2e\105\uff2e\001\002\000\006\003\uff31\105\uff31" +
    "\001\002\000\006\003\uff2f\105\uff2f\001\002\000\004\134" +
    "\243\001\002\000\006\003\241\134\242\001\002\000\006" +
    "\003\uff38\105\uff38\001\002\000\006\003\uff3b\105\uff3b\001" +
    "\002\000\006\003\uff39\105\uff39\001\002\000\004\072\250" +
    "\001\002\000\006\003\246\072\247\001\002\000\006\003" +
    "\uff34\105\uff34\001\002\000\006\003\uff37\105\uff37\001\002" +
    "\000\006\003\uff35\105\uff35\001\002\000\006\073\222\127" +
    "\217\001\002\000\010\003\254\073\222\127\217\001\002" +
    "\000\006\003\uff2d\105\uff2d\001\002\000\006\003\uff2a\105" +
    "\uff2a\001\002\000\006\003\uff2b\105\uff2b\001\002\000\004" +
    "\123\262\001\002\000\006\003\261\123\260\001\002\000" +
    "\006\003\uff52\105\uff52\001\002\000\006\003\uff4f\105\uff4f" +
    "\001\002\000\006\003\uff50\105\uff50\001\002\000\004\131" +
    "\267\001\002\000\006\003\265\131\266\001\002\000\006" +
    "\003\uff40\105\uff40\001\002\000\006\003\uff43\105\uff43\001" +
    "\002\000\006\003\uff41\105\uff41\001\002\000\004\105\271" +
    "\001\002\000\010\003\uff6a\100\uff6a\104\uff6a\001\002\000" +
    "\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\004\005\276" +
    "\001\002\000\004\100\275\001\002\000\012\003\uff90\101" +
    "\uff90\142\uff90\143\uff90\001\002\000\004\100\277\001\002" +
    "\000\006\003\uff18\101\uff18\001\002\000\010\003\100\100" +
    "\301\104\101\001\002\000\006\003\uff8d\101\uff8d\001\002" +
    "\000\004\122\316\001\002\000\006\003\305\122\306\001" +
    "\002\000\006\003\uffa9\101\uffa9\001\002\000\004\007\314" +
    "\001\002\000\006\003\310\007\307\001\002\000\006\003" +
    "\313\100\312\001\002\000\004\100\311\001\002\000\006" +
    "\003\uff0c\101\uff0c\001\002\000\006\003\uff0f\101\uff0f\001" +
    "\002\000\006\003\uff0b\101\uff0b\001\002\000\004\100\315" +
    "\001\002\000\006\003\uff0d\101\uff0d\001\002\000\004\007" +
    "\317\001\002\000\004\100\320\001\002\000\006\003\uff0e" +
    "\101\uff0e\001\002\000\006\003\u0268\101\u0269\001\002\000" +
    "\006\003\ufff8\101\ufff8\001\002\000\004\010\333\001\002" +
    "\000\006\003\325\010\326\001\002\000\010\003\uff6c\100" +
    "\uff6c\104\uff6c\001\002\000\010\003\uff6c\100\uff6c\104\uff6c" +
    "\001\002\000\010\003\100\100\330\104\101\001\002\000" +
    "\006\003\uff8c\101\uff8c\001\002\000\010\003\100\100\332" +
    "\104\101\001\002\000\006\003\uff8a\101\uff8a\001\002\000" +
    "\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\010\003\100" +
    "\100\335\104\101\001\002\000\006\003\uff8b\101\uff8b\001" +
    "\002\000\006\003\356\101\340\001\002\000\012\003\uff9b" +
    "\101\uff9b\142\uff9b\143\uff9b\001\002\000\034\003\u024f\011" +
    "\u020d\012\u0208\013\u0205\014\u020c\016\u0209\017\u0210\020\u0207" +
    "\021\u0206\022\u020e\023\u020f\024\u020b\122\u024e\001\002\000" +
    "\006\003\ufff4\101\ufff4\001\002\000\006\003\ufffa\101\ufffa" +
    "\001\002\000\006\003\ufff1\101\ufff1\001\002\000\012\003" +
    "\uff9b\101\uff9b\142\uff9b\143\uff9b\001\002\000\006\003\ufff0" +
    "\101\ufff0\001\002\000\006\003\ufff2\101\ufff2\001\002\000" +
    "\006\003\ufff5\101\ufff5\001\002\000\006\003\u0230\101\u0231" +
    "\001\002\000\006\003\ufff8\101\ufff8\001\002\000\006\003" +
    "\uffa0\101\uffa0\001\002\000\006\003\ufff7\101\ufff7\001\002" +
    "\000\006\003\ufff9\101\ufff9\001\002\000\006\003\u01c7\101" +
    "\u01c8\001\002\000\032\011\u01ac\012\u01a8\013\u01a5\014\u01ab" +
    "\016\u01a9\017\u01ae\020\u01a7\021\u01a6\022\u01ad\023\u01af\024" +
    "\u01aa\122\u01a4\001\002\000\006\003\ufff3\101\ufff3\001\002" +
    "\000\006\003\uffed\101\uffed\001\002\000\006\003\uffef\101" +
    "\uffef\001\002\000\012\003\uff9b\101\uff9b\142\uff9b\143\uff9b" +
    "\001\002\000\006\003\ufff6\101\ufff6\001\002\000\012\003" +
    "\uff9b\101\uff9b\142\uff9b\143\uff9b\001\002\000\006\003\uffee" +
    "\101\uffee\001\002\000\020\003\uffea\051\uffea\054\uffea\055" +
    "\uffea\076\uffea\077\uffea\101\uffea\001\002\000\006\003\370" +
    "\101\371\001\002\000\004\122\u0104\001\002\000\006\003" +
    "\373\122\374\001\002\000\006\003\uff9e\101\uff9e\001\002" +
    "\000\004\017\u0102\001\002\000\006\003\375\017\376\001" +
    "\002\000\004\100\u0101\001\002\000\006\003\377\100\u0100" +
    "\001\002\000\006\003\ufee3\101\ufee3\001\002\000\006\003" +
    "\ufee7\101\ufee7\001\002\000\006\003\ufee4\101\ufee4\001\002" +
    "\000\004\100\u0103\001\002\000\006\003\ufee5\101\ufee5\001" +
    "\002\000\004\017\u0105\001\002\000\004\100\u0106\001\002" +
    "\000\006\003\ufee6\101\ufee6\001\002\000\020\003\u010e\051" +
    "\u010a\054\u0110\055\u010c\076\u0108\077\u010f\101\u0109\001\002" +
    "\000\006\067\u0112\143\uffcf\001\002\000\006\003\u0172\122" +
    "\u0173\001\002\000\006\067\u0112\143\uffcf\001\002\000\020" +
    "\003\uffeb\051\uffeb\054\uffeb\055\uffeb\076\uffeb\077\uffeb\101" +
    "\uffeb\001\002\000\006\067\u0112\143\uffcf\001\002\000\006" +
    "\003\uffec\101\uffec\001\002\000\004\122\u0137\001\002\000" +
    "\006\067\u0112\143\uffcf\001\002\000\006\067\u0112\143\uffcf" +
    "\001\002\000\006\107\uffd7\137\uffd7\001\002\000\004\143" +
    "\uffd0\001\002\000\006\107\u0119\137\u0118\001\002\000\004" +
    "\143\u0115\001\002\000\010\107\uffd5\126\u0116\137\uffd5\001" +
    "\002\000\004\145\u0117\001\002\000\006\107\uffd6\137\uffd6" +
    "\001\002\000\006\067\u0112\143\uffcf\001\002\000\020\003" +
    "\uffe5\051\uffe5\054\uffe5\055\uffe5\076\uffe5\077\uffe5\101\uffe5" +
    "\001\002\000\006\107\uffd8\137\uffd8\001\002\000\006\107" +
    "\uffdf\137\uffdf\001\002\000\006\107\u0135\137\u0134\001\002" +
    "\000\004\143\u011e\001\002\000\010\107\uffdd\126\u011f\137" +
    "\uffdd\001\002\000\014\047\u0122\050\u0121\120\u0120\124\u0124" +
    "\145\u0127\001\002\000\014\047\u0122\050\u0121\120\u0120\124" +
    "\u0124\145\u0127\001\002\000\040\100\uffc5\101\uffc5\107\uffc5" +
    "\110\uffc5\111\uffc5\112\uffc5\113\uffc5\114\uffc5\115\uffc5\117" +
    "\uffc5\120\uffc5\121\uffc5\122\uffc5\125\uffc5\137\uffc5\001\002" +
    "\000\040\100\uffc6\101\uffc6\107\uffc6\110\uffc6\111\uffc6\112" +
    "\uffc6\113\uffc6\114\uffc6\115\uffc6\117\uffc6\120\uffc6\121\uffc6" +
    "\122\uffc6\125\uffc6\137\uffc6\001\002\000\040\100\uffc7\101" +
    "\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\114\uffc7" +
    "\115\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7\125\uffc7\137" +
    "\uffc7\001\002\000\014\047\u0122\050\u0121\120\u0120\124\u0124" +
    "\145\u0127\001\002\000\040\100\uffc9\101\uffc9\107\uffc9\110" +
    "\uffc9\111\uffc9\112\uffc9\113\uffc9\114\uffc9\115\uffc9\117\uffc9" +
    "\120\uffc9\121\uffc9\122\uffc9\125\uffc9\137\uffc9\001\002\000" +
    "\040\100\uffcc\101\uffcc\107\uffcc\110\uffcc\111\uffcc\112\uffcc" +
    "\113\uffcc\114\uffcc\115\uffcc\117\uffcc\120\uffcc\121\u012d\122" +
    "\u012c\125\uffcc\137\uffcc\001\002\000\040\100\uffc4\101\uffc4" +
    "\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\114\uffc4\115" +
    "\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4\125\uffc4\137\uffc4" +
    "\001\002\000\012\107\uffde\117\u0129\120\u012a\137\uffde\001" +
    "\002\000\014\047\u0122\050\u0121\120\u0120\124\u0124\145\u0127" +
    "\001\002\000\014\047\u0122\050\u0121\120\u0120\124\u0124\145" +
    "\u0127\001\002\000\040\100\uffcd\101\uffcd\107\uffcd\110\uffcd" +
    "\111\uffcd\112\uffcd\113\uffcd\114\uffcd\115\uffcd\117\uffcd\120" +
    "\uffcd\121\u012d\122\u012c\125\uffcd\137\uffcd\001\002\000\014" +
    "\047\u0122\050\u0121\120\u0120\124\u0124\145\u0127\001\002\000" +
    "\014\047\u0122\050\u0121\120\u0120\124\u0124\145\u0127\001\002" +
    "\000\040\100\uffcb\101\uffcb\107\uffcb\110\uffcb\111\uffcb\112" +
    "\uffcb\113\uffcb\114\uffcb\115\uffcb\117\uffcb\120\uffcb\121\uffcb" +
    "\122\uffcb\125\uffcb\137\uffcb\001\002\000\040\100\uffca\101" +
    "\uffca\107\uffca\110\uffca\111\uffca\112\uffca\113\uffca\114\uffca" +
    "\115\uffca\117\uffca\120\uffca\121\uffca\122\uffca\125\uffca\137" +
    "\uffca\001\002\000\040\100\uffce\101\uffce\107\uffce\110\uffce" +
    "\111\uffce\112\uffce\113\uffce\114\uffce\115\uffce\117\uffce\120" +
    "\uffce\121\u012d\122\u012c\125\uffce\137\uffce\001\002\000\010" +
    "\117\u0129\120\u012a\125\u0132\001\002\000\040\100\uffc3\101" +
    "\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\114\uffc3" +
    "\115\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3\125\uffc3\137" +
    "\uffc3\001\002\000\040\100\uffc8\101\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\113\uffc8\114\uffc8\115\uffc8\117\uffc8\120" +
    "\uffc8\121\uffc8\122\uffc8\125\uffc8\137\uffc8\001\002\000\006" +
    "\067\u0112\143\uffcf\001\002\000\020\003\uffe7\051\uffe7\054" +
    "\uffe7\055\uffe7\076\uffe7\077\uffe7\101\uffe7\001\002\000\006" +
    "\107\uffe0\137\uffe0\001\002\000\004\024\u0138\001\002\000" +
    "\004\100\u0139\001\002\000\006\003\ufed2\101\ufed2\001\002" +
    "\000\006\107\u0149\137\u0148\001\002\000\004\143\u013d\001" +
    "\002\000\006\107\uffd3\137\uffd3\001\002\000\010\107\uffd1" +
    "\126\u013e\137\uffd1\001\002\000\014\047\u0140\050\u0145\075" +
    "\u0141\144\u0143\145\u0144\001\002\000\010\107\uffc1\117\uffc1" +
    "\137\uffc1\001\002\000\010\107\uffbe\117\uffbe\137\uffbe\001" +
    "\002\000\010\107\uffbf\117\uffbf\137\uffbf\001\002\000\010" +
    "\107\uffd2\117\u0146\137\uffd2\001\002\000\010\107\uffc0\117" +
    "\uffc0\137\uffc0\001\002\000\010\107\uffbc\117\uffbc\137\uffbc" +
    "\001\002\000\010\107\uffbd\117\uffbd\137\uffbd\001\002\000" +
    "\014\047\u0140\050\u0145\075\u0141\144\u0143\145\u0144\001\002" +
    "\000\010\107\uffc2\117\uffc2\137\uffc2\001\002\000\006\067" +
    "\u0112\143\uffcf\001\002\000\020\003\uffe8\051\uffe8\054\uffe8" +
    "\055\uffe8\076\uffe8\077\uffe8\101\uffe8\001\002\000\006\107" +
    "\uffd4\137\uffd4\001\002\000\006\107\uffdb\137\uffdb\001\002" +
    "\000\006\107\u0170\137\u016f\001\002\000\004\143\u014e\001" +
    "\002\000\010\107\uffd9\126\u014f\137\uffd9\001\002\000\022" +
    "\047\u0122\050\u0121\052\u0151\053\u0155\116\u0150\120\u0120\124" +
    "\u0152\145\u0127\001\002\000\020\047\u0122\050\u0121\052\u0151" +
    "\053\u0155\120\u0120\124\u0152\145\u0127\001\002\000\014\107" +
    "\uffb2\114\uffb2\115\uffb2\125\uffb2\137\uffb2\001\002\000\022" +
    "\047\u0122\050\u0121\052\u0151\053\u0155\116\u0150\120\u0120\124" +
    "\u0152\145\u0127\001\002\000\014\107\uffb5\114\uffb5\115\uffb5" +
    "\125\uffb5\137\uffb5\001\002\000\022\100\u015f\101\u0161\110" +
    "\u0164\111\u0163\112\u0162\113\u0160\117\u0129\120\u012a\001\002" +
    "\000\014\107\uffb1\114\uffb1\115\uffb1\125\uffb1\137\uffb1\001" +
    "\002\000\014\107\uffb6\114\uffb6\115\uffb6\125\uffb6\137\uffb6" +
    "\001\002\000\014\107\uffb4\114\uffb4\115\uffb4\125\uffb4\137" +
    "\uffb4\001\002\000\014\107\uffb8\114\uffb8\115\uffb8\125\uffb8" +
    "\137\uffb8\001\002\000\014\107\uffba\114\uffba\115\u015d\125" +
    "\uffba\137\uffba\001\002\000\010\107\uffda\114\u015b\137\uffda" +
    "\001\002\000\022\047\u0122\050\u0121\052\u0151\053\u0155\116" +
    "\u0150\120\u0120\124\u0152\145\u0127\001\002\000\014\107\uffbb" +
    "\114\uffbb\115\u015d\125\uffbb\137\uffbb\001\002\000\022\047" +
    "\u0122\050\u0121\052\u0151\053\u0155\116\u0150\120\u0120\124\u0152" +
    "\145\u0127\001\002\000\014\107\uffb9\114\uffb9\115\uffb9\125" +
    "\uffb9\137\uffb9\001\002\000\014\047\u0122\050\u0121\120\u0120" +
    "\124\u0124\145\u0127\001\002\000\014\047\u0122\050\u0121\120" +
    "\u0120\124\u0124\145\u0127\001\002\000\014\047\u0122\050\u0121" +
    "\120\u0120\124\u0124\145\u0127\001\002\000\014\047\u0122\050" +
    "\u0121\120\u0120\124\u0124\145\u0127\001\002\000\014\047\u0122" +
    "\050\u0121\120\u0120\124\u0124\145\u0127\001\002\000\014\047" +
    "\u0122\050\u0121\120\u0120\124\u0124\145\u0127\001\002\000\020" +
    "\107\uffac\114\uffac\115\uffac\117\u0129\120\u012a\125\uffac\137" +
    "\uffac\001\002\000\020\107\uffab\114\uffab\115\uffab\117\u0129" +
    "\120\u012a\125\uffab\137\uffab\001\002\000\020\107\uffae\114" +
    "\uffae\115\uffae\117\u0129\120\u012a\125\uffae\137\uffae\001\002" +
    "\000\020\107\uffb0\114\uffb0\115\uffb0\117\u0129\120\u012a\125" +
    "\uffb0\137\uffb0\001\002\000\020\107\uffad\114\uffad\115\uffad" +
    "\117\u0129\120\u012a\125\uffad\137\uffad\001\002\000\020\107" +
    "\uffaf\114\uffaf\115\uffaf\117\u0129\120\u012a\125\uffaf\137\uffaf" +
    "\001\002\000\024\100\u015f\101\u0161\110\u0164\111\u0163\112" +
    "\u0162\113\u0160\117\u0129\120\u012a\125\u0132\001\002\000\006" +
    "\114\u015b\125\u016d\001\002\000\014\107\uffb3\114\uffb3\115" +
    "\uffb3\125\uffb3\137\uffb3\001\002\000\014\107\uffb7\114\uffb7" +
    "\115\uffb7\125\uffb7\137\uffb7\001\002\000\006\067\u0112\143" +
    "\uffcf\001\002\000\020\003\uffe6\051\uffe6\054\uffe6\055\uffe6" +
    "\076\uffe6\077\uffe6\101\uffe6\001\002\000\006\107\uffdc\137" +
    "\uffdc\001\002\000\004\024\u0179\001\002\000\006\003\u0175" +
    "\024\u0174\001\002\000\006\003\u0178\100\u0177\001\002\000" +
    "\004\100\u0176\001\002\000\006\003\ufed0\101\ufed0\001\002" +
    "\000\006\003\ufed3\101\ufed3\001\002\000\006\003\ufecf\101" +
    "\ufecf\001\002\000\004\100\u017a\001\002\000\006\003\ufed1" +
    "\101\ufed1\001\002\000\006\107\u0182\137\u0181\001\002\000" +
    "\006\107\uffe3\137\uffe3\001\002\000\004\143\u017e\001\002" +
    "\000\010\107\uffe1\126\u017f\137\uffe1\001\002\000\014\047" +
    "\u0122\050\u0121\120\u0120\124\u0124\145\u0127\001\002\000\012" +
    "\107\uffe2\117\u0129\120\u012a\137\uffe2\001\002\000\006\067" +
    "\u0112\143\uffcf\001\002\000\020\003\uffe9\051\uffe9\054\uffe9" +
    "\055\uffe9\076\uffe9\077\uffe9\101\uffe9\001\002\000\006\107" +
    "\uffe4\137\uffe4\001\002\000\012\003\u0186\101\u0187\142\033" +
    "\143\037\001\002\000\006\003\uffa6\101\uffa6\001\002\000" +
    "\004\122\u0191\001\002\000\006\003\u0188\122\u0189\001\002" +
    "\000\004\023\u018f\001\002\000\006\003\u018a\023\u018b\001" +
    "\002\000\004\100\u018e\001\002\000\006\003\u018d\100\u018c" +
    "\001\002\000\006\003\ufed8\101\ufed8\001\002\000\006\003" +
    "\ufed4\101\ufed4\001\002\000\006\003\ufed5\101\ufed5\001\002" +
    "\000\004\100\u0190\001\002\000\006\003\ufed6\101\ufed6\001" +
    "\002\000\004\023\u0192\001\002\000\004\100\u0193\001\002" +
    "\000\006\003\ufed7\101\ufed7\001\002\000\012\003\u0195\101" +
    "\u0196\142\033\143\037\001\002\000\004\122\u01a1\001\002" +
    "\000\006\003\u0198\122\u0199\001\002\000\006\003\uffa8\101" +
    "\uffa8\001\002\000\004\011\u019f\001\002\000\006\003\u019b" +
    "\011\u019a\001\002\000\006\003\u019d\100\u019e\001\002\000" +
    "\004\100\u019c\001\002\000\006\003\uff02\101\uff02\001\002" +
    "\000\006\003\uff01\101\uff01\001\002\000\006\003\uff05\101" +
    "\uff05\001\002\000\004\100\u01a0\001\002\000\006\003\uff03" +
    "\101\uff03\001\002\000\004\011\u01a2\001\002\000\004\100" +
    "\u01a3\001\002\000\006\003\uff04\101\uff04\001\002\000\004" +
    "\010\u01c4\001\002\000\010\003\uff6c\100\uff6c\104\uff6c\001" +
    "\002\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\004" +
    "\100\u01bf\001\002\000\010\003\uff6c\100\uff6c\104\uff6c\001" +
    "\002\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\004" +
    "\100\u01ba\001\002\000\010\003\uff6c\100\uff6c\104\uff6c\001" +
    "\002\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\010" +
    "\003\uff6c\100\uff6c\104\uff6c\001\002\000\010\003\uff6c\100" +
    "\uff6c\104\uff6c\001\002\000\010\003\uff6c\100\uff6c\104\uff6c" +
    "\001\002\000\010\003\100\100\u01b1\104\101\001\002\000" +
    "\012\003\uff70\101\uff70\142\uff70\143\uff70\001\002\000\010" +
    "\003\100\100\u01b3\104\101\001\002\000\006\003\uff7a\101" +
    "\uff7a\001\002\000\010\003\100\100\u01b5\104\101\001\002" +
    "\000\012\003\uff73\101\uff73\142\uff73\143\uff73\001\002\000" +
    "\010\003\100\100\u01b7\104\101\001\002\000\012\003\uff88" +
    "\101\uff88\142\uff88\143\uff88\001\002\000\010\003\100\100" +
    "\u01b9\104\101\001\002\000\006\003\uff82\101\uff82\001\002" +
    "\000\020\003\uff6e\051\uff6e\054\uff6e\055\uff6e\076\uff6e\077" +
    "\uff6e\101\uff6e\001\002\000\010\003\100\100\u01bc\104\101" +
    "\001\002\000\006\003\uff7c\101\uff7c\001\002\000\010\003" +
    "\100\100\u01be\104\101\001\002\000\006\003\uff86\101\uff86" +
    "\001\002\000\006\003\uff78\101\uff78\001\002\000\010\003" +
    "\100\100\u01c1\104\101\001\002\000\012\003\uff75\101\uff75" +
    "\142\uff75\143\uff75\001\002\000\010\003\100\100\u01c3\104" +
    "\101\001\002\000\006\003\uff84\101\uff84\001\002\000\004" +
    "\100\u01c5\001\002\000\006\003\uff09\101\uff09\001\002\000" +
    "\006\003\uffa4\101\uffa4\001\002\000\004\122\u01d2\001\002" +
    "\000\006\003\u01c9\122\u01ca\001\002\000\004\013\u01d0\001" +
    "\002\000\006\003\u01cb\013\u01cc\001\002\000\004\100\u01cf" +
    "\001\002\000\006\003\u01cd\100\u01ce\001\002\000\006\003" +
    "\ufef7\101\ufef7\001\002\000\006\003\ufefb\101\ufefb\001\002" +
    "\000\006\003\ufef8\101\ufef8\001\002\000\004\100\u01d1\001" +
    "\002\000\006\003\ufef9\101\ufef9\001\002\000\004\013\u01d3" +
    "\001\002\000\004\100\u01d4\001\002\000\006\003\ufefa\101" +
    "\ufefa\001\002\000\006\003\u01d6\101\u01da\001\002\000\006" +
    "\015\u01f8\122\u01f9\001\002\000\006\003\uffa2\101\uffa2\001" +
    "\002\000\012\003\uff9b\101\uff9b\142\uff9b\143\uff9b\001\002" +
    "\000\006\003\uffa1\101\uffa1\001\002\000\010\003\u01db\015" +
    "\u01dc\122\u01dd\001\002\000\006\014\u01e6\100\u01e5\001\002" +
    "\000\006\003\u01e4\100\u01e3\001\002\000\006\003\u01de\014" +
    "\u01df\001\002\000\004\100\u01e2\001\002\000\006\003\u01e1" +
    "\100\u01e0\001\002\000\006\003\ufef6\101\ufef6\001\002\000" +
    "\006\003\ufef2\101\ufef2\001\002\000\006\003\ufef3\101\ufef3" +
    "\001\002\000\012\003\uff81\101\uff81\142\uff81\143\uff81\001" +
    "\002\000\012\003\uff7e\101\uff7e\142\uff7e\143\uff7e\001\002" +
    "\000\012\003\uff7f\101\uff7f\142\uff7f\143\uff7f\001\002\000" +
    "\004\100\u01e7\001\002\000\006\003\ufef4\101\ufef4\001\002" +
    "\000\012\003\u01e9\101\u01ea\142\033\143\037\001\002\000" +
    "\004\122\u01f5\001\002\000\006\003\u01ec\122\u01ed\001\002" +
    "\000\006\003\uff9f\101\uff9f\001\002\000\004\015\u01f3\001" +
    "\002\000\006\003\u01ee\015\u01ef\001\002\000\004\100\u01f2" +
    "\001\002\000\006\003\u01f1\100\u01f0\001\002\000\006\003" +
    "\ufef1\101\ufef1\001\002\000\006\003\ufeed\101\ufeed\001\002" +
    "\000\006\003\ufeee\101\ufeee\001\002\000\004\100\u01f4\001" +
    "\002\000\006\003\ufeef\101\ufeef\001\002\000\004\015\u01f6" +
    "\001\002\000\004\100\u01f7\001\002\000\006\003\ufef0\101" +
    "\ufef0\001\002\000\004\100\u01fc\001\002\000\004\014\u01fa" +
    "\001\002\000\004\100\u01fb\001\002\000\006\003\ufef5\101" +
    "\ufef5\001\002\000\012\003\uff80\101\uff80\142\uff80\143\uff80" +
    "\001\002\000\006\003\u01ff\101\u01fe\001\002\000\034\003" +
    "\u020a\011\u020d\012\u0208\013\u0205\014\u020c\016\u0209\017\u0210" +
    "\020\u0207\021\u0206\022\u020e\023\u020f\024\u020b\122\u0204\001" +
    "\002\000\032\011\u01ac\012\u01a8\013\u01a5\014\u01ab\016\u01a9" +
    "\017\u01ae\020\u01a7\021\u01a6\022\u01ad\023\u01af\024\u01aa\122" +
    "\u0201\001\002\000\006\003\uff9d\101\uff9d\001\002\000\004" +
    "\016\u0202\001\002\000\004\100\u0203\001\002\000\006\003" +
    "\ufeeb\101\ufeeb\001\002\000\006\003\u022a\016\u022b\001\002" +
    "\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\010\003" +
    "\uff6c\100\uff6c\104\uff6c\001\002\000\006\003\u0224\100\u0225" +
    "\001\002\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000" +
    "\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\012\003\uff6c" +
    "\016\u021c\100\uff6c\104\uff6c\001\002\000\004\100\u021b\001" +
    "\002\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\010" +
    "\003\uff6c\100\uff6c\104\uff6c\001\002\000\010\003\uff6c\100" +
    "\uff6c\104\uff6c\001\002\000\010\003\uff6c\100\uff6c\104\uff6c" +
    "\001\002\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000" +
    "\010\003\100\100\u0212\104\101\001\002\000\006\003\uff7b" +
    "\101\uff7b\001\002\000\010\003\100\100\u0214\104\101\001" +
    "\002\000\012\003\uff71\101\uff71\142\uff71\143\uff71\001\002" +
    "\000\010\003\100\100\u0216\104\101\001\002\000\012\003" +
    "\uff74\101\uff74\142\uff74\143\uff74\001\002\000\010\003\100" +
    "\100\u0218\104\101\001\002\000\012\003\uff89\101\uff89\142" +
    "\uff89\143\uff89\001\002\000\010\003\100\100\u021a\104\101" +
    "\001\002\000\006\003\uff83\101\uff83\001\002\000\020\003" +
    "\uff6f\051\uff6f\054\uff6f\055\uff6f\076\uff6f\077\uff6f\101\uff6f" +
    "\001\002\000\004\100\u021f\001\002\000\010\003\100\100" +
    "\u021e\104\101\001\002\000\012\003\uff72\101\uff72\142\uff72" +
    "\143\uff72\001\002\000\006\003\ufeea\101\ufeea\001\002\000" +
    "\010\003\100\100\u0221\104\101\001\002\000\006\003\uff7d" +
    "\101\uff7d\001\002\000\010\003\100\100\u0223\104\101\001" +
    "\002\000\006\003\uff87\101\uff87\001\002\000\006\003\uff77" +
    "\101\uff77\001\002\000\006\003\uff79\101\uff79\001\002\000" +
    "\010\003\100\100\u0227\104\101\001\002\000\012\003\uff76" +
    "\101\uff76\142\uff76\143\uff76\001\002\000\010\003\100\100" +
    "\u0229\104\101\001\002\000\006\003\uff85\101\uff85\001\002" +
    "\000\004\100\u022e\001\002\000\006\003\u022d\100\u022c\001" +
    "\002\000\006\003\ufeec\101\ufeec\001\002\000\006\003\ufee8" +
    "\101\ufee8\001\002\000\006\003\ufee9\101\ufee9\001\002\000" +
    "\006\003\uffa5\101\uffa5\001\002\000\004\122\u023b\001\002" +
    "\000\006\003\u0232\122\u0233\001\002\000\004\012\u0239\001" +
    "\002\000\006\003\u0235\012\u0234\001\002\000\006\003\u0237" +
    "\100\u0238\001\002\000\004\100\u0236\001\002\000\006\003" +
    "\ufefd\101\ufefd\001\002\000\006\003\ufefc\101\ufefc\001\002" +
    "\000\006\003\uff00\101\uff00\001\002\000\004\100\u023a\001" +
    "\002\000\006\003\ufefe\101\ufefe\001\002\000\004\012\u023c" +
    "\001\002\000\004\100\u023d\001\002\000\006\003\ufeff\101" +
    "\ufeff\001\002\000\012\003\u0240\101\u0241\142\033\143\037" +
    "\001\002\000\006\003\uffa7\101\uffa7\001\002\000\004\122" +
    "\u024b\001\002\000\006\003\u0242\122\u0243\001\002\000\004" +
    "\022\u0249\001\002\000\006\003\u0244\022\u0245\001\002\000" +
    "\004\100\u0248\001\002\000\006\003\u0247\100\u0246\001\002" +
    "\000\006\003\ufedd\101\ufedd\001\002\000\006\003\ufed9\101" +
    "\ufed9\001\002\000\006\003\ufeda\101\ufeda\001\002\000\004" +
    "\100\u024a\001\002\000\006\003\ufedb\101\ufedb\001\002\000" +
    "\004\022\u024c\001\002\000\004\100\u024d\001\002\000\006" +
    "\003\ufedc\101\ufedc\001\002\000\006\003\u0252\010\u0253\001" +
    "\002\000\012\003\uff6c\010\u0250\100\uff6c\104\uff6c\001\002" +
    "\000\004\100\u0251\001\002\000\006\003\uff08\101\uff08\001" +
    "\002\000\004\100\u0256\001\002\000\006\003\u0255\100\u0254" +
    "\001\002\000\006\003\uff0a\101\uff0a\001\002\000\006\003" +
    "\uff06\101\uff06\001\002\000\006\003\uff07\101\uff07\001\002" +
    "\000\012\003\u0258\101\u0259\142\033\143\037\001\002\000" +
    "\004\122\u0264\001\002\000\006\003\u025b\122\u025c\001\002" +
    "\000\006\003\uffa3\101\uffa3\001\002\000\004\021\u0262\001" +
    "\002\000\006\003\u025e\021\u025d\001\002\000\006\003\u0260" +
    "\100\u0261\001\002\000\004\100\u025f\001\002\000\006\003" +
    "\ufedf\101\ufedf\001\002\000\006\003\ufede\101\ufede\001\002" +
    "\000\006\003\ufee2\101\ufee2\001\002\000\004\100\u0263\001" +
    "\002\000\006\003\ufee0\101\ufee0\001\002\000\004\021\u0265" +
    "\001\002\000\004\100\u0266\001\002\000\006\003\ufee1\101" +
    "\ufee1\001\002\000\004\002\001\001\002\000\004\122\u0273" +
    "\001\002\000\006\003\u026a\122\u026b\001\002\000\004\004" +
    "\u0271\001\002\000\006\003\u026c\004\u026d\001\002\000\004" +
    "\100\u0270\001\002\000\006\003\u026e\100\u026f\001\002\000" +
    "\004\002\uff1a\001\002\000\004\002\uff1e\001\002\000\004" +
    "\002\uff1b\001\002\000\004\100\u0272\001\002\000\004\002" +
    "\uff1c\001\002\000\004\004\u0274\001\002\000\004\100\u0275" +
    "\001\002\000\004\002\uff1d\001\002\000\004\100\u0277\001" +
    "\002\000\006\003\uff94\101\uff94\001\002\000\010\003\uff6c" +
    "\100\uff6c\104\uff6c\001\002\000\010\003\uff6c\100\uff6c\104" +
    "\uff6c\001\002\000\010\003\100\100\u027b\104\101\001\002" +
    "\000\006\003\uff98\101\uff98\001\002\000\010\003\100\100" +
    "\u027d\104\101\001\002\000\006\003\uff96\101\uff96\001\002" +
    "\000\010\003\uff6c\100\uff6c\104\uff6c\001\002\000\010\003" +
    "\100\100\u0280\104\101\001\002\000\006\003\uff97\101\uff97" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u027e\000\006\005\005\070\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\012\106\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\321\111\320\001\001\000\016\010\027\011\024" +
    "\071\030\072\023\107\026\110\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\303\001\001" +
    "\000\002\001\001\000\016\010\027\011\024\051\056\071" +
    "\030\072\023\110\054\001\001\000\004\135\031\001\001" +
    "\000\002\001\001\000\006\052\035\114\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\101\001\001\000\002\001\001\000\046\002\131\003" +
    "\111\004\267\012\137\013\121\014\142\015\134\016\145" +
    "\017\110\020\114\021\117\022\104\023\102\024\124\025" +
    "\106\027\112\047\132\136\123\001\001\000\046\002\131" +
    "\003\111\004\116\012\137\013\121\014\142\015\134\016" +
    "\145\017\110\020\114\021\117\022\104\023\102\024\124" +
    "\025\106\027\112\047\132\136\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\254\001" +
    "\001\000\004\026\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u0266\001\001" +
    "\000\004\112\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\330\001\001\000\004\006\326\001\001" +
    "\000\004\046\101\001\001\000\002\001\001\000\004\046" +
    "\101\001\001\000\002\001\001\000\004\006\333\001\001" +
    "\000\004\046\101\001\001\000\002\001\001\000\060\031" +
    "\361\032\347\033\354\034\351\036\350\037\366\040\364" +
    "\041\336\042\343\043\363\044\365\054\341\073\346\074" +
    "\352\075\344\076\362\077\342\100\340\101\356\104\345" +
    "\105\360\113\353\115\357\001\001\000\004\135\u0256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\135\u023d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u022e" +
    "\001\001\000\004\112\u01fc\001\001\000\004\103\u01d4\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u01c5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\u0193\001\001\000\002" +
    "\001\001\000\004\135\u0183\001\001\000\002\001\001\000" +
    "\004\116\u0106\001\001\000\004\063\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\u010a\067\u010c\001" +
    "\001\000\010\117\u017b\120\u017a\141\u017c\001\001\000\002" +
    "\001\001\000\010\125\u014a\126\u014b\141\u014c\001\001\000" +
    "\002\001\001\000\010\121\u013b\122\u0139\141\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\123\u011a\124" +
    "\u011b\141\u011c\001\001\000\010\127\u0110\130\u0112\141\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\127\u0119\141\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\131" +
    "\u0127\132\u0125\133\u0124\134\u0122\001\001\000\006\133\u0132" +
    "\134\u0122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\131\u0130\132\u0125\133\u0124\134\u0122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\132\u012f\133\u0124\134\u0122" +
    "\001\001\000\010\132\u012a\133\u0124\134\u0122\001\001\000" +
    "\002\001\001\000\006\133\u012e\134\u0122\001\001\000\006" +
    "\133\u012d\134\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\123\u0135\141\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\137\u0141" +
    "\140\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\140\u0146\001\001\000" +
    "\002\001\001\000\006\121\u0149\141\u013a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\131\u0153" +
    "\132\u0125\133\u0124\134\u0122\142\u0152\143\u0159\144\u0158\145" +
    "\u0157\146\u0155\147\u0156\001\001\000\020\131\u0153\132\u0125" +
    "\133\u0124\134\u0122\142\u0152\146\u016d\147\u0156\001\001\000" +
    "\002\001\001\000\026\131\u016a\132\u0125\133\u0124\134\u0122" +
    "\142\u0152\143\u016b\144\u0158\145\u0157\146\u0155\147\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\131\u0153\132\u0125" +
    "\133\u0124\134\u0122\142\u0152\144\u015b\145\u0157\146\u0155\147" +
    "\u0156\001\001\000\002\001\001\000\022\131\u0153\132\u0125" +
    "\133\u0124\134\u0122\142\u0152\145\u015d\146\u0155\147\u0156\001" +
    "\001\000\002\001\001\000\012\131\u0169\132\u0125\133\u0124" +
    "\134\u0122\001\001\000\012\131\u0168\132\u0125\133\u0124\134" +
    "\u0122\001\001\000\012\131\u0167\132\u0125\133\u0124\134\u0122" +
    "\001\001\000\012\131\u0166\132\u0125\133\u0124\134\u0122\001" +
    "\001\000\012\131\u0165\132\u0125\133\u0124\134\u0122\001\001" +
    "\000\012\131\u0164\132\u0125\133\u0124\134\u0122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\125\u0170\141\u014c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\131\u017f\132\u0125\133\u0124\134\u0122" +
    "\001\001\000\002\001\001\000\006\117\u0182\141\u017c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\u0184" +
    "\114\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\055\u0196\114\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u01c1\001\001\000" +
    "\004\006\u01bf\001\001\000\002\001\001\000\004\006\u01bc" +
    "\001\001\000\004\006\u01ba\001\001\000\002\001\001\000" +
    "\004\006\u01b7\001\001\000\004\006\u01b5\001\001\000\004" +
    "\006\u01b3\001\001\000\004\006\u01b1\001\001\000\004\006" +
    "\u01af\001\001\000\004\046\101\001\001\000\002\001\001" +
    "\000\004\046\101\001\001\000\002\001\001\000\004\046" +
    "\101\001\001\000\002\001\001\000\004\046\101\001\001" +
    "\000\002\001\001\000\004\046\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\101\001\001\000\002" +
    "\001\001\000\004\046\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\101\001\001\000\002\001\001" +
    "\000\004\046\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\u01d7\060\u01d6\102\u01d8\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\u01e7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\061\u01ea\114\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\031\361\032\347\033\354\034\351" +
    "\036\350\037\366\040\364\041\336\042\343\043\363\044" +
    "\365\062\u01ff\073\346\074\352\075\344\076\362\077\342" +
    "\100\340\101\356\104\345\105\360\113\353\115\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0227\001\001\000\004\006\u0225" +
    "\001\001\000\002\001\001\000\004\006\u0221\001\001\000" +
    "\004\006\u021f\001\001\000\004\006\u021c\001\001\000\002" +
    "\001\001\000\004\006\u0218\001\001\000\004\006\u0216\001" +
    "\001\000\004\006\u0214\001\001\000\004\006\u0212\001\001" +
    "\000\004\006\u0210\001\001\000\004\046\101\001\001\000" +
    "\002\001\001\000\004\046\101\001\001\000\002\001\001" +
    "\000\004\046\101\001\001\000\002\001\001\000\004\046" +
    "\101\001\001\000\002\001\001\000\004\046\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\101\001\001\000\002\001\001\000\004\046" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\101\001\001\000\002\001\001\000" +
    "\004\046\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\065\u023e\114\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u021c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\064\u0259\114\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u027b\001\001\000" +
    "\004\006\u0279\001\001\000\004\046\101\001\001\000\002" +
    "\001\001\000\004\046\101\001\001\000\002\001\001\000" +
    "\004\006\u027e\001\001\000\004\046\101\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CaptchaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CaptchaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CaptchaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Symbol cur_token;

	public CaptchaParser(CaptchaLex lex) {
		super(lex);
	}

	public void syntax_error(Symbol cur_token) {
		this.cur_token = cur_token;

		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CaptchaParser$actions {
  private final CaptchaParser parser;

  /** Constructor */
  CUP$CaptchaParser$actions(CaptchaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000000(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // c_gcic ::= gcic c_head c_body clgcic 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_gcic",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= c_gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		RESULT = start_val;
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CaptchaParser$parser.done_parsing();
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // c_head ::= head head_opt clhead 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_head",68, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // head_opt ::= head_opt h_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // head_opt ::= h_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // h_opt ::= c_title 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // h_opt ::= c_link 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c_body ::= body body_opt clbody 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_body",71, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body_opt ::= body_opt b_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body_opt ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_opt ::= c_h1 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b_opt ::= c_paragraph 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b_opt ::= c_spam 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b_opt ::= c_input 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_opt ::= c_txtarea 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b_opt ::= c_select 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b_opt ::= c_img 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b_opt ::= c_button 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b_opt ::= c_div 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b_opt ::= br 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b_opt ::= c_script 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_script ::= script make_script clscript 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_script",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // make_script ::= make_script scripting 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",76, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // make_script ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",76, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scripting ::= INT make_int SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scripting ::= STR make_str SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scripting ::= DEC make_dec SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // scripting ::= BOOL make_bool SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scripting ::= CHR make_char SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // make_int ::= make_int COMMA int_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_int",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // make_int ::= int_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_int",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // int_stat ::= mode ID_V EQUAL s 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("integer: " + p + " -> " + n1.intValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("int_stat",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // int_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("int_stat",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // make_dec ::= make_dec COMMA dec_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_dec",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // make_dec ::= dec_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_dec",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_stat ::= mode ID_V EQUAL s 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("decimal: " + p + " -> " + Math.round(d1 * 10000d)/10000d); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("dec_stat",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("dec_stat",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // make_bool ::= make_bool COMMA bool_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_bool",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // make_bool ::= bool_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_bool",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_stat ::= mode ID_V EQUAL a 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("boolean: " + p + " -> " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bool_stat",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bool_stat",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // make_char ::= make_char COMMA char_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_char",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // make_char ::= char_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_char",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // char_stat ::= mode ID_V EQUAL CHAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object ch = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("char: " + p + " -> " + ch); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("char_stat",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // char_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("char_stat",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // make_str ::= make_str COMMA str_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_str",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // make_str ::= str_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_str",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // str_stat ::= mode ID_V EQUAL w 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("string: " + p + " -> " + s1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str_stat",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // str_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str_stat",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mode ::= GLOBAL 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = true; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",95, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mode ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",95, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // s ::= s PLUS t 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 + n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // s ::= s MINUS t 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 - n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // s ::= t 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // t ::= t TIMES u 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 * n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // t ::= t DIVIDE u 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 / n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // t ::= u 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // u ::= MINUS u 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = -n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // u ::= v 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // v ::= INTEGER 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = Double.valueOf(n1.toString()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // v ::= DECIMAL 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = Double.valueOf(n1.toString()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // v ::= CHAR 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = (double)((int) n1.toString().charAt(0)); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // v ::= LPAREN s RPAREN 
            {
              Double RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // w ::= w PLUS x 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
						RESULT = s1.concat(s2);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // w ::= x 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // x ::= STRING 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1.toString(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("x",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // x ::= ID_ 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1.toString(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("x",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // x ::= INTEGER 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1.toString(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("x",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // x ::= DECIMAL 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1.toString(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("x",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // x ::= CHAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1.toString(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("x",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // a ::= a OR b 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1 || b2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // a ::= b 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // b ::= b AND c 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1 && b2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",98, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // b ::= c 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",98, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // c ::= NOT d 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = !b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // c ::= d 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // d ::= boolean_val 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // d ::= comp 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // d ::= LPAREN a RPAREN 
            {
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolean_val ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolean_val ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comp ::= s SMALLER s 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 < n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("comp",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comp ::= s GREATER s 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 > n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("comp",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comp ::= s GRTREQ s 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 >= n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("comp",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comp ::= s SMLLREQ s 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 <= n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("comp",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comp ::= s EQEQ s 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 == n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("comp",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comp ::= s NEQ s 
            {
              Boolean RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1 != n2; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("comp",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // c_title ::= title in cltitle 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("Titulo: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_title",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // c_link ::= link cllink 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_link",56, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // c_spam ::= spam in clspam 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						System.out.println("Spam: " + list);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_spam",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // c_h1 ::= h1 in clh1 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						System.out.println("h1: " + list);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_h1",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // c_paragraph ::= paragraph in clparagraph 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("paragraph: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_paragraph",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // c_input ::= input clinput 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_input",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // c_txtarea ::= txtarea cltxtarea 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_txtarea",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // c_button ::= button in clbutton 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("button: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_button",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // c_select ::= select make_option clselect 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_select",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // make_option ::= make_option c_option 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // make_option ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // c_option ::= option in cloption 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("option: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_option",64, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // c_img ::= img climg 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_img",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // c_div ::= div body_opt cldiv 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_div",67, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // in ::= in str 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
					list.add(s.toString());
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // in ::= 
            {
              List<String> RESULT =null;
		
					List<String> list = new ArrayList<>();
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // str ::= IN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // str ::= ID_V 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // gcic ::= SMALLER GCIC params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // gcic ::= error GCIC params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // gcic ::= SMALLER error params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // head ::= SMALLER HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // head ::= error HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // head ::= SMALLER error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // head ::= SMALLER HEAD error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // title ::= SMALLER TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // title ::= error TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // title ::= SMALLER TITLE error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // link ::= SMALLER LINK params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // link ::= error LINK params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // body ::= SMALLER BODY params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // body ::= error BODY params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // body ::= SMALLER error params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // spam ::= SMALLER SPAM params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // spam ::= error SPAM params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // input ::= SMALLER INPUT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",24, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // input ::= error INPUT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",24, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // txtarea ::= SMALLER TXTAREA params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",25, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // txtarea ::= error TXTAREA params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",25, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // select ::= SMALLER SELECT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",26, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // select ::= error SELECT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",26, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // option ::= SMALLER OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // option ::= error OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // option ::= SMALLER error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // option ::= SMALLER OPTION error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // div ::= SMALLER DIV params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // div ::= error DIV params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // img ::= SMALLER IMG params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",29, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // img ::= error IMG params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",29, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // br ::= SMALLER BR GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // br ::= error BR GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // br ::= SMALLER BR error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // button ::= SMALLER BUTTON params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",31, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // button ::= error BUTTON params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",31, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // h1 ::= SMALLER H1 params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // h1 ::= error H1 params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // h1 ::= SMALLER error params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // paragraph ::= SMALLER PARAGRAPH params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // paragraph ::= error PARAGRAPH params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // script ::= SMALLER SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",34, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // script ::= error SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",34, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // params ::= params param 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // params ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // param ::= LBRACKET opt RBRACKET 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // param ::= error opt RBRACKET 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // param ::= LBRACKET opt error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // opt ::= id 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // opt ::= name 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // opt ::= href_src 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // opt ::= bckgrnd_clr 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // opt ::= font_size 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // opt ::= font_family 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // opt ::= text_align 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // opt ::= type 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // opt ::= cols_rows 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // opt ::= clss 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // opt ::= width_height 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // opt ::= alt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // opt ::= onclick 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // opt ::= error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // id ::= ID EQUAL ID_ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("id: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // id ::= error EQUAL ID_ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // id ::= ID error ID_ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // id ::= ID EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // name ::= NAME EQUAL STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("name = " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // name ::= error EQUAL STRING 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // name ::= NAME error STRING 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // name ::= NAME EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // href_src ::= url EQUAL URL 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println(p + ": " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // href_src ::= error EQUAL URL 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // href_src ::= url error URL 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // href_src ::= url EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // url ::= HREF 
            {
              Object RESULT =null;
		 RESULT = "href"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // url ::= SRC 
            {
              Object RESULT =null;
		 RESULT = "src"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // bckgrnd_clr ::= color EQUAL COLOUR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("Color: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // bckgrnd_clr ::= error EQUAL COLOUR 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // bckgrnd_clr ::= color error COLOUR 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // bckgrnd_clr ::= color EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // color ::= BCKGRND 
            {
              String RESULT =null;
		 RESULT = "background"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // color ::= COLOR 
            {
              String RESULT =null;
		 RESULT = "color"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // font_size ::= FONTS EQUAL PIXEL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("font-size: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // font_size ::= FONTS error PIXEL 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // font_size ::= FONTS EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // font_family ::= FONTF EQUAL FONTF_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("font-family: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // font_family ::= error EQUAL FONTF_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // font_family ::= FONTF error FONTF_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // font_family ::= FONTF EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // text_align ::= ALIGN EQUAL ALIGN_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("align: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // text_align ::= error EQUAL ALIGN_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // text_align ::= ALIGN error ALIGN_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // text_align ::= ALIGN EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // type ::= TYPE EQUAL TYPE_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("type: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // type ::= error EQUAL TYPE_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // type ::= TYPE error TYPE_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // type ::= TYPE EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // cols_rows ::= cls_rws EQUAL INTQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println(p + ": " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // cols_rows ::= error EQUAL INTQ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // cols_rows ::= cls_rws error INTQ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // cols_rows ::= cls_rws EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // cls_rws ::= COLS 
            {
              Object RESULT =null;
		 RESULT = "cols"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // cls_rws ::= ROWS 
            {
              Object RESULT =null;
		 RESULT = "rows"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // clss ::= CLASS EQUAL CLASS_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("class: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // clss ::= error EQUAL CLASS_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // clss ::= CLASS error CLASS_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // clss ::= CLASS EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // width_height ::= w_h EQUAL pxl_per 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("width/height: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // width_height ::= error EQUAL pxl_per 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // width_height ::= w_h error pxl_per 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // width_height ::= w_h EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // w_h ::= WIDTH 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // w_h ::= HEIGHT 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // pxl_per ::= PIXEL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // pxl_per ::= PERCNTG 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // alt ::= ALT EQUAL STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("alt: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // alt ::= ALT error STRING 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // alt ::= ALT EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // onclick ::= CLICK EQUAL ONCLICK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("onclick: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // onclick ::= error EQUAL ONCLICK 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // onclick ::= CLICK error ONCLICK 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // onclick ::= CLICK EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // clgcic ::= SMALLER DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // clgcic ::= error DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // clgcic ::= SMALLER error GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // clgcic ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // clgcic ::= SMALLER DIVIDE GCIC error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // clhead ::= SMALLER DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // clhead ::= error DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // clhead ::= SMALLER error HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // clhead ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // clhead ::= SMALLER DIVIDE HEAD error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cltitle ::= SMALLER DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // cltitle ::= error DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // cltitle ::= SMALLER error TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cltitle ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // cltitle ::= SMALLER DIVIDE TITLE error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // cllink ::= SMALLER DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // cllink ::= error DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // cllink ::= SMALLER error LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // cllink ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // cllink ::= SMALLER DIVIDE LINK error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // clbody ::= SMALLER DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // clbody ::= error DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // clbody ::= SMALLER error BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // clbody ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // clbody ::= SMALLER DIVIDE BODY error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // clspam ::= SMALLER DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // clspam ::= error DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // clspam ::= SMALLER error SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // clspam ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // clspam ::= SMALLER DIVIDE SPAM error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // clinput ::= SMALLER DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // clinput ::= error DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // clinput ::= SMALLER error INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // clinput ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // clinput ::= SMALLER DIVIDE INPUT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // cltxtarea ::= SMALLER DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // cltxtarea ::= error DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // cltxtarea ::= SMALLER error TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // cltxtarea ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // cltxtarea ::= SMALLER DIVIDE TXTAREA error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // clselect ::= SMALLER DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // clselect ::= error DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // clselect ::= SMALLER error SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // clselect ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // clselect ::= SMALLER DIVIDE SELECT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // cloption ::= SMALLER DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // cloption ::= error DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // cloption ::= SMALLER error OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // cloption ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // cloption ::= SMALLER DIVIDE OPTION error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // cldiv ::= SMALLER DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // cldiv ::= error DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // cldiv ::= SMALLER error DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // cldiv ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // cldiv ::= SMALLER DIVIDE DIV error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // climg ::= SMALLER DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // climg ::= error DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // climg ::= SMALLER error IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // climg ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // climg ::= SMALLER DIVIDE IMG error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // clbutton ::= SMALLER DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // clbutton ::= error DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // clbutton ::= SMALLER error BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // clbutton ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // clbutton ::= SMALLER DIVIDE BUTTON error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // clh1 ::= SMALLER DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // clh1 ::= error DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // clh1 ::= SMALLER error H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // clh1 ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // clh1 ::= SMALLER DIVIDE H1 error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // clparagraph ::= SMALLER DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // clparagraph ::= error DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // clparagraph ::= SMALLER error PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000001(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // clparagraph ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // clparagraph ::= SMALLER DIVIDE PARAGRAPH error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // clscript ::= SMALLER DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // clscript ::= error DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // clscript ::= SMALLER error SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // clscript ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // clscript ::= SMALLER DIVIDE SCRIPT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CaptchaParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CaptchaParser$do_action_part00000000(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CaptchaParser$do_action_part00000001(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
