// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: captcha.flex

package com.cesar31.captchaweb.parser;

import com.cesar31.captchaweb.model.*;
import static com.cesar31.captchaweb.parser.CaptchaParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CaptchaLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\10\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\47\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\47\1\66\1\34\1\67\1\34\1\70"+
    "\1\0\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\7\0\1\3"+
    "\32\0\1\3\1\34\10\0\1\126\12\0\1\126\4\0"+
    "\1\126\4\0\1\34\27\126\1\0\37\126\1\0\u01ca\126"+
    "\4\0\14\126\16\0\5\126\7\0\1\126\1\0\1\126"+
    "\21\0\165\126\1\0\2\126\2\0\4\126\1\0\1\126"+
    "\6\0\1\126\1\0\3\126\1\0\1\126\1\0\24\126"+
    "\1\0\123\126\1\0\213\126\1\0\255\126\1\0\46\126"+
    "\2\0\1\126\6\0\51\126\10\0\55\126\1\0\1\126"+
    "\1\0\2\126\1\0\2\126\1\0\1\126\10\0\33\126"+
    "\4\0\4\126\35\0\13\126\5\0\100\126\12\127\4\0"+
    "\146\126\1\0\10\126\2\0\12\126\1\0\6\126\12\127"+
    "\3\126\2\0\1\126\20\0\73\126\2\0\145\126\16\0"+
    "\12\127\54\126\4\0\1\126\2\0\1\126\2\0\56\126"+
    "\22\0\34\126\4\0\13\126\65\0\25\126\1\0\10\126"+
    "\25\0\17\126\1\0\201\126\2\0\12\127\1\0\23\126"+
    "\1\0\10\126\2\0\2\126\2\0\26\126\1\0\7\126"+
    "\1\0\1\126\3\0\4\126\2\0\11\126\2\0\2\126"+
    "\2\0\4\126\10\0\1\126\4\0\2\126\1\0\5\126"+
    "\2\0\12\127\2\126\12\0\1\126\1\0\1\126\2\0"+
    "\3\126\1\0\6\126\4\0\2\126\2\0\26\126\1\0"+
    "\7\126\1\0\2\126\1\0\2\126\1\0\2\126\2\0"+
    "\1\126\1\0\5\126\4\0\2\126\2\0\3\126\3\0"+
    "\1\126\7\0\4\126\1\0\1\126\7\0\12\127\6\126"+
    "\13\0\3\126\1\0\11\126\1\0\3\126\1\0\26\126"+
    "\1\0\7\126\1\0\2\126\1\0\5\126\2\0\12\126"+
    "\1\0\3\126\1\0\3\126\2\0\1\126\17\0\4\126"+
    "\2\0\12\127\11\0\7\126\1\0\3\126\1\0\10\126"+
    "\2\0\2\126\2\0\26\126\1\0\7\126\1\0\2\126"+
    "\1\0\5\126\2\0\11\126\2\0\2\126\2\0\3\126"+
    "\10\0\2\126\4\0\2\126\1\0\5\126\2\0\12\127"+
    "\1\0\1\126\20\0\2\126\1\0\6\126\3\0\3\126"+
    "\1\0\4\126\3\0\2\126\1\0\1\126\1\0\2\126"+
    "\3\0\2\126\3\0\3\126\3\0\14\126\4\0\5\126"+
    "\3\0\3\126\1\0\4\126\2\0\1\126\6\0\1\126"+
    "\16\0\12\127\20\0\15\126\1\0\3\126\1\0\27\126"+
    "\1\0\20\126\3\0\10\126\1\0\3\126\1\0\4\126"+
    "\7\0\2\126\1\0\3\126\5\0\4\126\2\0\12\127"+
    "\20\0\4\126\1\0\10\126\1\0\3\126\1\0\27\126"+
    "\1\0\12\126\1\0\5\126\2\0\11\126\1\0\3\126"+
    "\1\0\4\126\7\0\2\126\7\0\1\126\1\0\4\126"+
    "\2\0\12\127\1\0\2\126\15\0\4\126\1\0\10\126"+
    "\1\0\3\126\1\0\63\126\1\0\3\126\1\0\5\126"+
    "\5\0\4\126\7\0\5\126\2\0\12\127\12\0\6\126"+
    "\2\0\2\126\1\0\22\126\3\0\30\126\1\0\11\126"+
    "\1\0\1\126\2\0\7\126\3\0\1\126\4\0\6\126"+
    "\1\0\1\126\1\0\10\126\6\0\12\127\2\0\2\126"+
    "\15\0\72\126\5\0\17\126\1\0\12\127\47\0\2\126"+
    "\1\0\1\126\1\0\5\126\1\0\30\126\1\0\1\126"+
    "\1\0\27\126\2\0\5\126\1\0\1\126\1\0\6\126"+
    "\2\0\12\127\2\0\4\126\40\0\1\126\27\0\2\126"+
    "\6\0\12\127\13\0\1\126\1\0\1\126\1\0\1\126"+
    "\4\0\12\126\1\0\44\126\4\0\24\126\1\0\22\126"+
    "\1\0\44\126\11\0\1\126\71\0\100\126\12\127\6\0"+
    "\100\126\12\127\4\126\2\0\46\126\1\0\1\126\5\0"+
    "\1\126\2\0\53\126\1\0\115\126\1\0\4\126\2\0"+
    "\7\126\1\0\1\126\1\0\4\126\2\0\51\126\1\0"+
    "\4\126\2\0\41\126\1\0\4\126\2\0\7\126\1\0"+
    "\1\126\1\0\4\126\2\0\17\126\1\0\71\126\1\0"+
    "\4\126\2\0\103\126\2\0\3\126\40\0\20\126\20\0"+
    "\126\126\2\0\6\126\3\0\u016c\126\2\0\21\126\1\3"+
    "\32\126\5\0\113\126\3\0\13\126\7\0\15\126\1\0"+
    "\7\126\13\0\25\126\13\0\24\126\14\0\15\126\1\0"+
    "\3\126\1\0\2\126\14\0\124\126\3\0\1\126\4\0"+
    "\2\126\2\0\12\127\41\0\3\126\2\0\12\127\6\0"+
    "\131\126\7\0\53\126\5\0\106\126\12\0\37\126\1\0"+
    "\14\126\4\0\14\126\12\0\12\127\36\126\2\0\5\126"+
    "\13\0\54\126\4\0\32\126\6\0\12\127\46\0\34\126"+
    "\4\0\77\126\1\0\35\126\2\0\1\126\12\127\6\0"+
    "\12\127\15\0\1\126\10\0\17\126\101\0\114\126\4\0"+
    "\12\127\21\0\11\126\14\0\60\126\12\127\72\126\14\0"+
    "\70\126\10\0\12\127\3\0\3\126\12\127\44\126\2\0"+
    "\11\126\7\0\53\126\2\0\3\126\20\0\3\126\1\0"+
    "\47\126\5\0\372\126\1\0\33\126\2\0\6\126\2\0"+
    "\46\126\2\0\6\126\2\0\10\126\1\0\1\126\1\0"+
    "\1\126\1\0\1\126\1\0\37\126\2\0\65\126\1\0"+
    "\7\126\1\0\1\126\3\0\3\126\1\0\7\126\3\0"+
    "\4\126\2\0\6\126\4\0\15\126\5\0\3\126\1\0"+
    "\7\126\3\0\13\3\35\0\2\3\5\0\1\3\17\0"+
    "\2\126\23\0\1\126\12\0\1\3\21\0\1\126\15\0"+
    "\1\126\20\0\15\126\63\0\41\126\21\0\1\126\4\0"+
    "\1\126\2\0\12\126\1\0\1\126\3\0\5\126\6\0"+
    "\1\126\1\0\1\126\1\0\1\126\1\0\4\126\1\0"+
    "\13\126\2\0\4\126\5\0\5\126\4\0\1\126\21\0"+
    "\51\126\u022d\0\64\126\26\0\57\126\1\0\57\126\1\0"+
    "\205\126\6\0\11\126\14\0\46\126\1\0\1\126\5\0"+
    "\1\126\2\0\70\126\7\0\1\126\17\0\30\126\11\0"+
    "\7\126\1\0\7\126\1\0\7\126\1\0\7\126\1\0"+
    "\7\126\1\0\7\126\1\0\7\126\1\0\7\126\1\0"+
    "\40\126\57\0\1\126\320\0\1\3\4\0\3\126\31\0"+
    "\17\126\1\0\5\126\2\0\5\126\4\0\126\126\2\0"+
    "\2\126\2\0\3\126\1\0\132\126\1\0\4\126\5\0"+
    "\53\126\1\0\136\126\21\0\33\126\65\0\306\126\112\0"+
    "\360\126\20\0\215\126\103\0\56\126\2\0\15\126\3\0"+
    "\20\126\12\127\2\126\24\0\63\126\1\0\12\126\1\0"+
    "\163\126\45\0\11\126\2\0\147\126\2\0\65\126\2\0"+
    "\5\126\60\0\61\126\30\0\64\126\14\0\106\126\12\0"+
    "\12\127\6\0\30\126\3\0\1\126\1\0\3\126\12\127"+
    "\44\126\2\0\44\126\14\0\35\126\3\0\101\126\16\0"+
    "\1\126\12\127\6\0\20\126\12\127\5\126\1\0\67\126"+
    "\11\0\16\126\2\0\12\127\6\0\27\126\3\0\111\126"+
    "\30\0\3\126\2\0\20\126\2\0\5\126\12\0\6\126"+
    "\2\0\6\126\2\0\6\126\11\0\7\126\1\0\7\126"+
    "\1\0\53\126\1\0\14\126\10\0\173\126\1\0\2\126"+
    "\2\0\12\127\6\0\244\126\14\0\27\126\4\0\61\126"+
    "\4\0\156\126\2\0\152\126\46\0\7\126\14\0\5\126"+
    "\5\0\14\126\1\0\15\126\1\0\5\126\1\0\1\126"+
    "\1\0\2\126\1\0\2\126\1\0\154\126\41\0\153\126"+
    "\22\0\100\126\2\0\66\126\50\0\14\126\4\0\20\126"+
    "\20\0\20\126\3\0\2\126\30\0\3\126\40\0\5\126"+
    "\1\0\207\126\23\0\12\127\7\0\32\126\4\0\1\126"+
    "\1\0\32\126\13\0\131\126\3\0\6\126\2\0\6\126"+
    "\2\0\6\126\2\0\3\126\43\0\14\126\1\0\32\126"+
    "\1\0\23\126\1\0\2\126\1\0\17\126\2\0\16\126"+
    "\42\0\173\126\105\0\65\126\210\0\1\126\202\0\35\126"+
    "\3\0\61\126\17\0\1\126\37\0\40\126\15\0\36\126"+
    "\5\0\53\126\5\0\36\126\2\0\44\126\4\0\10\126"+
    "\1\0\5\126\52\0\236\126\2\0\12\127\6\0\44\126"+
    "\4\0\44\126\4\0\50\126\10\0\64\126\234\0\67\126"+
    "\11\0\26\126\12\0\10\126\230\0\6\126\2\0\1\126"+
    "\1\0\54\126\1\0\2\126\3\0\1\126\2\0\27\126"+
    "\12\0\27\126\11\0\37\126\101\0\23\126\1\0\2\126"+
    "\12\0\26\126\12\0\32\126\106\0\70\126\6\0\2\126"+
    "\100\0\4\126\1\0\2\126\5\0\10\126\1\0\3\126"+
    "\1\0\35\126\2\0\3\126\4\0\1\126\40\0\35\126"+
    "\3\0\35\126\43\0\10\126\1\0\36\126\31\0\66\126"+
    "\12\0\26\126\12\0\23\126\15\0\22\126\156\0\111\126"+
    "\67\0\63\126\15\0\63\126\15\0\50\126\10\0\12\127"+
    "\306\0\35\126\12\0\1\126\10\0\41\126\217\0\27\126"+
    "\11\0\107\126\37\0\12\127\17\0\74\126\25\0\31\126"+
    "\7\0\12\127\6\0\65\126\1\0\12\127\4\0\3\126"+
    "\11\0\44\126\2\0\1\126\11\0\105\126\4\0\4\126"+
    "\3\0\12\127\1\126\1\0\1\126\43\0\22\126\1\0"+
    "\45\126\6\0\1\126\101\0\7\126\1\0\1\126\1\0"+
    "\4\126\1\0\17\126\1\0\12\126\7\0\73\126\5\0"+
    "\12\127\6\0\4\126\1\0\10\126\2\0\2\126\2\0"+
    "\26\126\1\0\7\126\1\0\2\126\1\0\5\126\1\0"+
    "\12\126\2\0\2\126\2\0\3\126\2\0\1\126\6\0"+
    "\1\126\5\0\7\126\2\0\7\126\3\0\5\126\213\0"+
    "\113\126\5\0\12\127\4\0\2\126\40\0\106\126\1\0"+
    "\1\126\10\0\12\127\246\0\66\126\2\0\11\126\27\0"+
    "\6\126\42\0\101\126\3\0\1\126\13\0\12\127\46\0"+
    "\71\126\7\0\12\127\66\0\33\126\2\0\17\126\4\0"+
    "\12\127\306\0\73\126\145\0\100\126\12\127\25\0\1\126"+
    "\240\0\10\126\2\0\56\126\2\0\10\126\1\0\2\126"+
    "\33\0\77\126\10\0\1\126\10\0\112\126\3\0\1\126"+
    "\42\0\71\126\7\0\11\126\1\0\55\126\1\0\11\126"+
    "\17\0\12\127\30\0\36\126\2\0\26\126\1\0\16\126"+
    "\111\0\7\126\1\0\2\126\1\0\54\126\3\0\1\126"+
    "\1\0\2\126\1\0\11\126\10\0\12\127\6\0\6\126"+
    "\1\0\2\126\1\0\45\126\1\0\2\126\1\0\6\126"+
    "\7\0\12\127\u0136\0\27\126\11\0\232\126\146\0\157\126"+
    "\21\0\304\126\274\0\57\126\321\0\107\126\271\0\71\126"+
    "\7\0\37\126\1\0\12\127\146\0\36\126\2\0\5\126"+
    "\13\0\67\126\11\0\4\126\14\0\12\127\11\0\25\126"+
    "\5\0\23\126\260\0\100\126\200\0\113\126\4\0\71\126"+
    "\7\0\21\126\100\0\2\126\1\0\1\126\34\0\370\126"+
    "\10\0\363\126\15\0\37\126\61\0\3\126\21\0\4\126"+
    "\10\0\u018c\126\4\0\153\126\5\0\15\126\3\0\11\126"+
    "\7\0\12\126\3\0\2\126\306\0\5\126\3\0\6\126"+
    "\10\0\10\126\2\0\7\126\36\0\4\126\224\0\3\126"+
    "\273\0\125\126\1\0\107\126\1\0\2\126\2\0\1\126"+
    "\2\0\2\126\2\0\4\126\1\0\14\126\1\0\1\126"+
    "\1\0\7\126\1\0\101\126\1\0\4\126\2\0\10\126"+
    "\1\0\7\126\1\0\34\126\1\0\4\126\1\0\5\126"+
    "\1\0\1\126\3\0\7\126\1\0\u0154\126\2\0\31\126"+
    "\1\0\31\126\1\0\37\126\1\0\31\126\1\0\37\126"+
    "\1\0\31\126\1\0\37\126\1\0\31\126\1\0\37\126"+
    "\1\0\31\126\1\0\10\126\2\0\62\127\67\126\4\0"+
    "\62\126\10\0\1\126\16\0\1\126\26\0\5\126\1\0"+
    "\17\126\120\0\7\126\1\0\21\126\2\0\7\126\1\0"+
    "\2\126\1\0\5\126\325\0\55\126\3\0\16\126\2\0"+
    "\12\127\4\0\1\126\u0171\0\60\126\12\127\6\0\305\126"+
    "\13\0\7\126\51\0\114\126\4\0\12\127\246\0\4\126"+
    "\1\0\33\126\1\0\2\126\1\0\1\126\2\0\1\126"+
    "\1\0\12\126\1\0\4\126\1\0\1\126\1\0\1\126"+
    "\6\0\1\126\4\0\1\126\1\0\1\126\1\0\1\126"+
    "\1\0\3\126\1\0\2\126\1\0\1\126\2\0\1\126"+
    "\1\0\1\126\1\0\1\126\1\0\1\126\1\0\1\126"+
    "\1\0\2\126\1\0\1\126\2\0\4\126\1\0\7\126"+
    "\1\0\4\126\1\0\4\126\1\0\1\126\1\0\12\126"+
    "\1\0\21\126\5\0\3\126\1\0\5\126\1\0\21\126"+
    "\164\0\32\126\6\0\32\126\6\0\32\126\166\0\327\126"+
    "\51\0\65\126\13\0\336\126\2\0\u0182\126\16\0\u0131\126"+
    "\37\0\36\126\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\4\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\1\15\22\1\23\1\24\15\22\1\25"+
    "\1\1\1\26\1\2\1\27\1\0\1\30\3\4\1\0"+
    "\30\4\1\31\1\0\1\4\1\32\1\4\1\0\1\33"+
    "\1\34\1\35\1\0\11\22\1\36\22\22\1\37\12\22"+
    "\1\40\1\30\1\4\2\41\1\42\1\4\1\0\36\4"+
    "\1\32\1\43\2\0\1\22\1\44\10\22\1\45\4\22"+
    "\1\46\12\22\1\47\16\22\1\50\5\22\1\4\1\51"+
    "\1\0\36\4\2\0\3\22\1\52\3\22\1\53\12\22"+
    "\1\54\1\55\1\56\1\22\1\57\6\22\1\60\3\22"+
    "\1\61\2\22\1\62\4\22\1\63\1\22\1\64\1\22"+
    "\1\65\2\22\1\66\1\67\1\22\1\4\1\70\1\71"+
    "\7\4\1\72\11\4\1\73\4\4\2\0\4\22\1\74"+
    "\2\22\1\75\20\22\1\76\2\22\1\77\1\100\1\22"+
    "\1\101\1\0\4\22\1\0\1\102\10\4\1\0\2\4"+
    "\1\103\1\4\1\0\1\4\1\104\1\4\2\0\2\22"+
    "\1\105\1\22\1\106\1\107\1\22\1\110\3\22\1\111"+
    "\2\22\1\112\4\22\1\113\5\22\2\0\1\114\2\22"+
    "\1\115\1\0\1\4\1\116\2\4\1\0\1\4\1\0"+
    "\1\117\3\22\1\120\4\22\1\121\3\22\1\122\1\123"+
    "\2\22\1\124\1\125\2\0\1\126\1\127\1\0\2\4"+
    "\2\0\2\22\1\130\1\131\1\22\1\132\6\22\5\0"+
    "\7\22\1\133\1\22\1\0\1\134\3\0\1\135\2\22"+
    "\1\136\1\22\1\137\1\22\1\140\1\0\1\141\2\0"+
    "\1\22\1\142\2\22\1\143\1\0\1\116\1\22\1\144"+
    "\1\22\1\145\1\22\1\146\1\0\4\22\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\130\0\130\0\260\0\u0108\0\u0160\0\u01b8\0\u0210"+
    "\0\u0268\0\130\0\130\0\130\0\130\0\130\0\130\0\130"+
    "\0\u02c0\0\u0318\0\130\0\130\0\u0370\0\u03c8\0\u0420\0\u0478"+
    "\0\u04d0\0\u0528\0\u0580\0\u05d8\0\u0630\0\u0688\0\u06e0\0\u0738"+
    "\0\u0790\0\u07e8\0\u0840\0\u0898\0\u08f0\0\130\0\130\0\u0948"+
    "\0\u09a0\0\u09f8\0\u0a50\0\u0aa8\0\u0b00\0\u0b58\0\u0bb0\0\u0c08"+
    "\0\u0c60\0\u0cb8\0\u0d10\0\u0d68\0\130\0\u0dc0\0\130\0\u0e18"+
    "\0\130\0\u0e70\0\u01b8\0\u0ec8\0\u0f20\0\u0f78\0\u0fd0\0\u1028"+
    "\0\u1080\0\u10d8\0\u1130\0\u1188\0\u11e0\0\u1238\0\u1290\0\u12e8"+
    "\0\u1340\0\u1398\0\u13f0\0\u1448\0\u14a0\0\u14f8\0\u1550\0\u15a8"+
    "\0\u1600\0\u1658\0\u16b0\0\u1708\0\u1760\0\u17b8\0\u1810\0\u01b8"+
    "\0\u1868\0\u18c0\0\u01b8\0\u1918\0\u1970\0\130\0\130\0\130"+
    "\0\u19c8\0\u1a20\0\u1a78\0\u1ad0\0\u1b28\0\u1b80\0\u1bd8\0\u1c30"+
    "\0\u1c88\0\u1ce0\0\u0528\0\u1d38\0\u1d90\0\u1de8\0\u1e40\0\u1e98"+
    "\0\u1ef0\0\u1f48\0\u1fa0\0\u1ff8\0\u2050\0\u20a8\0\u2100\0\u2158"+
    "\0\u21b0\0\u2208\0\u2260\0\u22b8\0\u2310\0\u0528\0\u2368\0\u23c0"+
    "\0\u2418\0\u2470\0\u24c8\0\u2520\0\u2578\0\u25d0\0\u2628\0\u2680"+
    "\0\130\0\130\0\u26d8\0\u01b8\0\130\0\u01b8\0\u2730\0\u2788"+
    "\0\u27e0\0\u2838\0\u2890\0\u28e8\0\u2940\0\u2998\0\u29f0\0\u2a48"+
    "\0\u2aa0\0\u2af8\0\u2b50\0\u2ba8\0\u2c00\0\u2c58\0\u2cb0\0\u2d08"+
    "\0\u2d60\0\u2db8\0\u2e10\0\u2e68\0\u2ec0\0\u2f18\0\u2f70\0\u2fc8"+
    "\0\u3020\0\u3078\0\u30d0\0\u3128\0\u3180\0\u31d8\0\130\0\u1918"+
    "\0\u3230\0\u3288\0\u32e0\0\u0528\0\u3338\0\u3390\0\u33e8\0\u3440"+
    "\0\u3498\0\u34f0\0\u3548\0\u35a0\0\u0528\0\u35f8\0\u3650\0\u36a8"+
    "\0\u3700\0\u0528\0\u3758\0\u37b0\0\u3808\0\u3860\0\u38b8\0\u3910"+
    "\0\u3968\0\u39c0\0\u3a18\0\u3a70\0\u0528\0\u3ac8\0\u3b20\0\u3b78"+
    "\0\u3bd0\0\u3c28\0\u3c80\0\u3cd8\0\u3d30\0\u3d88\0\u3de0\0\u3e38"+
    "\0\u3e90\0\u3ee8\0\u3f40\0\u0528\0\u3f98\0\u3ff0\0\u4048\0\u40a0"+
    "\0\u40f8\0\u4150\0\u01b8\0\u41a8\0\u4200\0\u4258\0\u42b0\0\u4308"+
    "\0\u4360\0\u43b8\0\u4410\0\u4468\0\u44c0\0\u4518\0\u4570\0\u45c8"+
    "\0\u4620\0\u4678\0\u46d0\0\u4728\0\u4780\0\u47d8\0\u4830\0\u4888"+
    "\0\u48e0\0\u4938\0\u4990\0\u49e8\0\u4a40\0\u4a98\0\u4af0\0\u4b48"+
    "\0\u4ba0\0\u4bf8\0\u4c50\0\u4ca8\0\u4d00\0\u4d58\0\u4db0\0\u0528"+
    "\0\u4e08\0\u4e60\0\u4eb8\0\u0528\0\u4f10\0\u4f68\0\u4fc0\0\u5018"+
    "\0\u5070\0\u50c8\0\u5120\0\u5178\0\u51d0\0\u5228\0\u0528\0\u0528"+
    "\0\u0528\0\u5280\0\u0528\0\u52d8\0\u5330\0\u5388\0\u53e0\0\u5438"+
    "\0\u5490\0\u54e8\0\u5540\0\u5598\0\u55f0\0\u0528\0\u5648\0\u56a0"+
    "\0\u0528\0\u56f8\0\u5750\0\u57a8\0\u5800\0\u0528\0\u5858\0\u0528"+
    "\0\u58b0\0\u0528\0\u5908\0\u5960\0\u0528\0\u0528\0\u59b8\0\u5a10"+
    "\0\130\0\u01b8\0\u5a68\0\u5ac0\0\u5b18\0\u5b70\0\u5bc8\0\u5c20"+
    "\0\u5c78\0\u01b8\0\u5cd0\0\u5d28\0\u5d80\0\u5dd8\0\u5e30\0\u5e88"+
    "\0\u5ee0\0\u5f38\0\u5f90\0\u01b8\0\u5fe8\0\u6040\0\u6098\0\u60f0"+
    "\0\u6148\0\u61a0\0\u61f8\0\u6250\0\u62a8\0\u6300\0\u0528\0\u6358"+
    "\0\u63b0\0\u0528\0\u6408\0\u6460\0\u64b8\0\u6510\0\u6568\0\u65c0"+
    "\0\u6618\0\u6670\0\u66c8\0\u6720\0\u6778\0\u67d0\0\u6828\0\u6880"+
    "\0\u68d8\0\u6930\0\u0528\0\u6988\0\u69e0\0\u0528\0\u0528\0\u6a38"+
    "\0\u0528\0\u6a90\0\u6ae8\0\u6b40\0\u6b98\0\u6bf0\0\u6c48\0\u0528"+
    "\0\u6ca0\0\u6cf8\0\u6d50\0\u6da8\0\u6e00\0\u6e58\0\u6eb0\0\u6f08"+
    "\0\u6f60\0\u6fb8\0\u7010\0\u01b8\0\u7068\0\u70c0\0\u7118\0\u01b8"+
    "\0\u7170\0\u71c8\0\u7220\0\u7278\0\u72d0\0\u0528\0\u7328\0\u0528"+
    "\0\u0528\0\u7380\0\u0528\0\u73d8\0\u7430\0\u7488\0\u0528\0\u74e0"+
    "\0\u7538\0\u0528\0\u7590\0\u75e8\0\u7640\0\u7698\0\u0528\0\u76f0"+
    "\0\u7748\0\u77a0\0\u77f8\0\u7850\0\u78a8\0\u7900\0\u0528\0\u7958"+
    "\0\u79b0\0\u0528\0\u7a08\0\u7a60\0\u01b8\0\u7ab8\0\u7b10\0\u7b68"+
    "\0\u7bc0\0\u7c18\0\130\0\u7c70\0\u7cc8\0\u7d20\0\u0528\0\u7d78"+
    "\0\u7dd0\0\u7e28\0\u7e80\0\u0528\0\u7ed8\0\u7f30\0\u7f88\0\u0528"+
    "\0\u0528\0\u7fe0\0\u8038\0\u0528\0\u0528\0\u8090\0\u80e8\0\u0528"+
    "\0\u0528\0\u8140\0\u8198\0\u81f0\0\u8248\0\u82a0\0\u82f8\0\u8350"+
    "\0\u0528\0\u0528\0\u83a8\0\u0528\0\u8400\0\u8458\0\u84b0\0\u8508"+
    "\0\u8560\0\u85b8\0\u8610\0\u8668\0\u86c0\0\u8718\0\u8770\0\u87c8"+
    "\0\u8820\0\u8878\0\u88d0\0\u8928\0\u8980\0\u89d8\0\u0528\0\u8a30"+
    "\0\u8a88\0\130\0\u8ae0\0\u8b38\0\u8b90\0\u0528\0\u8be8\0\u8c40"+
    "\0\u0528\0\u8c98\0\u0528\0\u8cf0\0\u0528\0\u8d48\0\130\0\u8da0"+
    "\0\u8df8\0\u8e50\0\u0528\0\u8ea8\0\u8f00\0\130\0\u8f58\0\130"+
    "\0\u8fb0\0\u0528\0\u9008\0\u9060\0\u90b8\0\u0528\0\u9060\0\u9110"+
    "\0\u9168\0\u91c0\0\u9218\0\u0528";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\3\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\7"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\1\31\1\32\1\33\1\34\1\35\2\32"+
    "\1\36\1\37\2\32\1\40\1\32\1\41\1\42\1\32"+
    "\1\43\1\32\1\44\2\32\1\45\2\32\1\46\1\47"+
    "\1\7\1\50\1\51\1\52\1\53\1\32\1\54\1\32"+
    "\1\55\1\56\4\32\1\57\1\60\2\32\1\61\1\62"+
    "\1\63\2\32\1\64\3\32\1\65\1\66\1\67\2\7"+
    "\132\0\1\3\132\0\1\70\24\0\1\71\75\0\4\72"+
    "\1\0\1\72\1\73\1\74\1\75\3\76\5\72\1\77"+
    "\1\76\1\72\1\100\2\101\5\72\1\76\1\72\1\102"+
    "\1\103\1\104\3\103\1\105\15\103\1\106\3\103\2\72"+
    "\1\103\1\107\1\110\1\111\2\103\1\112\1\113\1\114"+
    "\1\103\1\115\1\103\1\116\1\117\1\120\1\121\1\122"+
    "\1\103\1\123\1\124\1\125\2\103\1\126\1\103\1\127"+
    "\1\103\3\72\2\103\6\0\6\7\6\0\1\7\1\0"+
    "\3\7\5\0\1\7\1\0\30\7\2\0\33\7\3\0"+
    "\2\7\6\0\4\7\1\130\1\7\6\0\1\7\1\0"+
    "\3\7\5\0\1\7\1\0\30\7\2\0\33\7\3\0"+
    "\2\7\2\131\1\0\1\131\1\0\1\131\5\132\1\133"+
    "\6\131\1\132\1\131\3\132\5\131\1\132\1\131\30\132"+
    "\2\131\33\132\3\131\2\132\6\0\6\7\6\0\1\134"+
    "\1\0\3\7\5\0\1\7\1\0\30\7\2\0\33\7"+
    "\3\0\2\7\6\0\6\7\6\0\1\134\1\0\3\22"+
    "\5\0\1\7\1\0\30\7\2\0\33\7\3\0\2\7"+
    "\5\0\1\135\24\0\1\136\127\0\1\137\127\0\1\140"+
    "\174\0\1\141\36\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\13\32\1\142\5\32\1\143\6\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\1\144\27\32\2\0\1\145\32\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\4\32\1\146\23\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\13\32\1\147\1\32\1\150\10\32"+
    "\1\151\1\32\2\0\33\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\23\32"+
    "\1\152\4\32\2\0\33\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\5\32"+
    "\1\153\7\32\1\154\12\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\4\32\1\155\23\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\23\32\1\156\4\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\15\32\1\157\12\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\4\32\1\160\23\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\7\32\1\161\20\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\7\32\1\162\20\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\30\32\2\0\14\32\1\163\16\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\30\32\2\0\1\32\1\164\15\32\1\165\13\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\30\32\2\0\1\145\7\32\1\166"+
    "\3\32\1\167\2\32\1\170\13\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\5\32\1\171\25\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\1\32\1\172\15\32\1\173\13\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\30\32\2\0\5\32\1\174\14\32\1\175"+
    "\10\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\4\32\1\176"+
    "\11\32\1\177\14\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\1\32\1\200\31\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\16\32\1\201\14\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\17\32\1\202\13\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\22\32\1\203\1\32\1\204\6\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\5\32\1\205\14\32\1\206\6\32\1\207"+
    "\1\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\11\32\1\210"+
    "\21\32\3\0\2\32\124\0\1\211\3\0\2\70\1\3"+
    "\1\70\1\4\123\70\4\72\1\0\1\72\1\212\125\72"+
    "\1\0\1\72\1\73\5\76\6\72\1\76\1\72\3\213"+
    "\5\72\1\76\1\72\6\213\22\76\2\72\1\76\6\213"+
    "\24\76\3\72\2\76\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\5\72\1\77\1\76\1\72\3\75\5\72"+
    "\1\76\1\72\30\75\2\72\33\75\3\72\2\75\4\72"+
    "\1\0\1\72\1\73\5\76\6\72\1\76\1\72\3\76"+
    "\5\72\1\76\1\72\30\76\2\72\33\76\3\72\2\76"+
    "\4\72\1\0\1\72\1\215\1\72\1\77\10\72\1\77"+
    "\2\72\3\77\7\72\30\77\2\72\33\77\3\72\2\77"+
    "\4\72\1\0\1\72\1\216\1\76\1\75\1\217\2\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\20\103\1\221\12\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\216\1\76\1\75\1\217\2\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\101\5\72\1\76"+
    "\1\72\30\103\2\72\20\103\1\221\12\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\22\103\1\222\10\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\33\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\17\103\1\223"+
    "\13\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\5\103\1\224\25\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\5\103\1\225\25\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\21\103\1\226\11\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\14\103\1\227\16\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\5\103\1\230\2\103\1\231\6\103\1\232\13\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\25\103\1\233\5\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\22\103\1\234\10\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\24\103\1\235\6\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\25\103\1\236\5\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\5\103\1\237\3\103\1\240\21\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\1\103\1\241\31\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\1\103\1\242\23\103\1\243\5\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\14\103\1\244\16\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\25\103\1\245\5\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\1\103"+
    "\1\246\3\103\1\247\3\103\1\250\5\103\1\251\13\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\1\103\1\252\7\103\1\253"+
    "\21\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\5\103\1\254\25\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\10\103\1\255\22\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\5\103\1\256\25\103\3\72\2\103"+
    "\13\0\1\257\122\0\5\7\1\133\6\0\1\7\1\0"+
    "\3\7\5\0\1\7\1\0\30\7\2\0\33\7\3\0"+
    "\2\7\6\0\6\7\6\0\1\7\1\0\3\260\5\0"+
    "\1\7\1\0\30\7\2\0\33\7\3\0\1\7\1\260"+
    "\21\0\1\261\212\0\1\262\31\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\4\32\1\263\23\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\2\32\1\264\25\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\20\32\1\265\7\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\1\32\1\266\1\32"+
    "\1\267\2\32\1\270\1\271\1\272\2\32\1\273\2\32"+
    "\1\274\1\275\1\32\1\276\1\277\5\32\2\0\2\32"+
    "\1\266\1\32\1\267\2\32\1\270\1\271\1\272\2\32"+
    "\1\273\2\32\1\274\1\275\2\32\1\276\1\277\6\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\21\32\1\300\6\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\21\32\1\301\6\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\3\32\1\302\24\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\10\32\1\303\17\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\15\32\1\304\12\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\10\32\1\305\17\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\22\32\1\306\5\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\14\32\1\307\13\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\30\32\2\0\1\310\32\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\17\32\1\311\4\32\1\312\3\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\4\32\1\313\23\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\10\32\1\314\17\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\24\32\1\315"+
    "\6\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\3\32\1\316"+
    "\27\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\17\32\1\317"+
    "\13\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\1\32\1\320"+
    "\31\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\1\32\1\321"+
    "\31\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\14\32\1\322"+
    "\16\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\3\32\1\323"+
    "\27\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\14\32\1\324"+
    "\16\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\16\32\1\325"+
    "\14\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\11\32\1\326"+
    "\21\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\5\32\1\327"+
    "\25\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\24\32\1\330"+
    "\6\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\15\32\1\331"+
    "\15\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\3\32\1\332"+
    "\27\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\27\32\1\333"+
    "\3\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\3\32\1\334"+
    "\27\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\22\32\1\335"+
    "\10\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\30\32\1\336"+
    "\2\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\25\32\1\337"+
    "\5\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\20\32\1\340"+
    "\12\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\4\32\1\341"+
    "\26\32\3\0\2\32\4\72\1\0\1\72\1\73\5\76"+
    "\6\72\1\76\1\72\3\342\5\72\1\76\1\72\6\342"+
    "\22\76\2\72\1\76\6\342\24\76\3\72\2\76\4\72"+
    "\1\0\1\72\1\343\5\76\6\72\1\76\1\72\3\76"+
    "\5\72\1\76\1\72\30\76\2\72\33\76\3\72\2\76"+
    "\4\72\1\0\1\72\1\212\6\72\1\344\116\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\30\103\1\345\2\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\11\103"+
    "\1\346\21\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\25\103\1\347"+
    "\5\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\16\103\1\350\14\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\22\103\1\351\10\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\25\103\1\352\5\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\1\103\1\353\23\103\1\354\5\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\16\103\1\355\14\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\5\103\1\356\25\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\14\103\1\357\16\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\3\103\1\360\27\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\1\103"+
    "\1\361\3\103\1\362\25\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\24\103\1\363\6\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\23\103"+
    "\1\364\7\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\6\103\1\365"+
    "\24\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\15\103\1\354\15\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\22\103\1\366\10\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\26\103\1\361\4\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\15\103\1\367\15\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\11\103\1\370\21\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\22\103\1\371\10\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\4\103"+
    "\1\372\26\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\4\103\1\373"+
    "\26\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\7\103\1\374\23\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\27\103\1\357\3\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\16\103\1\375\14\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\14\103\1\376\16\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\1\103\1\377\26\103\1\u0100\2\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\11\103\1\u0101\21\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\14\103\1\u0102\16\103\3\72\2\103\21\0\1\u0103"+
    "\215\0\1\u0104\26\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\20\32\1\u0105\7\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\1\u0106\27\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\16\32\1\u0107\1\32\1\u0108\2\32\1\u0109"+
    "\4\32\2\0\17\32\1\u0107\2\32\1\u0108\2\32\1\u0109"+
    "\5\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\10\32\1\u010a\17\32\2\0"+
    "\11\32\1\u010a\21\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\2\32\1\u010b"+
    "\25\32\2\0\3\32\1\u010b\27\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\1\32\1\u010c\1\32\5\0"+
    "\1\7\1\0\4\32\1\u010d\23\32\2\0\5\32\1\u010d"+
    "\25\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\14\32\1\u010e\1\u010f\12\32"+
    "\2\0\15\32\1\u010e\1\u010f\14\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\10\32\1\u0110\17\32\2\0\11\32\1\u0110\21\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\17\32\1\u0111\10\32\2\0\20\32\1\u0111"+
    "\12\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\2\32\1\u0112\1\32\1\u0113"+
    "\12\32\1\u0114\10\32\2\0\3\32\1\u0112\1\32\1\u0113"+
    "\12\32\1\u0114\12\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\4\32\1\u0115"+
    "\3\32\1\u0116\17\32\2\0\5\32\1\u0115\3\32\1\u0116"+
    "\21\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\2\32\1\u0117\25\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\4\32\1\u0118\23\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\22\32\1\u0119\5\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\22\32\1\u011a\5\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\22\32\1\u011b\5\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\10\32\1\u011c\6\32\1\u011d"+
    "\10\32\2\0\33\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\1\u011e\32\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\13\32\1\u011f\14\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\4\32\1\u0120\23\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\4\32\1\u0121\23\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\15\32\1\u0122\12\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\13\32\1\u0123\14\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\13\32"+
    "\1\u0124\17\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\14\32"+
    "\1\u0125\16\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\22\32"+
    "\1\u0126\10\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\23\32"+
    "\1\u0127\7\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\17\32"+
    "\1\u0128\3\32\1\u0129\7\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\11\32\1\u012a\21\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\23\32\1\u012b\7\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\24\32\1\u012c\6\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\7\32\1\u012d\23\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\6\32\1\u012e\24\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\5\32\1\u012f\25\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\5\32\1\u0130\25\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\14\32\1\u0131\16\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\23\32\1\u0132\7\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\11\32\1\u0133\21\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\24\32\1\u0134\6\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\5\32\1\u0135\25\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\5\32\1\u0136\25\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\24\32\1\u0137\6\32\3\0\2\32\4\72\1\0"+
    "\1\72\1\73\5\76\6\72\1\76\1\72\3\u0138\5\72"+
    "\1\76\1\72\6\u0138\22\76\2\72\1\76\6\u0138\24\76"+
    "\3\72\2\76\4\72\1\0\1\72\1\u0139\125\72\1\0"+
    "\1\72\1\u013a\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\33\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\1\103\1\u013b\31\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\22\103\1\u013c\10\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\5\103\1\u013d\25\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\4\103\1\u013e\26\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\1\103\1\373\31\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\3\103\1\u013f\27\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\5\103"+
    "\1\373\25\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\24\103\1\u0140"+
    "\6\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\3\103\1\u0141\27\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\u0142\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\33\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\10\103\1\u0143\22\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\31\103\1\373\1\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\5\103"+
    "\1\u0144\25\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\20\103\1\u0145"+
    "\12\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\24\103\1\u0146\6\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\24\103\1\u0147\6\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\17\103\1\u0148\13\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\2\103\1\u0149\30\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\26\103\1\354\4\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\20\103\1\u014a\12\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\11\103"+
    "\1\u014b\21\103\3\72\2\103\4\72\1\0\1\72\1\u014c"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\33\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\10\103\1\365\22\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\23\103\1\u014d\7\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\26\103\1\u014e\4\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\14\103\1\373\16\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\24\103"+
    "\1\u014f\6\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\24\103\1\354"+
    "\6\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\14\103\1\u0150\16\103"+
    "\3\72\2\103\21\u0103\1\u0151\106\u0103\72\0\1\u0152\43\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\22\32\1\u0153\5\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\2\32\1\u0154\25\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\3\32\1\u0155\24\32\2\0\4\32\1\u0155\26\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\22\32\1\u0156\5\32\2\0\24\32\1\u0156"+
    "\6\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\24\32\1\u0157\3\32\2\0"+
    "\26\32\1\u0157\4\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\10\32\1\u0158"+
    "\17\32\2\0\11\32\1\u0158\21\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\1\u0159\27\32\2\0\1\32\1\u0159\31\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\6\32\1\u015a\21\32\2\0\7\32\1\u015a\23\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\17\32\1\u015b\10\32\2\0\20\32"+
    "\1\u015b\12\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\15\32\1\u015c\12\32"+
    "\2\0\16\32\1\u015c\14\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\22\32"+
    "\1\u015d\5\32\2\0\24\32\1\u015d\6\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\20\32\1\u015e\7\32\2\0\22\32\1\u015e\10\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\13\32\1\u015f\14\32\2\0\14\32"+
    "\1\u015f\16\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\1\u0160\27\32\2\0"+
    "\1\32\1\u0160\31\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\26\32\1\u0161"+
    "\1\32\2\0\30\32\1\u0161\2\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\22\32\1\u0162\5\32\2\0\24\32\1\u0162\6\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\10\32\1\u0163\17\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\14\32\1\u0164\13\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\1\u0165\27\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\1\u0166\27\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\16\32\1\u0167\11\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\1\u0168\27\32\2\0\33\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\20\32"+
    "\1\u0169\7\32\2\0\33\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\25\32"+
    "\1\u016a\2\32\2\0\33\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\4\32"+
    "\1\u016b\23\32\2\0\33\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\7\32\1\u016c\23\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\5\32\1\u016d\25\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\23\32\1\u016e\7\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\22\32\1\u016f\10\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\15\32\1\u0170\15\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\5\32\1\u0171\25\32\3\0\2\32\6\0\6\7"+
    "\5\0\1\u0172\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\33\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\10\32\1\u0173\22\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\7\32\1\u0174\23\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\11\32\1\u0175\21\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\16\32\1\u0176\14\32\3\0\2\32\6\0\6\7\5\0"+
    "\1\u0177\1\7\1\0\3\32\5\0\1\7\1\0\30\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\10\32"+
    "\1\u0178\22\32\3\0\2\32\4\72\1\0\1\72\1\u014c"+
    "\5\76\6\72\1\76\1\72\3\u0179\5\72\1\76\1\72"+
    "\6\u0179\22\76\2\72\1\76\6\u0179\24\76\3\72\2\76"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\14\103\1\u017a\16\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\11\103\1\u017b\21\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\26\103\1\u017c\4\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\1\103"+
    "\1\u017d\31\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\13\103\1\373"+
    "\17\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\5\103\1\u017e\25\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\13\103\1\u017f\17\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\23\103\1\u0180\7\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\16\103\1\373\14\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\1\u0181\4\72\1\76\1\72"+
    "\30\103\2\72\23\103\1\u0182\7\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\11\103\1\u0183\21\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\u0184\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\33\103\3\72\2\103\4\72\1\0\1\72\1\214\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\17\103\1\u0144\13\103"+
    "\3\72\2\103\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\5\103\1\u0185\25\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\14\103\1\354\16\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\17\103\1\u014f\13\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\u0186\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\33\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\5\103\1\u0187"+
    "\25\103\3\72\2\103\4\72\1\0\1\72\1\u0188\1\76"+
    "\1\75\3\76\1\220\4\72\1\77\1\76\1\72\3\103"+
    "\5\72\1\76\1\72\30\103\2\72\33\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\17\103\1\u0189\13\103\3\72\2\103\21\u0103"+
    "\1\u018a\106\u0103\71\0\1\u018b\44\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\30\32\2\0\1\u018c"+
    "\32\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\22\32\1\u018d\5\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\27\32\1\u018e\2\0\31\32"+
    "\1\u018e\1\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\22\32\1\u018f\5\32"+
    "\2\0\24\32\1\u018f\6\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\2\32"+
    "\1\u0190\25\32\2\0\3\32\1\u0190\27\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\3\32\1\u0191\24\32\2\0\4\32\1\u0191\26\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\23\32\1\u0192\4\32\2\0\25\32"+
    "\1\u0192\5\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\12\32\1\u0193\15\32"+
    "\2\0\13\32\1\u0193\17\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\10\32"+
    "\1\u0194\17\32\2\0\11\32\1\u0194\21\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\10\32\1\u0195\17\32\2\0\11\32\1\u0195\21\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\4\32\1\u0196\23\32\2\0\5\32"+
    "\1\u0196\25\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\14\32\1\u0197\13\32"+
    "\2\0\15\32\1\u0197\15\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\22\32"+
    "\1\u0198\5\32\2\0\24\32\1\u0198\6\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\13\32\1\u0199\14\32\2\0\14\32\1\u0199\16\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\13\32\1\u019a\14\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\17\32\1\u019b\10\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\20\32\1\u019c\7\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\13\32\1\u019d\14\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\1\u019e\27\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\22\32\1\u019f\5\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\21\32\1\u01a0\6\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\7\32\1\u01a1\20\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\30\32\2\0\22\32\1\u01a2\10\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\30\32\2\0\1\32\1\u01a3\31\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\30\32\2\0\1\32\1\u01a4\31\32\3\0"+
    "\2\32\76\0\1\u01a5\14\0\1\u01a6\22\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\24\32\1\u01a7\6\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\5\32\1\u01a8\25\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\3\32\1\u01a9\27\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\30\32\2\0"+
    "\7\32\1\u01aa\23\32\3\0\2\32\71\0\1\u01ab\36\0"+
    "\4\72\1\0\1\72\1\73\5\76\6\72\1\76\1\72"+
    "\3\u01ac\5\72\1\76\1\72\6\u01ac\22\76\2\72\1\76"+
    "\6\u01ac\24\76\3\72\2\76\4\72\1\0\1\72\1\u01ad"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\33\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\5\103\1\u01ae\25\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\1\103\1\u017a\31\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\16\103\1\u017c\14\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\22\103\1\u0147\10\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\214\1\76\1\75\3\76\1\220\4\72\1\77\1\76"+
    "\1\72\3\103\5\72\1\76\1\72\30\103\2\72\2\103"+
    "\1\u01af\30\103\3\72\2\103\4\72\1\0\1\72\1\214"+
    "\1\76\1\75\3\76\1\220\4\72\1\77\1\76\1\72"+
    "\3\103\5\72\1\76\1\72\30\103\2\72\11\103\1\352"+
    "\21\103\3\72\2\103\4\72\1\0\1\72\1\212\14\72"+
    "\1\u01b0\110\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\1\u0181\4\72"+
    "\1\76\1\72\30\103\2\72\33\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\6\103\1\u01b1\24\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\22\103\1\u014f\10\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\215\1\72\1\77\10\72\1\77\2\72\3\77\7\72"+
    "\30\77\2\72\23\77\1\u01b2\7\77\3\72\2\77\4\72"+
    "\1\0\1\72\1\214\1\76\1\75\3\76\1\220\4\72"+
    "\1\77\1\76\1\72\3\103\5\72\1\76\1\72\30\103"+
    "\2\72\22\103\1\373\10\103\3\72\2\103\4\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\27\103\1\373\3\103\3\72\2\103\21\u0103\1\u018a\11\u0103"+
    "\1\3\74\u0103\104\0\1\u01b3\31\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\10\32\1\u01b4\17\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\4\32\1\u01b5\23\32"+
    "\2\0\33\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\16\32\1\u01b6\11\32"+
    "\2\0\17\32\1\u01b6\13\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\22\32"+
    "\1\u01b7\5\32\2\0\24\32\1\u01b7\6\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\16\32\1\u01b8\11\32\2\0\17\32\1\u01b8\13\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\17\32\1\u01b9\10\32\2\0\20\32"+
    "\1\u01b9\12\32\3\0\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\5\0\1\7\1\0\2\32\1\u01ba\25\32"+
    "\2\0\3\32\1\u01ba\27\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\1\u01bb"+
    "\27\32\2\0\1\32\1\u01bb\31\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\4\32\1\u01bc\23\32\2\0\5\32\1\u01bc\25\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\1\u01bd\27\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\30\32\2\0\1\u01be\32\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\4\32\1\u01bf\23\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\3\32\1\u01c0\24\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\4\32\1\u01c1\23\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\10\32\1\u01c2\17\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\17\32\1\u01c3\13\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\16\32\1\u01c4\14\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\14\32\1\u01c5\16\32\3\0\2\32\71\0"+
    "\1\u01c6\137\0\1\u01c7\34\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\22\32\1\u01c8"+
    "\10\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\13\32\1\u01c9"+
    "\17\32\3\0\2\32\104\0\1\u01ca\23\0\4\72\1\0"+
    "\1\72\1\73\5\76\6\72\1\76\1\72\3\u01cb\5\72"+
    "\1\76\1\72\6\u01cb\22\76\2\72\1\76\6\u01cb\24\76"+
    "\3\72\2\76\4\72\1\0\1\72\1\214\1\76\1\75"+
    "\3\76\1\220\4\72\1\77\1\76\1\72\3\103\5\72"+
    "\1\76\1\72\30\103\2\72\22\103\1\u017a\10\103\3\72"+
    "\2\103\4\72\1\0\1\72\1\214\1\76\1\75\3\76"+
    "\1\220\4\72\1\77\1\76\1\72\3\103\5\72\1\76"+
    "\1\72\30\103\2\72\17\103\1\u01cc\13\103\3\72\2\103"+
    "\4\72\1\0\1\72\1\212\14\72\1\u01cd\110\72\1\0"+
    "\1\72\1\214\1\76\1\75\3\76\1\220\4\72\1\77"+
    "\1\76\1\72\3\103\5\72\1\76\1\72\30\103\2\72"+
    "\31\103\1\u0147\1\103\3\72\2\103\4\72\1\0\1\72"+
    "\1\215\1\72\1\77\10\72\1\77\2\72\3\77\7\72"+
    "\30\77\2\72\5\77\1\u01ce\25\77\3\72\2\77\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\15\32\1\u01cf\12\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\20\32\1\u01d0\7\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\15\32\1\u01d1\12\32\2\0\16\32\1\u01d1\14\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\15\32\1\u01d2\12\32\2\0\16\32\1\u01d2"+
    "\14\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\22\32\1\u01d3\5\32\2\0"+
    "\24\32\1\u01d3\6\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\22\32\1\u01d4"+
    "\5\32\2\0\24\32\1\u01d4\6\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\20\32\1\u01d5\7\32\2\0\22\32\1\u01d5\10\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\20\32\1\u01d6\7\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\15\32\1\u01d7\12\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\1\u01d8\27\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\13\32\1\u01d9\14\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\30\32\2\0\25\32\1\u01da\5\32\3\0\2\32"+
    "\105\0\1\u01db\144\0\1\u01dc\106\0\1\u01dd\26\0\4\72"+
    "\1\0\1\72\1\u014c\5\76\6\72\1\76\1\72\3\76"+
    "\5\72\1\76\1\72\30\76\2\72\33\76\3\72\2\76"+
    "\4\72\1\0\1\72\1\214\1\76\1\75\3\76\1\220"+
    "\4\72\1\77\1\76\1\72\3\103\5\72\1\76\1\72"+
    "\30\103\2\72\30\103\1\u014f\2\103\3\72\2\103\4\72"+
    "\1\0\1\72\1\212\12\72\2\u01de\1\72\3\u01de\7\72"+
    "\30\u01de\2\72\33\u01de\3\72\2\u01de\4\72\1\0\1\72"+
    "\1\215\1\72\1\77\10\72\1\77\2\72\3\77\7\72"+
    "\30\77\2\72\22\77\1\u01df\10\77\3\72\2\77\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\5\32\1\u01e0\22\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\30\32\2\0\1\u01e1\32\32\3\0\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\5\0\1\7\1\0\10\32"+
    "\1\u01e2\17\32\2\0\11\32\1\u01e2\21\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\4\32\1\u01e3\23\32\2\0\5\32\1\u01e3\25\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\30\32\2\0\1\u01e4\32\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\23\32\1\u01e5\4\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\22\32\1\u01e6\5\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\4\32\1\u01e7\23\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\30\32\2\0\16\32\1\u01e8\14\32\3\0"+
    "\2\32\101\0\1\u01e9\123\0\1\u01ea\131\0\1\u01eb\30\0"+
    "\4\72\1\0\1\72\1\212\12\72\1\u01de\1\u01ec\1\72"+
    "\3\u01de\7\72\30\u01de\2\72\33\u01de\3\72\2\u01de\4\72"+
    "\1\0\1\72\1\215\1\72\1\77\10\72\1\77\2\72"+
    "\3\77\7\72\30\77\2\72\11\77\1\u01ed\21\77\3\72"+
    "\2\77\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\16\32\1\u01ee\11\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\1\u01ef\27\32\2\0\33\32\3\0\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\5\0\1\7"+
    "\1\0\15\32\1\u01f0\12\32\2\0\16\32\1\u01f0\14\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\1\u01f1\27\32\2\0\1\32\1\u01f1"+
    "\31\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\15\32\1\u01f2\12\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\14\32\1\u01f3\13\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\16\32\1\u01f4\11\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\30\32\2\0\4\32\1\u01f5"+
    "\26\32\3\0\2\32\104\0\1\u01f6\131\0\1\u01f7\21\0"+
    "\4\72\1\0\1\72\1\212\12\72\1\u01de\1\u01ec\1\72"+
    "\3\u01f8\7\72\30\u01f8\2\72\33\u01f8\3\72\2\u01f8\4\72"+
    "\1\0\1\72\1\215\1\72\1\77\10\72\1\77\2\72"+
    "\3\77\7\72\30\77\2\72\6\77\1\u01f9\24\77\3\72"+
    "\2\77\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\13\32\1\u01fa\14\32\2\0\33\32\3\0"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\5\0"+
    "\1\7\1\0\6\32\1\u01fb\21\32\2\0\7\32\1\u01fb"+
    "\23\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\23\32\1\u01fc\4\32\2\0"+
    "\33\32\3\0\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\20\32\1\u01fd\7\32\2\0"+
    "\33\32\3\0\2\32\121\0\1\u01fe\6\0\4\72\1\0"+
    "\1\72\1\212\12\72\1\u01de\1\u01ec\1\72\3\u01ff\7\72"+
    "\30\u01ff\2\72\33\u01ff\3\72\2\u01ff\4\72\1\0\1\72"+
    "\1\u0200\1\72\1\77\10\72\1\77\2\72\3\77\7\72"+
    "\30\77\2\72\33\77\3\72\2\77\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\4\32\1\u0201"+
    "\23\32\2\0\33\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\14\32\1\u0202"+
    "\13\32\2\0\33\32\3\0\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\5\0\1\7\1\0\10\32\1\u0203"+
    "\17\32\2\0\33\32\3\0\2\32\1\u01ff\3\72\1\0"+
    "\1\u01ff\1\u0204\121\u01ff\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\5\0\1\7\1\0\1\u0205\27\32\2\0\33\32"+
    "\3\0\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\5\0\1\7\1\0\16\32\1\u0206\11\32\2\0\33\32"+
    "\3\0\2\32\1\u0207\4\0\1\u0207\1\u0204\121\u0207\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\22\32\1\u0208\5\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\16\32\1\u0209\11\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\20\32\1\u020a\7\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\10\32\1\u020b\17\32\2\0\33\32\3\0\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\5\0\1\7\1\0"+
    "\16\32\1\u020c\11\32\2\0\33\32\3\0\2\32";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37488];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\7\11\2\1\2\11\21\1\2\11"+
    "\15\1\1\11\1\1\1\11\1\1\1\11\1\0\4\1"+
    "\1\0\31\1\1\0\3\1\1\0\3\11\1\0\47\1"+
    "\2\11\2\1\1\11\2\1\1\0\36\1\1\11\1\1"+
    "\2\0\61\1\1\0\36\1\2\0\64\1\1\11\27\1"+
    "\2\0\37\1\1\0\4\1\1\0\11\1\1\0\4\1"+
    "\1\0\3\1\2\0\31\1\2\0\4\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\11\22\1\2\0\2\1\1\0"+
    "\2\1\2\0\14\1\5\0\11\1\1\0\1\11\3\0"+
    "\10\1\1\0\1\11\2\0\4\1\1\11\1\0\1\11"+
    "\6\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[524];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
		private Symbol symbol(int type) {
			return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, yyline + 1, yycolumn + 1));
			// return new Symbol(type, yyline + 1, yycolumn + 1);
		}

		private Symbol symbol(int type, Object object) {
			return new Symbol(type, yyline + 1, yycolumn + 1, new Token(type, (String) object, yyline + 1, yycolumn + 1));
			// return new Symbol(type, yyline + 1, yycolumn + 1, object);
		}

		private String getString(String str) {
			return str.substring(1, str.length() - 1);
		}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaptchaLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 104: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 105: break;
          case 3:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 106: break;
          case 4:
            { return symbol(IN, yytext());
            }
            // fall through
          case 107: break;
          case 5:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 108: break;
          case 6:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 109: break;
          case 7:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 110: break;
          case 8:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 111: break;
          case 9:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 112: break;
          case 10:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 113: break;
          case 11:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 114: break;
          case 12:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 115: break;
          case 13:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 116: break;
          case 14:
            { return symbol(SEMI, yytext());
            }
            // fall through
          case 117: break;
          case 15:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 118: break;
          case 16:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 119: break;
          case 17:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 120: break;
          case 18:
            { return symbol(ID_V, yytext());
            }
            // fall through
          case 121: break;
          case 19:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 122: break;
          case 20:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 123: break;
          case 21:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 124: break;
          case 22:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 125: break;
          case 23:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 126: break;
          case 24:
            { return symbol(STRING, getString(yytext()));
            }
            // fall through
          case 127: break;
          case 25:
            { return symbol(AND, yytext());
            }
            // fall through
          case 128: break;
          case 26:
            { return symbol(CHAR, getString(yytext()));
            }
            // fall through
          case 129: break;
          case 27:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 130: break;
          case 28:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 131: break;
          case 29:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 132: break;
          case 30:
            { return symbol(IF, yytext());
            }
            // fall through
          case 133: break;
          case 31:
            { return symbol(ID, yytext());
            }
            // fall through
          case 134: break;
          case 32:
            { return symbol(OR, yytext());
            }
            // fall through
          case 135: break;
          case 33:
            { return symbol(ID_, getString(yytext()));
            }
            // fall through
          case 136: break;
          case 34:
            { return symbol(INTQ, getString(yytext()));
            }
            // fall through
          case 137: break;
          case 35:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 138: break;
          case 36:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 139: break;
          case 37:
            { return symbol(PARAGRAPH, yytext());
            }
            // fall through
          case 140: break;
          case 38:
            { return symbol(END, yytext());
            }
            // fall through
          case 141: break;
          case 39:
            { return symbol(ALT, yytext());
            }
            // fall through
          case 142: break;
          case 40:
            { return symbol(SRC, yytext());
            }
            // fall through
          case 143: break;
          case 41:
            { return symbol(PERCNTG, getString(yytext()));
            }
            // fall through
          case 144: break;
          case 42:
            { return symbol(BR, yytext());
            }
            // fall through
          case 145: break;
          case 43:
            { return symbol(H1, yytext());
            }
            // fall through
          case 146: break;
          case 44:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 147: break;
          case 45:
            { return symbol(ELSE, yytext());
            }
            // fall through
          case 148: break;
          case 46:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 149: break;
          case 47:
            { return symbol(INIT, yytext());
            }
            // fall through
          case 150: break;
          case 48:
            { return symbol(THEN, yytext());
            }
            // fall through
          case 151: break;
          case 49:
            { return symbol(CHR, yytext());
            }
            // fall through
          case 152: break;
          case 50:
            { return symbol(COLS, yytext());
            }
            // fall through
          case 153: break;
          case 51:
            { return symbol(HREF, yytext());
            }
            // fall through
          case 154: break;
          case 52:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 155: break;
          case 53:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 156: break;
          case 54:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 157: break;
          case 55:
            { return symbol(TYPE, yytext());
            }
            // fall through
          case 158: break;
          case 56:
            { return symbol(ONCLICK, getString(yytext()));
            }
            // fall through
          case 159: break;
          case 57:
            { return symbol(PIXEL, getString(yytext()));
            }
            // fall through
          case 160: break;
          case 58:
            { return symbol(CLASS_VALUE, getString(yytext()));
            }
            // fall through
          case 161: break;
          case 59:
            { return symbol(COLOUR, getString(yytext()));
            }
            // fall through
          case 162: break;
          case 60:
            { return symbol(DIV, yytext());
            }
            // fall through
          case 163: break;
          case 61:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 164: break;
          case 62:
            { return symbol(WHILE, yytext());
            }
            // fall through
          case 165: break;
          case 63:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 166: break;
          case 64:
            { return symbol(COLOR, yytext());
            }
            // fall through
          case 167: break;
          case 65:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 168: break;
          case 66:
            { return symbol(WIDTH, yytext());
            }
            // fall through
          case 169: break;
          case 67:
            { return symbol(ALIGN_VALUE, getString(yytext()));
            }
            // fall through
          case 170: break;
          case 68:
            { return symbol(TYPE_VALUE, getString(yytext()));
            }
            // fall through
          case 171: break;
          case 69:
            { return symbol(BODY, yytext());
            }
            // fall through
          case 172: break;
          case 70:
            { return symbol(GCIC, yytext());
            }
            // fall through
          case 173: break;
          case 71:
            { return symbol(HEAD, yytext());
            }
            // fall through
          case 174: break;
          case 72:
            { return symbol(LINK, yytext());
            }
            // fall through
          case 175: break;
          case 73:
            { return symbol(SPAM, yytext());
            }
            // fall through
          case 176: break;
          case 74:
            { return symbol(UNTIL, yytext());
            }
            // fall through
          case 177: break;
          case 75:
            { return symbol(REPEAT, yytext());
            }
            // fall through
          case 178: break;
          case 76:
            { return symbol(HEIGHT, yytext());
            }
            // fall through
          case 179: break;
          case 77:
            { return symbol(STR, yytext());
            }
            // fall through
          case 180: break;
          case 78:
            { return symbol(FONTF_VALUE, getString(yytext()));
            }
            // fall through
          case 181: break;
          case 79:
            { return symbol(GLOBAL, yytext());
            }
            // fall through
          case 182: break;
          case 80:
            { return symbol(INPUT, yytext());
            }
            // fall through
          case 183: break;
          case 81:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 184: break;
          case 82:
            { return symbol(ON_LOAD, yytext());
            }
            // fall through
          case 185: break;
          case 83:
            { return symbol(REVERSE, yytext());
            }
            // fall through
          case 186: break;
          case 84:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 187: break;
          case 85:
            { return symbol(DEC, yytext());
            }
            // fall through
          case 188: break;
          case 86:
            { return symbol(INT, yytext());
            }
            // fall through
          case 189: break;
          case 87:
            { return symbol(CLICK, yytext());
            }
            // fall through
          case 190: break;
          case 88:
            { return symbol(BUTTON, yytext());
            }
            // fall through
          case 191: break;
          case 89:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 192: break;
          case 90:
            { return symbol(SELECT, yytext());
            }
            // fall through
          case 193: break;
          case 91:
            { return symbol(THEN_WHILE, yytext());
            }
            // fall through
          case 194: break;
          case 92:
            { return symbol(FONTS, yytext());
            }
            // fall through
          case 195: break;
          case 93:
            { return symbol(ALERT, yytext());
            }
            // fall through
          case 196: break;
          case 94:
            { return symbol(TXTAREA, yytext());
            }
            // fall through
          case 197: break;
          case 95:
            { return symbol(LETPAR, yytext());
            }
            // fall through
          case 198: break;
          case 96:
            { return symbol(BCKGRND, yytext());
            }
            // fall through
          case 199: break;
          case 97:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 200: break;
          case 98:
            { return symbol(SCRIPT, yytext());
            }
            // fall through
          case 201: break;
          case 99:
            { return symbol(FONTF, yytext());
            }
            // fall through
          case 202: break;
          case 100:
            { return symbol(LETIMPAR, yytext());
            }
            // fall through
          case 203: break;
          case 101:
            { return symbol(URL, getString(yytext()));
            }
            // fall through
          case 204: break;
          case 102:
            { return symbol(RANDOM_N, yytext());
            }
            // fall through
          case 205: break;
          case 103:
            { return symbol(RANDOM_C, yytext());
            }
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
