// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: captcha.flex

package com.cesar31.captchaweb.parser;

import static com.cesar31.captchaweb.parser.CaptchaParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CaptchaLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\10\26\1\27\1\30\1\31\1\32\1\33\1\13"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\46\1\55\1\56\1\57\1\60\1\61\1\46"+
    "\1\62\1\63\1\46\1\64\1\13\1\65\1\13\1\66"+
    "\1\0\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\7\0\1\3"+
    "\32\0\1\3\1\13\10\0\1\124\12\0\1\124\4\0"+
    "\1\124\4\0\1\13\27\124\1\0\37\124\1\0\u01ca\124"+
    "\4\0\14\124\16\0\5\124\7\0\1\124\1\0\1\124"+
    "\21\0\165\124\1\0\2\124\2\0\4\124\1\0\1\124"+
    "\6\0\1\124\1\0\3\124\1\0\1\124\1\0\24\124"+
    "\1\0\123\124\1\0\213\124\1\0\255\124\1\0\46\124"+
    "\2\0\1\124\6\0\51\124\10\0\55\124\1\0\1\124"+
    "\1\0\2\124\1\0\2\124\1\0\1\124\10\0\33\124"+
    "\4\0\4\124\35\0\13\124\5\0\100\124\12\125\4\0"+
    "\146\124\1\0\10\124\2\0\12\124\1\0\6\124\12\125"+
    "\3\124\2\0\1\124\20\0\73\124\2\0\145\124\16\0"+
    "\12\125\54\124\4\0\1\124\2\0\1\124\2\0\56\124"+
    "\22\0\34\124\4\0\13\124\65\0\25\124\1\0\10\124"+
    "\25\0\17\124\1\0\201\124\2\0\12\125\1\0\23\124"+
    "\1\0\10\124\2\0\2\124\2\0\26\124\1\0\7\124"+
    "\1\0\1\124\3\0\4\124\2\0\11\124\2\0\2\124"+
    "\2\0\4\124\10\0\1\124\4\0\2\124\1\0\5\124"+
    "\2\0\12\125\2\124\12\0\1\124\1\0\1\124\2\0"+
    "\3\124\1\0\6\124\4\0\2\124\2\0\26\124\1\0"+
    "\7\124\1\0\2\124\1\0\2\124\1\0\2\124\2\0"+
    "\1\124\1\0\5\124\4\0\2\124\2\0\3\124\3\0"+
    "\1\124\7\0\4\124\1\0\1\124\7\0\12\125\6\124"+
    "\13\0\3\124\1\0\11\124\1\0\3\124\1\0\26\124"+
    "\1\0\7\124\1\0\2\124\1\0\5\124\2\0\12\124"+
    "\1\0\3\124\1\0\3\124\2\0\1\124\17\0\4\124"+
    "\2\0\12\125\11\0\7\124\1\0\3\124\1\0\10\124"+
    "\2\0\2\124\2\0\26\124\1\0\7\124\1\0\2\124"+
    "\1\0\5\124\2\0\11\124\2\0\2\124\2\0\3\124"+
    "\10\0\2\124\4\0\2\124\1\0\5\124\2\0\12\125"+
    "\1\0\1\124\20\0\2\124\1\0\6\124\3\0\3\124"+
    "\1\0\4\124\3\0\2\124\1\0\1\124\1\0\2\124"+
    "\3\0\2\124\3\0\3\124\3\0\14\124\4\0\5\124"+
    "\3\0\3\124\1\0\4\124\2\0\1\124\6\0\1\124"+
    "\16\0\12\125\20\0\15\124\1\0\3\124\1\0\27\124"+
    "\1\0\20\124\3\0\10\124\1\0\3\124\1\0\4\124"+
    "\7\0\2\124\1\0\3\124\5\0\4\124\2\0\12\125"+
    "\20\0\4\124\1\0\10\124\1\0\3\124\1\0\27\124"+
    "\1\0\12\124\1\0\5\124\2\0\11\124\1\0\3\124"+
    "\1\0\4\124\7\0\2\124\7\0\1\124\1\0\4\124"+
    "\2\0\12\125\1\0\2\124\15\0\4\124\1\0\10\124"+
    "\1\0\3\124\1\0\63\124\1\0\3\124\1\0\5\124"+
    "\5\0\4\124\7\0\5\124\2\0\12\125\12\0\6\124"+
    "\2\0\2\124\1\0\22\124\3\0\30\124\1\0\11\124"+
    "\1\0\1\124\2\0\7\124\3\0\1\124\4\0\6\124"+
    "\1\0\1\124\1\0\10\124\6\0\12\125\2\0\2\124"+
    "\15\0\72\124\5\0\17\124\1\0\12\125\47\0\2\124"+
    "\1\0\1\124\1\0\5\124\1\0\30\124\1\0\1\124"+
    "\1\0\27\124\2\0\5\124\1\0\1\124\1\0\6\124"+
    "\2\0\12\125\2\0\4\124\40\0\1\124\27\0\2\124"+
    "\6\0\12\125\13\0\1\124\1\0\1\124\1\0\1\124"+
    "\4\0\12\124\1\0\44\124\4\0\24\124\1\0\22\124"+
    "\1\0\44\124\11\0\1\124\71\0\100\124\12\125\6\0"+
    "\100\124\12\125\4\124\2\0\46\124\1\0\1\124\5\0"+
    "\1\124\2\0\53\124\1\0\115\124\1\0\4\124\2\0"+
    "\7\124\1\0\1\124\1\0\4\124\2\0\51\124\1\0"+
    "\4\124\2\0\41\124\1\0\4\124\2\0\7\124\1\0"+
    "\1\124\1\0\4\124\2\0\17\124\1\0\71\124\1\0"+
    "\4\124\2\0\103\124\2\0\3\124\40\0\20\124\20\0"+
    "\126\124\2\0\6\124\3\0\u016c\124\2\0\21\124\1\3"+
    "\32\124\5\0\113\124\3\0\13\124\7\0\15\124\1\0"+
    "\7\124\13\0\25\124\13\0\24\124\14\0\15\124\1\0"+
    "\3\124\1\0\2\124\14\0\124\124\3\0\1\124\4\0"+
    "\2\124\2\0\12\125\41\0\3\124\2\0\12\125\6\0"+
    "\131\124\7\0\53\124\5\0\106\124\12\0\37\124\1\0"+
    "\14\124\4\0\14\124\12\0\12\125\36\124\2\0\5\124"+
    "\13\0\54\124\4\0\32\124\6\0\12\125\46\0\34\124"+
    "\4\0\77\124\1\0\35\124\2\0\1\124\12\125\6\0"+
    "\12\125\15\0\1\124\10\0\17\124\101\0\114\124\4\0"+
    "\12\125\21\0\11\124\14\0\60\124\12\125\72\124\14\0"+
    "\70\124\10\0\12\125\3\0\3\124\12\125\44\124\2\0"+
    "\11\124\7\0\53\124\2\0\3\124\20\0\3\124\1\0"+
    "\47\124\5\0\372\124\1\0\33\124\2\0\6\124\2\0"+
    "\46\124\2\0\6\124\2\0\10\124\1\0\1\124\1\0"+
    "\1\124\1\0\1\124\1\0\37\124\2\0\65\124\1\0"+
    "\7\124\1\0\1\124\3\0\3\124\1\0\7\124\3\0"+
    "\4\124\2\0\6\124\4\0\15\124\5\0\3\124\1\0"+
    "\7\124\3\0\13\3\35\0\2\3\5\0\1\3\17\0"+
    "\2\124\23\0\1\124\12\0\1\3\21\0\1\124\15\0"+
    "\1\124\20\0\15\124\63\0\41\124\21\0\1\124\4\0"+
    "\1\124\2\0\12\124\1\0\1\124\3\0\5\124\6\0"+
    "\1\124\1\0\1\124\1\0\1\124\1\0\4\124\1\0"+
    "\13\124\2\0\4\124\5\0\5\124\4\0\1\124\21\0"+
    "\51\124\u022d\0\64\124\26\0\57\124\1\0\57\124\1\0"+
    "\205\124\6\0\11\124\14\0\46\124\1\0\1\124\5\0"+
    "\1\124\2\0\70\124\7\0\1\124\17\0\30\124\11\0"+
    "\7\124\1\0\7\124\1\0\7\124\1\0\7\124\1\0"+
    "\7\124\1\0\7\124\1\0\7\124\1\0\7\124\1\0"+
    "\40\124\57\0\1\124\320\0\1\3\4\0\3\124\31\0"+
    "\17\124\1\0\5\124\2\0\5\124\4\0\126\124\2\0"+
    "\2\124\2\0\3\124\1\0\132\124\1\0\4\124\5\0"+
    "\53\124\1\0\136\124\21\0\33\124\65\0\306\124\112\0"+
    "\360\124\20\0\215\124\103\0\56\124\2\0\15\124\3\0"+
    "\20\124\12\125\2\124\24\0\63\124\1\0\12\124\1\0"+
    "\163\124\45\0\11\124\2\0\147\124\2\0\65\124\2\0"+
    "\5\124\60\0\61\124\30\0\64\124\14\0\106\124\12\0"+
    "\12\125\6\0\30\124\3\0\1\124\1\0\3\124\12\125"+
    "\44\124\2\0\44\124\14\0\35\124\3\0\101\124\16\0"+
    "\1\124\12\125\6\0\20\124\12\125\5\124\1\0\67\124"+
    "\11\0\16\124\2\0\12\125\6\0\27\124\3\0\111\124"+
    "\30\0\3\124\2\0\20\124\2\0\5\124\12\0\6\124"+
    "\2\0\6\124\2\0\6\124\11\0\7\124\1\0\7\124"+
    "\1\0\53\124\1\0\14\124\10\0\173\124\1\0\2\124"+
    "\2\0\12\125\6\0\244\124\14\0\27\124\4\0\61\124"+
    "\4\0\156\124\2\0\152\124\46\0\7\124\14\0\5\124"+
    "\5\0\14\124\1\0\15\124\1\0\5\124\1\0\1\124"+
    "\1\0\2\124\1\0\2\124\1\0\154\124\41\0\153\124"+
    "\22\0\100\124\2\0\66\124\50\0\14\124\4\0\20\124"+
    "\20\0\20\124\3\0\2\124\30\0\3\124\40\0\5\124"+
    "\1\0\207\124\23\0\12\125\7\0\32\124\4\0\1\124"+
    "\1\0\32\124\13\0\131\124\3\0\6\124\2\0\6\124"+
    "\2\0\6\124\2\0\3\124\43\0\14\124\1\0\32\124"+
    "\1\0\23\124\1\0\2\124\1\0\17\124\2\0\16\124"+
    "\42\0\173\124\105\0\65\124\210\0\1\124\202\0\35\124"+
    "\3\0\61\124\17\0\1\124\37\0\40\124\15\0\36\124"+
    "\5\0\53\124\5\0\36\124\2\0\44\124\4\0\10\124"+
    "\1\0\5\124\52\0\236\124\2\0\12\125\6\0\44\124"+
    "\4\0\44\124\4\0\50\124\10\0\64\124\234\0\67\124"+
    "\11\0\26\124\12\0\10\124\230\0\6\124\2\0\1\124"+
    "\1\0\54\124\1\0\2\124\3\0\1\124\2\0\27\124"+
    "\12\0\27\124\11\0\37\124\101\0\23\124\1\0\2\124"+
    "\12\0\26\124\12\0\32\124\106\0\70\124\6\0\2\124"+
    "\100\0\4\124\1\0\2\124\5\0\10\124\1\0\3\124"+
    "\1\0\35\124\2\0\3\124\4\0\1\124\40\0\35\124"+
    "\3\0\35\124\43\0\10\124\1\0\36\124\31\0\66\124"+
    "\12\0\26\124\12\0\23\124\15\0\22\124\156\0\111\124"+
    "\67\0\63\124\15\0\63\124\15\0\50\124\10\0\12\125"+
    "\306\0\35\124\12\0\1\124\10\0\41\124\217\0\27\124"+
    "\11\0\107\124\37\0\12\125\17\0\74\124\25\0\31\124"+
    "\7\0\12\125\6\0\65\124\1\0\12\125\4\0\3\124"+
    "\11\0\44\124\2\0\1\124\11\0\105\124\4\0\4\124"+
    "\3\0\12\125\1\124\1\0\1\124\43\0\22\124\1\0"+
    "\45\124\6\0\1\124\101\0\7\124\1\0\1\124\1\0"+
    "\4\124\1\0\17\124\1\0\12\124\7\0\73\124\5\0"+
    "\12\125\6\0\4\124\1\0\10\124\2\0\2\124\2\0"+
    "\26\124\1\0\7\124\1\0\2\124\1\0\5\124\1\0"+
    "\12\124\2\0\2\124\2\0\3\124\2\0\1\124\6\0"+
    "\1\124\5\0\7\124\2\0\7\124\3\0\5\124\213\0"+
    "\113\124\5\0\12\125\4\0\2\124\40\0\106\124\1\0"+
    "\1\124\10\0\12\125\246\0\66\124\2\0\11\124\27\0"+
    "\6\124\42\0\101\124\3\0\1\124\13\0\12\125\46\0"+
    "\71\124\7\0\12\125\66\0\33\124\2\0\17\124\4\0"+
    "\12\125\306\0\73\124\145\0\100\124\12\125\25\0\1\124"+
    "\240\0\10\124\2\0\56\124\2\0\10\124\1\0\2\124"+
    "\33\0\77\124\10\0\1\124\10\0\112\124\3\0\1\124"+
    "\42\0\71\124\7\0\11\124\1\0\55\124\1\0\11\124"+
    "\17\0\12\125\30\0\36\124\2\0\26\124\1\0\16\124"+
    "\111\0\7\124\1\0\2\124\1\0\54\124\3\0\1\124"+
    "\1\0\2\124\1\0\11\124\10\0\12\125\6\0\6\124"+
    "\1\0\2\124\1\0\45\124\1\0\2\124\1\0\6\124"+
    "\7\0\12\125\u0136\0\27\124\11\0\232\124\146\0\157\124"+
    "\21\0\304\124\274\0\57\124\321\0\107\124\271\0\71\124"+
    "\7\0\37\124\1\0\12\125\146\0\36\124\2\0\5\124"+
    "\13\0\67\124\11\0\4\124\14\0\12\125\11\0\25\124"+
    "\5\0\23\124\260\0\100\124\200\0\113\124\4\0\71\124"+
    "\7\0\21\124\100\0\2\124\1\0\1\124\34\0\370\124"+
    "\10\0\363\124\15\0\37\124\61\0\3\124\21\0\4\124"+
    "\10\0\u018c\124\4\0\153\124\5\0\15\124\3\0\11\124"+
    "\7\0\12\124\3\0\2\124\306\0\5\124\3\0\6\124"+
    "\10\0\10\124\2\0\7\124\36\0\4\124\224\0\3\124"+
    "\273\0\125\124\1\0\107\124\1\0\2\124\2\0\1\124"+
    "\2\0\2\124\2\0\4\124\1\0\14\124\1\0\1\124"+
    "\1\0\7\124\1\0\101\124\1\0\4\124\2\0\10\124"+
    "\1\0\7\124\1\0\34\124\1\0\4\124\1\0\5\124"+
    "\1\0\1\124\3\0\7\124\1\0\u0154\124\2\0\31\124"+
    "\1\0\31\124\1\0\37\124\1\0\31\124\1\0\37\124"+
    "\1\0\31\124\1\0\37\124\1\0\31\124\1\0\37\124"+
    "\1\0\31\124\1\0\10\124\2\0\62\125\67\124\4\0"+
    "\62\124\10\0\1\124\16\0\1\124\26\0\5\124\1\0"+
    "\17\124\120\0\7\124\1\0\21\124\2\0\7\124\1\0"+
    "\2\124\1\0\5\124\325\0\55\124\3\0\16\124\2\0"+
    "\12\125\4\0\1\124\u0171\0\60\124\12\125\6\0\305\124"+
    "\13\0\7\124\51\0\114\124\4\0\12\125\246\0\4\124"+
    "\1\0\33\124\1\0\2\124\1\0\1\124\2\0\1\124"+
    "\1\0\12\124\1\0\4\124\1\0\1\124\1\0\1\124"+
    "\6\0\1\124\4\0\1\124\1\0\1\124\1\0\1\124"+
    "\1\0\3\124\1\0\2\124\1\0\1\124\2\0\1\124"+
    "\1\0\1\124\1\0\1\124\1\0\1\124\1\0\1\124"+
    "\1\0\2\124\1\0\1\124\2\0\4\124\1\0\7\124"+
    "\1\0\4\124\1\0\4\124\1\0\1\124\1\0\12\124"+
    "\1\0\21\124\5\0\3\124\1\0\5\124\1\0\21\124"+
    "\164\0\32\124\6\0\32\124\6\0\32\124\166\0\327\124"+
    "\51\0\65\124\13\0\336\124\2\0\u0182\124\16\0\u0131\124"+
    "\37\0\36\124\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\3\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\1\11\22\1\23\1\24\15\22\1\25"+
    "\1\1\1\26\1\2\1\27\1\0\1\30\3\4\1\0"+
    "\30\4\1\31\1\4\1\0\1\32\1\33\1\34\1\0"+
    "\25\22\1\35\12\22\1\36\1\30\1\4\2\37\1\40"+
    "\1\4\1\0\36\4\1\41\2\0\1\22\1\42\10\22"+
    "\1\43\10\22\1\44\16\22\1\45\5\22\1\4\1\46"+
    "\1\0\36\4\2\0\3\22\1\47\3\22\1\50\12\22"+
    "\1\51\1\52\7\22\1\53\2\22\1\54\4\22\1\55"+
    "\1\22\1\56\1\22\1\57\2\22\1\60\1\61\1\22"+
    "\1\4\1\62\1\63\7\4\1\64\11\4\1\65\4\4"+
    "\2\0\4\22\1\66\2\22\1\67\17\22\1\70\1\71"+
    "\1\22\1\72\1\0\4\22\1\0\1\73\13\4\1\74"+
    "\1\4\1\0\1\4\1\75\1\4\2\0\2\22\1\76"+
    "\1\22\1\77\1\100\1\22\1\101\3\22\1\102\12\22"+
    "\2\0\1\103\2\22\1\104\1\0\1\4\1\105\2\4"+
    "\1\0\1\4\1\0\1\2\1\106\3\22\1\107\4\22"+
    "\1\110\3\22\1\111\1\112\1\22\1\113\1\114\2\0"+
    "\1\115\1\116\1\0\2\4\2\0\2\22\1\117\1\120"+
    "\1\22\1\121\5\22\5\0\10\22\1\0\1\122\3\0"+
    "\1\123\2\22\1\124\1\22\1\125\1\22\1\126\1\0"+
    "\1\127\2\0\1\22\1\130\2\22\1\131\1\0\1\105"+
    "\1\22\1\132\1\22\1\133\1\22\1\134\1\0\4\22"+
    "\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204"+
    "\0\126\0\126\0\126\0\126\0\126\0\126\0\126\0\u025a"+
    "\0\u02b0\0\u01ae\0\126\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e"+
    "\0\u04b4\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e"+
    "\0\126\0\126\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912"+
    "\0\u0968\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u01ae"+
    "\0\u0bc2\0\u01ae\0\u0c18\0\126\0\u0c6e\0\u01ae\0\u0cc4\0\u0d1a"+
    "\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca"+
    "\0\u1020\0\u1076\0\u10cc\0\u1122\0\u1178\0\u11ce\0\u1224\0\u127a"+
    "\0\u12d0\0\u1326\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a"+
    "\0\u1580\0\u15d6\0\u01ae\0\u162c\0\u1682\0\126\0\126\0\126"+
    "\0\u16d8\0\u172e\0\u1784\0\u17da\0\u1830\0\u1886\0\u18dc\0\u1932"+
    "\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2"+
    "\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a\0\u1d90\0\u1de6\0\u04b4\0\u1e3c"+
    "\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea\0\u2040\0\u2096\0\u20ec"+
    "\0\u2142\0\126\0\126\0\u2198\0\u01ae\0\126\0\u01ae\0\u21ee"+
    "\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448\0\u249e"+
    "\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e"+
    "\0\u27a4\0\u27fa\0\u2850\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u2aaa\0\u2b00\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u162c"+
    "\0\u2cae\0\u2d04\0\u2d5a\0\u04b4\0\u2db0\0\u2e06\0\u2e5c\0\u2eb2"+
    "\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u04b4\0\u3060\0\u30b6\0\u310c"+
    "\0\u3162\0\u31b8\0\u320e\0\u3264\0\u32ba\0\u04b4\0\u3310\0\u3366"+
    "\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a\0\u35c0\0\u3616"+
    "\0\u366c\0\u36c2\0\u3718\0\u376e\0\u04b4\0\u37c4\0\u381a\0\u3870"+
    "\0\u38c6\0\u391c\0\u3972\0\u01ae\0\u39c8\0\u3a1e\0\u3a74\0\u3aca"+
    "\0\u3b20\0\u3b76\0\u3bcc\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a"+
    "\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u402a"+
    "\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da"+
    "\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488\0\u44de\0\u4534\0\u458a"+
    "\0\u04b4\0\u45e0\0\u4636\0\u468c\0\u04b4\0\u46e2\0\u4738\0\u478e"+
    "\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8\0\u04b4"+
    "\0\u04b4\0\u4a3e\0\u4a94\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42"+
    "\0\u04b4\0\u4c98\0\u4cee\0\u04b4\0\u4d44\0\u4d9a\0\u4df0\0\u4e46"+
    "\0\u04b4\0\u4e9c\0\u04b4\0\u4ef2\0\u04b4\0\u4f48\0\u4f9e\0\u04b4"+
    "\0\u04b4\0\u4ff4\0\u504a\0\126\0\u01ae\0\u50a0\0\u50f6\0\u514c"+
    "\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\u01ae\0\u52fa\0\u5350\0\u53a6"+
    "\0\u53fc\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\u01ae\0\u5600"+
    "\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae\0\u5804\0\u585a\0\u58b0"+
    "\0\u5906\0\u04b4\0\u595c\0\u59b2\0\u04b4\0\u5a08\0\u5a5e\0\u5ab4"+
    "\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u5cb8\0\u5d0e\0\u5d64"+
    "\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u04b4\0\u04b4\0\u5f12\0\u04b4"+
    "\0\u5f68\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u6116\0\u04b4\0\u616c"+
    "\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c"+
    "\0\u6472\0\u64c8\0\u01ae\0\u651e\0\u6574\0\u65ca\0\u01ae\0\u6620"+
    "\0\u6676\0\u66cc\0\u6722\0\u6778\0\u04b4\0\u67ce\0\u04b4\0\u04b4"+
    "\0\u6824\0\u04b4\0\u687a\0\u68d0\0\u6926\0\u04b4\0\u697c\0\u69d2"+
    "\0\u6a28\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82"+
    "\0\u6cd8\0\u6d2e\0\u04b4\0\u6d84\0\u6dda\0\u04b4\0\u6e30\0\u6e86"+
    "\0\u01ae\0\u6edc\0\u6f32\0\u6f88\0\u6fde\0\u7034\0\u4432\0\126"+
    "\0\u708a\0\u70e0\0\u7136\0\u04b4\0\u718c\0\u71e2\0\u7238\0\u728e"+
    "\0\u04b4\0\u72e4\0\u733a\0\u7390\0\u04b4\0\u04b4\0\u73e6\0\u04b4"+
    "\0\u04b4\0\u743c\0\u7492\0\u04b4\0\u04b4\0\u74e8\0\u753e\0\u7594"+
    "\0\u75ea\0\u7640\0\u7696\0\u76ec\0\u04b4\0\u04b4\0\u7742\0\u04b4"+
    "\0\u7798\0\u77ee\0\u7844\0\u789a\0\u78f0\0\u7946\0\u799c\0\u79f2"+
    "\0\u7a48\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2"+
    "\0\u7cf8\0\u7d4e\0\u7da4\0\126\0\u7dfa\0\u7e50\0\u7ea6\0\u04b4"+
    "\0\u7efc\0\u7f52\0\u04b4\0\u7fa8\0\u04b4\0\u7ffe\0\u04b4\0\u8054"+
    "\0\126\0\u80aa\0\u8100\0\u8156\0\u04b4\0\u81ac\0\u8202\0\126"+
    "\0\u8258\0\126\0\u82ae\0\u04b4\0\u8304\0\u835a\0\u83b0\0\u04b4"+
    "\0\u835a\0\u8406\0\u845c\0\u84b2\0\u8508\0\u04b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\3\7\1\10"+
    "\1\7\1\11\1\12\1\13\1\14\1\15\1\16\1\7"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\6\31\1\35"+
    "\1\31\1\36\1\37\1\31\1\40\6\31\1\41\1\42"+
    "\1\7\1\43\1\44\1\45\1\46\1\31\1\47\1\31"+
    "\1\50\1\51\4\31\1\52\1\53\2\31\1\54\1\55"+
    "\1\56\2\31\1\57\3\31\1\60\1\61\1\62\2\7"+
    "\130\0\1\3\130\0\1\63\24\0\1\64\73\0\4\65"+
    "\1\0\1\65\1\66\1\67\1\70\3\71\5\65\1\72"+
    "\1\71\1\65\1\73\2\74\1\71\5\65\1\75\1\76"+
    "\1\77\3\76\1\100\15\76\1\101\2\76\2\65\1\76"+
    "\1\102\1\103\1\104\2\76\1\105\1\106\1\107\1\76"+
    "\1\110\1\76\1\111\1\112\1\113\1\114\1\115\1\76"+
    "\1\116\1\117\1\120\2\76\1\121\1\76\1\122\1\76"+
    "\1\71\1\65\1\71\2\76\6\0\6\7\6\0\1\7"+
    "\1\0\4\7\5\0\27\7\2\0\34\7\1\0\3\7"+
    "\6\0\4\7\1\123\1\7\6\0\1\7\1\0\4\7"+
    "\5\0\27\7\2\0\34\7\1\0\3\7\6\0\6\7"+
    "\6\0\1\124\1\0\4\7\5\0\27\7\2\0\34\7"+
    "\1\0\3\7\6\0\6\7\6\0\1\124\1\0\3\21"+
    "\1\7\5\0\27\7\2\0\34\7\1\0\3\7\5\0"+
    "\1\125\24\0\1\126\125\0\1\127\125\0\1\130\170\0"+
    "\1\131\36\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\13\31\1\132\5\31\1\133\5\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\1\134\26\31\2\0\1\135\32\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\4\31\1\136\22\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\25\31\1\137\1\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\4\31\1\140"+
    "\22\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\23\31"+
    "\1\141\3\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\15\31\1\142\11\31\2\0\33\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\4\31\1\143\22\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\14\31\1\144\16\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\1\31\1\145\15\31"+
    "\1\146\13\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\1\135\7\31\1\147\3\31\1\150\2\31\1\151\13\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\5\31\1\152"+
    "\25\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\1\31"+
    "\1\153\15\31\1\154\13\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\5\31\1\155\14\31\1\156\10\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\4\31\1\157\11\31"+
    "\1\160\14\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\1\31\1\161\31\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\16\31\1\162\14\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\17\31\1\163\13\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\22\31\1\164\1\31\1\165\6\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\5\31\1\166"+
    "\14\31\1\167\6\31\1\170\1\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\11\31\1\171\21\31\1\7\1\0"+
    "\1\7\2\31\122\0\1\172\3\0\2\63\1\3\1\63"+
    "\1\4\121\63\4\65\1\0\1\65\1\173\123\65\1\0"+
    "\1\65\1\66\5\71\6\65\1\71\1\65\3\174\1\71"+
    "\5\65\6\174\21\71\2\65\1\71\6\174\25\71\1\65"+
    "\3\71\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\5\65\1\72\1\71\1\65\3\70\1\71\5\65\27\70"+
    "\2\65\33\70\1\71\1\65\1\71\2\70\4\65\1\0"+
    "\1\65\1\66\5\71\6\65\1\71\1\65\4\71\5\65"+
    "\27\71\2\65\34\71\1\65\3\71\4\65\1\0\1\65"+
    "\1\176\1\65\1\72\10\65\1\72\2\65\3\72\6\65"+
    "\27\72\2\65\33\72\3\65\2\72\4\65\1\0\1\65"+
    "\1\177\1\71\1\70\1\200\2\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\20\76"+
    "\1\202\12\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\177\1\71\1\70\1\200\2\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\74\1\71\5\65\27\76\2\65"+
    "\20\76\1\202\12\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\22\76\1\203\10\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\33\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\17\76\1\204"+
    "\13\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\5\76\1\205"+
    "\25\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\5\76\1\206"+
    "\25\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\21\76\1\207"+
    "\11\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\14\76\1\210"+
    "\16\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\5\76\1\211"+
    "\2\76\1\212\6\76\1\213\13\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\25\76\1\214\5\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\22\76\1\215\10\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\24\76\1\216\6\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\25\76\1\217\5\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\5\76\1\220\3\76\1\221\21\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\1\76\1\222\31\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\1\76\1\223\23\76\1\224"+
    "\5\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\14\76\1\225"+
    "\16\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\25\76\1\226"+
    "\5\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\1\76\1\227"+
    "\3\76\1\230\3\76\1\231\5\76\1\232\13\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\1\76\1\233\7\76\1\234"+
    "\21\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\5\76\1\235"+
    "\25\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\10\76\1\236"+
    "\22\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\5\76\1\237"+
    "\25\76\1\71\1\65\1\71\2\76\6\0\6\7\6\0"+
    "\1\7\1\0\3\240\1\7\5\0\27\7\2\0\34\7"+
    "\1\0\2\7\1\240\21\0\1\241\206\0\1\242\31\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\4\31"+
    "\1\243\22\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\2\31\1\244\24\31\2\0\33\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\20\31\1\245\6\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\1\31\1\246\1\31\1\247\2\31\1\250"+
    "\1\251\1\252\2\31\1\253\2\31\1\254\1\255\1\31"+
    "\1\256\1\257\4\31\2\0\2\31\1\246\1\31\1\247"+
    "\2\31\1\250\1\251\1\252\2\31\1\253\2\31\1\254"+
    "\1\255\2\31\1\256\1\257\6\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\21\31\1\260\5\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\10\31\1\261\16\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\22\31\1\262\4\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\14\31\1\263\12\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\1\264"+
    "\32\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\24\31\1\265\2\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\24\31\1\266\6\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\3\31\1\267\27\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\17\31\1\270\13\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\1\31\1\271\31\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\1\31\1\272\31\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\14\31\1\273\16\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\3\31\1\274"+
    "\27\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\14\31"+
    "\1\275\16\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\16\31\1\276\14\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\11\31\1\277\21\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\5\31\1\300\25\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\24\31\1\301\6\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\15\31\1\302\15\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\3\31\1\303\27\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\27\31\1\304"+
    "\3\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\3\31"+
    "\1\305\27\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\22\31\1\306\10\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\30\31\1\307\2\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\25\31\1\310\5\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\20\31\1\311\12\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\4\31\1\312\26\31\1\7"+
    "\1\0\1\7\2\31\4\65\1\0\1\65\1\66\5\71"+
    "\6\65\1\71\1\65\3\313\1\71\5\65\6\313\21\71"+
    "\2\65\1\71\6\313\25\71\1\65\3\71\4\65\1\0"+
    "\1\65\1\314\5\71\6\65\1\71\1\65\4\71\5\65"+
    "\27\71\2\65\34\71\1\65\3\71\4\65\1\0\1\65"+
    "\1\173\6\65\1\315\114\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\30\76\1\316\2\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\11\76\1\317\21\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\25\76\1\320\5\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\16\76\1\321\14\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\22\76\1\322\10\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\25\76\1\323\5\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\1\76\1\324\23\76\1\325"+
    "\5\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\16\76\1\326"+
    "\14\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\5\76\1\327"+
    "\25\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\14\76\1\330"+
    "\16\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\3\76\1\331"+
    "\27\76\1\71\1\65\1\71\2\76\4\65\1\0\1\65"+
    "\1\175\1\71\1\70\3\71\1\201\4\65\1\72\1\71"+
    "\1\65\3\76\1\71\5\65\27\76\2\65\1\76\1\332"+
    "\3\76\1\333\25\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\24\76\1\334\6\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\23\76\1\335\7\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\6\76\1\336\24\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\15\76\1\325\15\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\22\76\1\337\10\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\26\76\1\332\4\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\15\76\1\340\15\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\11\76\1\341\21\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\22\76\1\342\10\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\4\76\1\343\26\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\4\76\1\344\26\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\7\76\1\345\23\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\27\76\1\330\3\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\16\76\1\346\14\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\14\76\1\347\16\76\1\71\1\65\1\71\2\76\4\65"+
    "\1\0\1\65\1\175\1\71\1\70\3\71\1\201\4\65"+
    "\1\72\1\71\1\65\3\76\1\71\5\65\27\76\2\65"+
    "\1\76\1\350\26\76\1\351\2\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\11\76\1\352\21\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\14\76\1\353\16\76\1\71\1\65\1\71"+
    "\2\76\21\0\1\354\211\0\1\355\26\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\20\31\1\356\6\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\1\357\26\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\16\31\1\360"+
    "\1\31\1\361\2\31\1\362\3\31\2\0\17\31\1\360"+
    "\2\31\1\361\2\31\1\362\5\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\10\31\1\363\16\31\2\0\11\31\1\363\21\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\2\31\1\364\24\31\2\0"+
    "\3\31\1\364\27\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\1\31\1\365\1\31\1\7"+
    "\5\0\4\31\1\366\22\31\2\0\5\31\1\366\25\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\14\31\1\367\1\370\11\31"+
    "\2\0\15\31\1\367\1\370\14\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\10\31\1\371\16\31\2\0\11\31\1\371\21\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\17\31\1\372\7\31\2\0"+
    "\20\31\1\372\12\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\2\31"+
    "\1\373\1\31\1\374\12\31\1\375\7\31\2\0\3\31"+
    "\1\373\1\31\1\374\12\31\1\375\12\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\4\31\1\376\3\31\1\377\16\31\2\0"+
    "\5\31\1\376\3\31\1\377\21\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\2\31\1\u0100\24\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\22\31\1\u0101\4\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\10\31\1\u0102\6\31\1\u0103\7\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\1\u0104\32\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\13\31\1\u0105"+
    "\13\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\4\31"+
    "\1\u0106\22\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\13\31\1\u0107\17\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\14\31\1\u0108\16\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\22\31\1\u0109\10\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\23\31\1\u010a\7\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\17\31\1\u010b"+
    "\3\31\1\u010c\7\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\11\31\1\u010d\21\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\23\31\1\u010e\7\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\24\31\1\u010f\6\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\7\31\1\u0110\23\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\6\31\1\u0111\24\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\5\31\1\u0112"+
    "\25\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\5\31"+
    "\1\u0113\25\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\14\31\1\u0114\16\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\23\31\1\u0115\7\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\11\31\1\u0116\21\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\24\31\1\u0117\6\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\5\31\1\u0118\25\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\5\31\1\u0119\25\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\24\31\1\u011a"+
    "\6\31\1\7\1\0\1\7\2\31\4\65\1\0\1\65"+
    "\1\66\5\71\6\65\1\71\1\65\3\u011b\1\71\5\65"+
    "\6\u011b\21\71\2\65\1\71\6\u011b\25\71\1\65\3\71"+
    "\4\65\1\0\1\65\1\u011c\123\65\1\0\1\65\1\u011d"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\33\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\1\76\1\u011e\31\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\22\76\1\u011f\10\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\5\76\1\u0120\25\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\4\76\1\u0121\26\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\1\76\1\344\31\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\3\76\1\u0122\27\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\5\76\1\344\25\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\24\76\1\u0123\6\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\3\76\1\u0124\27\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\u0125\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\33\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\10\76\1\u0126\22\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\31\76\1\344\1\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\5\76\1\u0127\25\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\20\76\1\u0128\12\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\24\76\1\u0129\6\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\24\76\1\u012a\6\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\17\76\1\u012b\13\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\2\76\1\u012c\30\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\26\76\1\325\4\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\20\76\1\u012d\12\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\11\76\1\u012e\21\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\u012f\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\33\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\10\76"+
    "\1\336\22\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\23\76"+
    "\1\u0130\7\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\26\76"+
    "\1\u0131\4\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\14\76"+
    "\1\344\16\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\24\76"+
    "\1\u0132\6\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\24\76"+
    "\1\325\6\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\14\76"+
    "\1\u0133\16\76\1\71\1\65\1\71\2\76\21\354\1\u0134"+
    "\104\354\70\0\1\u0135\43\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\22\31\1\u0136\4\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\2\31\1\u0137\24\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\3\31\1\u0138\23\31"+
    "\2\0\4\31\1\u0138\26\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\22\31\1\u0139\4\31\2\0\24\31\1\u0139\6\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\24\31\1\u013a\2\31\2\0\26\31"+
    "\1\u013a\4\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\10\31\1\u013b"+
    "\16\31\2\0\11\31\1\u013b\21\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\1\u013c\26\31\2\0\1\31\1\u013c\31\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\6\31\1\u013d\20\31\2\0\7\31"+
    "\1\u013d\23\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\17\31\1\u013e"+
    "\7\31\2\0\20\31\1\u013e\12\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\15\31\1\u013f\11\31\2\0\16\31\1\u013f\14\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\22\31\1\u0140\4\31\2\0"+
    "\24\31\1\u0140\6\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\20\31"+
    "\1\u0141\6\31\2\0\22\31\1\u0141\10\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\13\31\1\u0142\13\31\2\0\14\31\1\u0142"+
    "\16\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\1\u0143\26\31\2\0"+
    "\1\31\1\u0143\31\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\25\31"+
    "\1\u0144\1\31\2\0\30\31\1\u0144\2\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\22\31\1\u0145\4\31\2\0\24\31\1\u0145"+
    "\6\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\14\31\1\u0146\12\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\1\u0147\26\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\1\u0148\26\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\16\31\1\u0149"+
    "\10\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\20\31"+
    "\1\u014a\6\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\7\31\1\u014b\23\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\5\31\1\u014c\25\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\23\31\1\u014d\7\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\22\31\1\u014e\10\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\15\31\1\u014f"+
    "\15\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\5\31"+
    "\1\u0150\25\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\5\0\1\u0151\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\10\31\1\u0152\22\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\7\31\1\u0153\23\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\11\31\1\u0154\21\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\27\31\2\0\16\31\1\u0155\14\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\5\0\1\u0156\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\10\31\1\u0157\22\31\1\7"+
    "\1\0\1\7\2\31\4\65\1\0\1\65\1\u012f\5\71"+
    "\6\65\1\71\1\65\3\u0158\1\71\5\65\6\u0158\21\71"+
    "\2\65\1\71\6\u0158\25\71\1\65\3\71\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\14\76"+
    "\1\u0159\16\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\11\76"+
    "\1\u015a\21\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\26\76"+
    "\1\u015b\4\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\1\76"+
    "\1\u015c\31\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\13\76"+
    "\1\344\17\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\5\76"+
    "\1\u015d\25\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\13\76"+
    "\1\u015e\17\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\23\76"+
    "\1\u015f\7\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\16\76"+
    "\1\344\14\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\u0160\5\65\27\76\2\65\23\76"+
    "\1\u0161\7\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\175\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\11\76"+
    "\1\u0162\21\76\1\71\1\65\1\71\2\76\4\65\1\0"+
    "\1\65\1\u0163\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\33\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\17\76\1\u0127\13\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\5\76\1\u0164\25\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\14\76\1\325\16\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\17\76\1\u0132\13\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\u0165\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\33\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\5\76\1\u0166\25\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\u0167\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\33\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\17\76\1\u0168\13\76\1\71\1\65\1\71\2\76"+
    "\21\354\1\u0169\104\354\67\0\1\u016a\44\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\1\u016b"+
    "\32\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\22\31\1\u016c\4\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\26\31\1\u016d"+
    "\2\0\31\31\1\u016d\1\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\22\31\1\u016e\4\31\2\0\24\31\1\u016e\6\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\2\31\1\u016f\24\31\2\0\3\31"+
    "\1\u016f\27\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\3\31\1\u0170"+
    "\23\31\2\0\4\31\1\u0170\26\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\23\31\1\u0171\3\31\2\0\25\31\1\u0171\5\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\12\31\1\u0172\14\31\2\0"+
    "\13\31\1\u0172\17\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\10\31"+
    "\1\u0173\16\31\2\0\11\31\1\u0173\21\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\10\31\1\u0174\16\31\2\0\11\31\1\u0174"+
    "\21\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\4\31\1\u0175\22\31"+
    "\2\0\5\31\1\u0175\25\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\14\31\1\u0176\12\31\2\0\15\31\1\u0176\15\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\22\31\1\u0177\4\31\2\0\24\31"+
    "\1\u0177\6\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\13\31\1\u0178"+
    "\13\31\2\0\14\31\1\u0178\16\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\17\31\1\u0179\7\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\20\31\1\u017a\6\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\13\31\1\u017b\13\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\1\u017c\26\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\21\31\1\u017d\5\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\22\31"+
    "\1\u017e\10\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\1\31\1\u017f\31\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\1\31\1\u0180\31\31\1\7\1\0\1\7\2\31"+
    "\74\0\1\u0181\14\0\1\u0182\22\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\24\31\1\u0183"+
    "\6\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\5\31"+
    "\1\u0184\25\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\27\31\2\0"+
    "\3\31\1\u0185\27\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\7\31\1\u0186\23\31\1\7\1\0\1\7\2\31"+
    "\67\0\1\u0187\36\0\4\65\1\0\1\65\1\66\5\71"+
    "\6\65\1\71\1\65\3\u0188\1\71\5\65\6\u0188\21\71"+
    "\2\65\1\71\6\u0188\25\71\1\65\3\71\4\65\1\0"+
    "\1\65\1\u0189\1\71\1\70\3\71\1\201\4\65\1\72"+
    "\1\71\1\65\3\76\1\71\5\65\27\76\2\65\33\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\5\76\1\u018a\25\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\1\76\1\u0159\31\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\16\76\1\u015b\14\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\22\76\1\u012a\10\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\2\76\1\u018b\30\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\11\76\1\323\21\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\66"+
    "\5\71\6\65\1\71\1\u018c\4\71\5\65\27\71\2\65"+
    "\34\71\1\65\3\71\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\u0160\5\65\27\76\2\65\33\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\6\76\1\u018d\24\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\175\1\71\1\70\3\71"+
    "\1\201\4\65\1\72\1\71\1\65\3\76\1\71\5\65"+
    "\27\76\2\65\22\76\1\u0132\10\76\1\71\1\65\1\71"+
    "\2\76\4\65\1\0\1\65\1\176\1\65\1\72\10\65"+
    "\1\72\2\65\3\72\6\65\27\72\2\65\23\72\1\u018e"+
    "\7\72\3\65\2\72\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\22\76\1\344\10\76\1\71"+
    "\1\65\1\71\2\76\4\65\1\0\1\65\1\175\1\71"+
    "\1\70\3\71\1\201\4\65\1\72\1\71\1\65\3\76"+
    "\1\71\5\65\27\76\2\65\27\76\1\344\3\76\1\71"+
    "\1\65\1\71\2\76\21\354\1\u0169\11\354\1\u018f\72\354"+
    "\102\0\1\u0190\31\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\10\31\1\u0191\16\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\4\31\1\u0192\22\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\16\31\1\u0193\10\31\2\0"+
    "\17\31\1\u0193\13\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\22\31"+
    "\1\u0194\4\31\2\0\24\31\1\u0194\6\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\16\31\1\u0195\10\31\2\0\17\31\1\u0195"+
    "\13\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\17\31\1\u0196\7\31"+
    "\2\0\20\31\1\u0196\12\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\2\31\1\u0197\24\31\2\0\3\31\1\u0197\27\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\1\u0198\26\31\2\0\1\31\1\u0198"+
    "\31\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\4\31\1\u0199\22\31"+
    "\2\0\5\31\1\u0199\25\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\1\u019a\26\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\27\31\2\0\1\u019b\32\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\4\31\1\u019c\22\31\2\0\33\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\3\31\1\u019d\23\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\4\31\1\u019e\22\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\17\31\1\u019f\13\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\27\31\2\0\16\31\1\u01a0"+
    "\14\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\14\31"+
    "\1\u01a1\16\31\1\7\1\0\1\7\2\31\67\0\1\u01a2"+
    "\135\0\1\u01a3\34\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\27\31\2\0\22\31\1\u01a4\10\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\13\31\1\u01a5\17\31"+
    "\1\7\1\0\1\7\2\31\102\0\1\u01a6\23\0\4\65"+
    "\1\0\1\65\1\66\5\71\6\65\1\71\1\65\3\u01a7"+
    "\1\71\5\65\6\u01a7\21\71\2\65\1\71\6\u01a7\25\71"+
    "\1\65\3\71\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\22\76\1\u0159\10\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\175\1\71\1\70"+
    "\3\71\1\201\4\65\1\72\1\71\1\65\3\76\1\71"+
    "\5\65\27\76\2\65\17\76\1\u01a8\13\76\1\71\1\65"+
    "\1\71\2\76\4\65\1\0\1\65\1\173\14\65\1\u01a9"+
    "\106\65\1\0\1\65\1\175\1\71\1\70\3\71\1\201"+
    "\4\65\1\72\1\71\1\65\3\76\1\71\5\65\27\76"+
    "\2\65\31\76\1\u012a\1\76\1\71\1\65\1\71\2\76"+
    "\4\65\1\0\1\65\1\176\1\65\1\72\10\65\1\72"+
    "\2\65\3\72\6\65\27\72\2\65\5\72\1\u01aa\25\72"+
    "\3\65\2\72\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\15\31\1\u01ab\11\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\20\31\1\u01ac\6\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\15\31\1\u01ad\11\31\2\0"+
    "\16\31\1\u01ad\14\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\15\31"+
    "\1\u01ae\11\31\2\0\16\31\1\u01ae\14\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\22\31\1\u01af\4\31\2\0\24\31\1\u01af"+
    "\6\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\22\31\1\u01b0\4\31"+
    "\2\0\24\31\1\u01b0\6\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\20\31\1\u01b1\6\31\2\0\22\31\1\u01b1\10\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\20\31\1\u01b2\6\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\15\31\1\u01b3\11\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\1\u01b4\26\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\25\31"+
    "\1\u01b5\5\31\1\7\1\0\1\7\2\31\103\0\1\u01b6"+
    "\142\0\1\u01b7\104\0\1\u01b8\26\0\4\65\1\0\1\65"+
    "\1\u012f\5\71\6\65\1\71\1\65\4\71\5\65\27\71"+
    "\2\65\34\71\1\65\3\71\4\65\1\0\1\65\1\175"+
    "\1\71\1\70\3\71\1\201\4\65\1\72\1\71\1\65"+
    "\3\76\1\71\5\65\27\76\2\65\30\76\1\u0132\2\76"+
    "\1\71\1\65\1\71\2\76\4\65\1\0\1\65\1\173"+
    "\12\65\2\u01b9\1\65\3\u01b9\6\65\27\u01b9\2\65\33\u01b9"+
    "\3\65\2\u01b9\4\65\1\0\1\65\1\176\1\65\1\72"+
    "\10\65\1\72\2\65\3\72\6\65\27\72\2\65\22\72"+
    "\1\u01ba\10\72\3\65\2\72\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\5\31\1\u01bb\21\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\1\u01bc"+
    "\32\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\10\31\1\u01bd\16\31"+
    "\2\0\11\31\1\u01bd\21\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\4\31\1\u01be\22\31\2\0\5\31\1\u01be\25\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\27\31\2\0\1\u01bf\32\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\23\31\1\u01c0\3\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\22\31\1\u01c1\4\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\27\31\2\0\16\31"+
    "\1\u01c2\14\31\1\7\1\0\1\7\2\31\77\0\1\u01c3"+
    "\121\0\1\u01c4\127\0\1\u01c5\30\0\4\65\1\0\1\65"+
    "\1\173\12\65\1\u01b9\1\u01c6\1\65\3\u01b9\6\65\27\u01b9"+
    "\2\65\33\u01b9\3\65\2\u01b9\4\65\1\0\1\65\1\176"+
    "\1\65\1\72\10\65\1\72\2\65\3\72\6\65\27\72"+
    "\2\65\11\72\1\u01c7\21\72\3\65\2\72\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\16\31\1\u01c8"+
    "\10\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\1\u01c9"+
    "\26\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\15\31"+
    "\1\u01ca\11\31\2\0\16\31\1\u01ca\14\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\1\u01cb\26\31\2\0\1\31\1\u01cb\31\31"+
    "\1\7\1\0\1\7\2\31\6\0\6\7\6\0\1\7"+
    "\1\0\3\31\1\7\5\0\15\31\1\u01cc\11\31\2\0"+
    "\33\31\1\7\1\0\1\7\2\31\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\14\31\1\u01cd\12\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\16\31\1\u01ce"+
    "\10\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\27\31"+
    "\2\0\4\31\1\u01cf\26\31\1\7\1\0\1\7\2\31"+
    "\102\0\1\u01d0\127\0\1\u01d1\21\0\4\65\1\0\1\65"+
    "\1\173\12\65\1\u01b9\1\u01c6\1\65\3\u01d2\6\65\27\u01d2"+
    "\2\65\33\u01d2\3\65\2\u01d2\4\65\1\0\1\65\1\176"+
    "\1\65\1\72\10\65\1\72\2\65\3\72\6\65\27\72"+
    "\2\65\6\72\1\u01d3\24\72\3\65\2\72\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\13\31\1\u01d4"+
    "\13\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\6\31"+
    "\1\u01d5\20\31\2\0\7\31\1\u01d5\23\31\1\7\1\0"+
    "\1\7\2\31\6\0\6\7\6\0\1\7\1\0\3\31"+
    "\1\7\5\0\23\31\1\u01d6\3\31\2\0\33\31\1\7"+
    "\1\0\1\7\2\31\6\0\6\7\6\0\1\7\1\0"+
    "\3\31\1\7\5\0\20\31\1\u01d7\6\31\2\0\33\31"+
    "\1\7\1\0\1\7\2\31\117\0\1\u01d8\6\0\4\65"+
    "\1\0\1\65\1\173\12\65\1\u01b9\1\u01c6\1\65\3\u01d9"+
    "\6\65\27\u01d9\2\65\33\u01d9\3\65\2\u01d9\4\65\1\0"+
    "\1\65\1\u01da\1\65\1\72\10\65\1\72\2\65\3\72"+
    "\6\65\27\72\2\65\33\72\3\65\2\72\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\4\31\1\u01db"+
    "\22\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\14\31"+
    "\1\u01dc\12\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\10\31\1\u01dd\16\31\2\0\33\31\1\7\1\0\1\7"+
    "\2\31\1\u01d9\3\65\1\0\1\u01d9\1\u01de\117\u01d9\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\1\u01df"+
    "\26\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\16\31"+
    "\1\u01e0\10\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\1\u01e1\4\0\1\u01e1\1\u01de\117\u01e1\6\0\6\7\6\0"+
    "\1\7\1\0\3\31\1\7\5\0\22\31\1\u01e2\4\31"+
    "\2\0\33\31\1\7\1\0\1\7\2\31\6\0\6\7"+
    "\6\0\1\7\1\0\3\31\1\7\5\0\16\31\1\u01e3"+
    "\10\31\2\0\33\31\1\7\1\0\1\7\2\31\6\0"+
    "\6\7\6\0\1\7\1\0\3\31\1\7\5\0\20\31"+
    "\1\u01e4\6\31\2\0\33\31\1\7\1\0\1\7\2\31"+
    "\6\0\6\7\6\0\1\7\1\0\3\31\1\7\5\0"+
    "\10\31\1\u01e5\16\31\2\0\33\31\1\7\1\0\1\7"+
    "\2\31\6\0\6\7\6\0\1\7\1\0\3\31\1\7"+
    "\5\0\16\31\1\u01e6\10\31\2\0\33\31\1\7\1\0"+
    "\1\7\2\31";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34142];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\7\11\3\1\1\11\15\1\2\11"+
    "\21\1\1\11\1\0\4\1\1\0\32\1\1\0\3\11"+
    "\1\0\40\1\2\11\2\1\1\11\2\1\1\0\37\1"+
    "\2\0\52\1\1\0\36\1\2\0\56\1\1\11\27\1"+
    "\2\0\33\1\1\0\4\1\1\0\16\1\1\0\3\1"+
    "\2\0\26\1\2\0\4\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\11\21\1\2\0\2\1\1\0\2\1"+
    "\2\0\13\1\5\0\10\1\1\0\1\11\3\0\10\1"+
    "\1\0\1\11\2\0\4\1\1\11\1\0\1\11\6\1"+
    "\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[486];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
		private Symbol symbol(int type) {
			return new Symbol(type, yyline + 1, yycolumn + 1);
		}

		private Symbol symbol(int type, Object object) {
			return new Symbol(type, yyline + 1, yycolumn + 1, object);
		}

		private String getString(String str) {
			return str.substring(1, str.length() - 1);
		}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaptchaLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 94: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 95: break;
          case 3:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 96: break;
          case 4:
            { return symbol(IN, yytext());
            }
            // fall through
          case 97: break;
          case 5:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 98: break;
          case 6:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 99: break;
          case 7:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 100: break;
          case 8:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 101: break;
          case 9:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 102: break;
          case 10:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 103: break;
          case 11:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 104: break;
          case 12:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 105: break;
          case 13:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 106: break;
          case 14:
            { return symbol(SEMI, yytext());
            }
            // fall through
          case 107: break;
          case 15:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 108: break;
          case 16:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 109: break;
          case 17:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 110: break;
          case 18:
            { return symbol(ID_V, yytext());
            }
            // fall through
          case 111: break;
          case 19:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 112: break;
          case 20:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 113: break;
          case 21:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 114: break;
          case 22:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 115: break;
          case 23:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 116: break;
          case 24:
            { return symbol(STRING, getString(yytext()));
            }
            // fall through
          case 117: break;
          case 25:
            { return symbol(AND, yytext());
            }
            // fall through
          case 118: break;
          case 26:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 119: break;
          case 27:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 120: break;
          case 28:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 121: break;
          case 29:
            { return symbol(ID, yytext());
            }
            // fall through
          case 122: break;
          case 30:
            { return symbol(OR, yytext());
            }
            // fall through
          case 123: break;
          case 31:
            { return symbol(ID_, getString(yytext()));
            }
            // fall through
          case 124: break;
          case 32:
            { return symbol(INTQ, getString(yytext()));
            }
            // fall through
          case 125: break;
          case 33:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 126: break;
          case 34:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 127: break;
          case 35:
            { return symbol(PARAGRAPH, yytext());
            }
            // fall through
          case 128: break;
          case 36:
            { return symbol(ALT, yytext());
            }
            // fall through
          case 129: break;
          case 37:
            { return symbol(SRC, yytext());
            }
            // fall through
          case 130: break;
          case 38:
            { return symbol(PERCNTG, getString(yytext()));
            }
            // fall through
          case 131: break;
          case 39:
            { return symbol(BR, yytext());
            }
            // fall through
          case 132: break;
          case 40:
            { return symbol(H1, yytext());
            }
            // fall through
          case 133: break;
          case 41:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 134: break;
          case 42:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 135: break;
          case 43:
            { return symbol(CHAR, yytext());
            }
            // fall through
          case 136: break;
          case 44:
            { return symbol(COLS, yytext());
            }
            // fall through
          case 137: break;
          case 45:
            { return symbol(HREF, yytext());
            }
            // fall through
          case 138: break;
          case 46:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 139: break;
          case 47:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 140: break;
          case 48:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 141: break;
          case 49:
            { return symbol(TYPE, yytext());
            }
            // fall through
          case 142: break;
          case 50:
            { return symbol(ONCLICK, getString(yytext()));
            }
            // fall through
          case 143: break;
          case 51:
            { return symbol(PIXEL, getString(yytext()));
            }
            // fall through
          case 144: break;
          case 52:
            { return symbol(CLASS_VALUE, getString(yytext()));
            }
            // fall through
          case 145: break;
          case 53:
            { return symbol(COLOUR, getString(yytext()));
            }
            // fall through
          case 146: break;
          case 54:
            { return symbol(DIV, yytext());
            }
            // fall through
          case 147: break;
          case 55:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 148: break;
          case 56:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 149: break;
          case 57:
            { return symbol(COLOR, yytext());
            }
            // fall through
          case 150: break;
          case 58:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 151: break;
          case 59:
            { return symbol(WIDTH, yytext());
            }
            // fall through
          case 152: break;
          case 60:
            { return symbol(ALIGN_VALUE, getString(yytext()));
            }
            // fall through
          case 153: break;
          case 61:
            { return symbol(TYPE_VALUE, getString(yytext()));
            }
            // fall through
          case 154: break;
          case 62:
            { return symbol(BODY, yytext());
            }
            // fall through
          case 155: break;
          case 63:
            { return symbol(GCIC, yytext());
            }
            // fall through
          case 156: break;
          case 64:
            { return symbol(HEAD, yytext());
            }
            // fall through
          case 157: break;
          case 65:
            { return symbol(LINK, yytext());
            }
            // fall through
          case 158: break;
          case 66:
            { return symbol(SPAM, yytext());
            }
            // fall through
          case 159: break;
          case 67:
            { return symbol(HEIGHT, yytext());
            }
            // fall through
          case 160: break;
          case 68:
            { return symbol(STR, yytext());
            }
            // fall through
          case 161: break;
          case 69:
            { return symbol(FONTF_VALUE, getString(yytext()));
            }
            // fall through
          case 162: break;
          case 70:
            { return symbol(GLOBAL, yytext());
            }
            // fall through
          case 163: break;
          case 71:
            { return symbol(INPUT, yytext());
            }
            // fall through
          case 164: break;
          case 72:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 165: break;
          case 73:
            { return symbol(ON_LOAD, yytext());
            }
            // fall through
          case 166: break;
          case 74:
            { return symbol(REVERSE, yytext());
            }
            // fall through
          case 167: break;
          case 75:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 168: break;
          case 76:
            { return symbol(DEC, yytext());
            }
            // fall through
          case 169: break;
          case 77:
            { return symbol(INT, yytext());
            }
            // fall through
          case 170: break;
          case 78:
            { return symbol(CLICK, yytext());
            }
            // fall through
          case 171: break;
          case 79:
            { return symbol(BUTTON, yytext());
            }
            // fall through
          case 172: break;
          case 80:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 173: break;
          case 81:
            { return symbol(SELECT, yytext());
            }
            // fall through
          case 174: break;
          case 82:
            { return symbol(FONTS, yytext());
            }
            // fall through
          case 175: break;
          case 83:
            { return symbol(ALERT, yytext());
            }
            // fall through
          case 176: break;
          case 84:
            { return symbol(TXTAREA, yytext());
            }
            // fall through
          case 177: break;
          case 85:
            { return symbol(LETPAR, yytext());
            }
            // fall through
          case 178: break;
          case 86:
            { return symbol(BCKGRND, yytext());
            }
            // fall through
          case 179: break;
          case 87:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 180: break;
          case 88:
            { return symbol(SCRIPT, yytext());
            }
            // fall through
          case 181: break;
          case 89:
            { return symbol(FONTF, yytext());
            }
            // fall through
          case 182: break;
          case 90:
            { return symbol(LETIMPAR, yytext());
            }
            // fall through
          case 183: break;
          case 91:
            { return symbol(URL, getString(yytext()));
            }
            // fall through
          case 184: break;
          case 92:
            { return symbol(RANDOM_N, yytext());
            }
            // fall through
          case 185: break;
          case 93:
            { return symbol(RANDOM_C, yytext());
            }
            // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
