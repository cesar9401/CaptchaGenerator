// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: captcha.flex

package com.cesar31.captchaweb.parser;

import static com.cesar31.captchaweb.parser.CaptchaParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CaptchaLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\10\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\47\1\56\1\57\1\60\1\61\1\62\1\47"+
    "\1\63\1\64\1\47\1\65\1\34\1\66\1\34\1\67"+
    "\1\0\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\7\0\1\3"+
    "\32\0\1\3\1\34\10\0\1\125\12\0\1\125\4\0"+
    "\1\125\4\0\1\34\27\125\1\0\37\125\1\0\u01ca\125"+
    "\4\0\14\125\16\0\5\125\7\0\1\125\1\0\1\125"+
    "\21\0\165\125\1\0\2\125\2\0\4\125\1\0\1\125"+
    "\6\0\1\125\1\0\3\125\1\0\1\125\1\0\24\125"+
    "\1\0\123\125\1\0\213\125\1\0\255\125\1\0\46\125"+
    "\2\0\1\125\6\0\51\125\10\0\55\125\1\0\1\125"+
    "\1\0\2\125\1\0\2\125\1\0\1\125\10\0\33\125"+
    "\4\0\4\125\35\0\13\125\5\0\100\125\12\126\4\0"+
    "\146\125\1\0\10\125\2\0\12\125\1\0\6\125\12\126"+
    "\3\125\2\0\1\125\20\0\73\125\2\0\145\125\16\0"+
    "\12\126\54\125\4\0\1\125\2\0\1\125\2\0\56\125"+
    "\22\0\34\125\4\0\13\125\65\0\25\125\1\0\10\125"+
    "\25\0\17\125\1\0\201\125\2\0\12\126\1\0\23\125"+
    "\1\0\10\125\2\0\2\125\2\0\26\125\1\0\7\125"+
    "\1\0\1\125\3\0\4\125\2\0\11\125\2\0\2\125"+
    "\2\0\4\125\10\0\1\125\4\0\2\125\1\0\5\125"+
    "\2\0\12\126\2\125\12\0\1\125\1\0\1\125\2\0"+
    "\3\125\1\0\6\125\4\0\2\125\2\0\26\125\1\0"+
    "\7\125\1\0\2\125\1\0\2\125\1\0\2\125\2\0"+
    "\1\125\1\0\5\125\4\0\2\125\2\0\3\125\3\0"+
    "\1\125\7\0\4\125\1\0\1\125\7\0\12\126\6\125"+
    "\13\0\3\125\1\0\11\125\1\0\3\125\1\0\26\125"+
    "\1\0\7\125\1\0\2\125\1\0\5\125\2\0\12\125"+
    "\1\0\3\125\1\0\3\125\2\0\1\125\17\0\4\125"+
    "\2\0\12\126\11\0\7\125\1\0\3\125\1\0\10\125"+
    "\2\0\2\125\2\0\26\125\1\0\7\125\1\0\2\125"+
    "\1\0\5\125\2\0\11\125\2\0\2\125\2\0\3\125"+
    "\10\0\2\125\4\0\2\125\1\0\5\125\2\0\12\126"+
    "\1\0\1\125\20\0\2\125\1\0\6\125\3\0\3\125"+
    "\1\0\4\125\3\0\2\125\1\0\1\125\1\0\2\125"+
    "\3\0\2\125\3\0\3\125\3\0\14\125\4\0\5\125"+
    "\3\0\3\125\1\0\4\125\2\0\1\125\6\0\1\125"+
    "\16\0\12\126\20\0\15\125\1\0\3\125\1\0\27\125"+
    "\1\0\20\125\3\0\10\125\1\0\3\125\1\0\4\125"+
    "\7\0\2\125\1\0\3\125\5\0\4\125\2\0\12\126"+
    "\20\0\4\125\1\0\10\125\1\0\3\125\1\0\27\125"+
    "\1\0\12\125\1\0\5\125\2\0\11\125\1\0\3\125"+
    "\1\0\4\125\7\0\2\125\7\0\1\125\1\0\4\125"+
    "\2\0\12\126\1\0\2\125\15\0\4\125\1\0\10\125"+
    "\1\0\3\125\1\0\63\125\1\0\3\125\1\0\5\125"+
    "\5\0\4\125\7\0\5\125\2\0\12\126\12\0\6\125"+
    "\2\0\2\125\1\0\22\125\3\0\30\125\1\0\11\125"+
    "\1\0\1\125\2\0\7\125\3\0\1\125\4\0\6\125"+
    "\1\0\1\125\1\0\10\125\6\0\12\126\2\0\2\125"+
    "\15\0\72\125\5\0\17\125\1\0\12\126\47\0\2\125"+
    "\1\0\1\125\1\0\5\125\1\0\30\125\1\0\1\125"+
    "\1\0\27\125\2\0\5\125\1\0\1\125\1\0\6\125"+
    "\2\0\12\126\2\0\4\125\40\0\1\125\27\0\2\125"+
    "\6\0\12\126\13\0\1\125\1\0\1\125\1\0\1\125"+
    "\4\0\12\125\1\0\44\125\4\0\24\125\1\0\22\125"+
    "\1\0\44\125\11\0\1\125\71\0\100\125\12\126\6\0"+
    "\100\125\12\126\4\125\2\0\46\125\1\0\1\125\5\0"+
    "\1\125\2\0\53\125\1\0\115\125\1\0\4\125\2\0"+
    "\7\125\1\0\1\125\1\0\4\125\2\0\51\125\1\0"+
    "\4\125\2\0\41\125\1\0\4\125\2\0\7\125\1\0"+
    "\1\125\1\0\4\125\2\0\17\125\1\0\71\125\1\0"+
    "\4\125\2\0\103\125\2\0\3\125\40\0\20\125\20\0"+
    "\126\125\2\0\6\125\3\0\u016c\125\2\0\21\125\1\3"+
    "\32\125\5\0\113\125\3\0\13\125\7\0\15\125\1\0"+
    "\7\125\13\0\25\125\13\0\24\125\14\0\15\125\1\0"+
    "\3\125\1\0\2\125\14\0\124\125\3\0\1\125\4\0"+
    "\2\125\2\0\12\126\41\0\3\125\2\0\12\126\6\0"+
    "\131\125\7\0\53\125\5\0\106\125\12\0\37\125\1\0"+
    "\14\125\4\0\14\125\12\0\12\126\36\125\2\0\5\125"+
    "\13\0\54\125\4\0\32\125\6\0\12\126\46\0\34\125"+
    "\4\0\77\125\1\0\35\125\2\0\1\125\12\126\6\0"+
    "\12\126\15\0\1\125\10\0\17\125\101\0\114\125\4\0"+
    "\12\126\21\0\11\125\14\0\60\125\12\126\72\125\14\0"+
    "\70\125\10\0\12\126\3\0\3\125\12\126\44\125\2\0"+
    "\11\125\7\0\53\125\2\0\3\125\20\0\3\125\1\0"+
    "\47\125\5\0\372\125\1\0\33\125\2\0\6\125\2\0"+
    "\46\125\2\0\6\125\2\0\10\125\1\0\1\125\1\0"+
    "\1\125\1\0\1\125\1\0\37\125\2\0\65\125\1\0"+
    "\7\125\1\0\1\125\3\0\3\125\1\0\7\125\3\0"+
    "\4\125\2\0\6\125\4\0\15\125\5\0\3\125\1\0"+
    "\7\125\3\0\13\3\35\0\2\3\5\0\1\3\17\0"+
    "\2\125\23\0\1\125\12\0\1\3\21\0\1\125\15\0"+
    "\1\125\20\0\15\125\63\0\41\125\21\0\1\125\4\0"+
    "\1\125\2\0\12\125\1\0\1\125\3\0\5\125\6\0"+
    "\1\125\1\0\1\125\1\0\1\125\1\0\4\125\1\0"+
    "\13\125\2\0\4\125\5\0\5\125\4\0\1\125\21\0"+
    "\51\125\u022d\0\64\125\26\0\57\125\1\0\57\125\1\0"+
    "\205\125\6\0\11\125\14\0\46\125\1\0\1\125\5\0"+
    "\1\125\2\0\70\125\7\0\1\125\17\0\30\125\11\0"+
    "\7\125\1\0\7\125\1\0\7\125\1\0\7\125\1\0"+
    "\7\125\1\0\7\125\1\0\7\125\1\0\7\125\1\0"+
    "\40\125\57\0\1\125\320\0\1\3\4\0\3\125\31\0"+
    "\17\125\1\0\5\125\2\0\5\125\4\0\126\125\2\0"+
    "\2\125\2\0\3\125\1\0\132\125\1\0\4\125\5\0"+
    "\53\125\1\0\136\125\21\0\33\125\65\0\306\125\112\0"+
    "\360\125\20\0\215\125\103\0\56\125\2\0\15\125\3\0"+
    "\20\125\12\126\2\125\24\0\63\125\1\0\12\125\1\0"+
    "\163\125\45\0\11\125\2\0\147\125\2\0\65\125\2\0"+
    "\5\125\60\0\61\125\30\0\64\125\14\0\106\125\12\0"+
    "\12\126\6\0\30\125\3\0\1\125\1\0\3\125\12\126"+
    "\44\125\2\0\44\125\14\0\35\125\3\0\101\125\16\0"+
    "\1\125\12\126\6\0\20\125\12\126\5\125\1\0\67\125"+
    "\11\0\16\125\2\0\12\126\6\0\27\125\3\0\111\125"+
    "\30\0\3\125\2\0\20\125\2\0\5\125\12\0\6\125"+
    "\2\0\6\125\2\0\6\125\11\0\7\125\1\0\7\125"+
    "\1\0\53\125\1\0\14\125\10\0\173\125\1\0\2\125"+
    "\2\0\12\126\6\0\244\125\14\0\27\125\4\0\61\125"+
    "\4\0\156\125\2\0\152\125\46\0\7\125\14\0\5\125"+
    "\5\0\14\125\1\0\15\125\1\0\5\125\1\0\1\125"+
    "\1\0\2\125\1\0\2\125\1\0\154\125\41\0\153\125"+
    "\22\0\100\125\2\0\66\125\50\0\14\125\4\0\20\125"+
    "\20\0\20\125\3\0\2\125\30\0\3\125\40\0\5\125"+
    "\1\0\207\125\23\0\12\126\7\0\32\125\4\0\1\125"+
    "\1\0\32\125\13\0\131\125\3\0\6\125\2\0\6\125"+
    "\2\0\6\125\2\0\3\125\43\0\14\125\1\0\32\125"+
    "\1\0\23\125\1\0\2\125\1\0\17\125\2\0\16\125"+
    "\42\0\173\125\105\0\65\125\210\0\1\125\202\0\35\125"+
    "\3\0\61\125\17\0\1\125\37\0\40\125\15\0\36\125"+
    "\5\0\53\125\5\0\36\125\2\0\44\125\4\0\10\125"+
    "\1\0\5\125\52\0\236\125\2\0\12\126\6\0\44\125"+
    "\4\0\44\125\4\0\50\125\10\0\64\125\234\0\67\125"+
    "\11\0\26\125\12\0\10\125\230\0\6\125\2\0\1\125"+
    "\1\0\54\125\1\0\2\125\3\0\1\125\2\0\27\125"+
    "\12\0\27\125\11\0\37\125\101\0\23\125\1\0\2\125"+
    "\12\0\26\125\12\0\32\125\106\0\70\125\6\0\2\125"+
    "\100\0\4\125\1\0\2\125\5\0\10\125\1\0\3\125"+
    "\1\0\35\125\2\0\3\125\4\0\1\125\40\0\35\125"+
    "\3\0\35\125\43\0\10\125\1\0\36\125\31\0\66\125"+
    "\12\0\26\125\12\0\23\125\15\0\22\125\156\0\111\125"+
    "\67\0\63\125\15\0\63\125\15\0\50\125\10\0\12\126"+
    "\306\0\35\125\12\0\1\125\10\0\41\125\217\0\27\125"+
    "\11\0\107\125\37\0\12\126\17\0\74\125\25\0\31\125"+
    "\7\0\12\126\6\0\65\125\1\0\12\126\4\0\3\125"+
    "\11\0\44\125\2\0\1\125\11\0\105\125\4\0\4\125"+
    "\3\0\12\126\1\125\1\0\1\125\43\0\22\125\1\0"+
    "\45\125\6\0\1\125\101\0\7\125\1\0\1\125\1\0"+
    "\4\125\1\0\17\125\1\0\12\125\7\0\73\125\5\0"+
    "\12\126\6\0\4\125\1\0\10\125\2\0\2\125\2\0"+
    "\26\125\1\0\7\125\1\0\2\125\1\0\5\125\1\0"+
    "\12\125\2\0\2\125\2\0\3\125\2\0\1\125\6\0"+
    "\1\125\5\0\7\125\2\0\7\125\3\0\5\125\213\0"+
    "\113\125\5\0\12\126\4\0\2\125\40\0\106\125\1\0"+
    "\1\125\10\0\12\126\246\0\66\125\2\0\11\125\27\0"+
    "\6\125\42\0\101\125\3\0\1\125\13\0\12\126\46\0"+
    "\71\125\7\0\12\126\66\0\33\125\2\0\17\125\4\0"+
    "\12\126\306\0\73\125\145\0\100\125\12\126\25\0\1\125"+
    "\240\0\10\125\2\0\56\125\2\0\10\125\1\0\2\125"+
    "\33\0\77\125\10\0\1\125\10\0\112\125\3\0\1\125"+
    "\42\0\71\125\7\0\11\125\1\0\55\125\1\0\11\125"+
    "\17\0\12\126\30\0\36\125\2\0\26\125\1\0\16\125"+
    "\111\0\7\125\1\0\2\125\1\0\54\125\3\0\1\125"+
    "\1\0\2\125\1\0\11\125\10\0\12\126\6\0\6\125"+
    "\1\0\2\125\1\0\45\125\1\0\2\125\1\0\6\125"+
    "\7\0\12\126\u0136\0\27\125\11\0\232\125\146\0\157\125"+
    "\21\0\304\125\274\0\57\125\321\0\107\125\271\0\71\125"+
    "\7\0\37\125\1\0\12\126\146\0\36\125\2\0\5\125"+
    "\13\0\67\125\11\0\4\125\14\0\12\126\11\0\25\125"+
    "\5\0\23\125\260\0\100\125\200\0\113\125\4\0\71\125"+
    "\7\0\21\125\100\0\2\125\1\0\1\125\34\0\370\125"+
    "\10\0\363\125\15\0\37\125\61\0\3\125\21\0\4\125"+
    "\10\0\u018c\125\4\0\153\125\5\0\15\125\3\0\11\125"+
    "\7\0\12\125\3\0\2\125\306\0\5\125\3\0\6\125"+
    "\10\0\10\125\2\0\7\125\36\0\4\125\224\0\3\125"+
    "\273\0\125\125\1\0\107\125\1\0\2\125\2\0\1\125"+
    "\2\0\2\125\2\0\4\125\1\0\14\125\1\0\1\125"+
    "\1\0\7\125\1\0\101\125\1\0\4\125\2\0\10\125"+
    "\1\0\7\125\1\0\34\125\1\0\4\125\1\0\5\125"+
    "\1\0\1\125\3\0\7\125\1\0\u0154\125\2\0\31\125"+
    "\1\0\31\125\1\0\37\125\1\0\31\125\1\0\37\125"+
    "\1\0\31\125\1\0\37\125\1\0\31\125\1\0\37\125"+
    "\1\0\31\125\1\0\10\125\2\0\62\126\67\125\4\0"+
    "\62\125\10\0\1\125\16\0\1\125\26\0\5\125\1\0"+
    "\17\125\120\0\7\125\1\0\21\125\2\0\7\125\1\0"+
    "\2\125\1\0\5\125\325\0\55\125\3\0\16\125\2\0"+
    "\12\126\4\0\1\125\u0171\0\60\125\12\126\6\0\305\125"+
    "\13\0\7\125\51\0\114\125\4\0\12\126\246\0\4\125"+
    "\1\0\33\125\1\0\2\125\1\0\1\125\2\0\1\125"+
    "\1\0\12\125\1\0\4\125\1\0\1\125\1\0\1\125"+
    "\6\0\1\125\4\0\1\125\1\0\1\125\1\0\1\125"+
    "\1\0\3\125\1\0\2\125\1\0\1\125\2\0\1\125"+
    "\1\0\1\125\1\0\1\125\1\0\1\125\1\0\1\125"+
    "\1\0\2\125\1\0\1\125\2\0\4\125\1\0\7\125"+
    "\1\0\4\125\1\0\4\125\1\0\1\125\1\0\12\125"+
    "\1\0\21\125\5\0\3\125\1\0\5\125\1\0\21\125"+
    "\164\0\32\125\6\0\32\125\6\0\32\125\166\0\327\125"+
    "\51\0\65\125\13\0\336\125\2\0\u0182\125\16\0\u0131\125"+
    "\37\0\36\125\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\4\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\1\11\22\1\23\1\24\15\22\1\25"+
    "\1\1\1\26\1\2\1\27\1\0\1\30\3\4\1\0"+
    "\30\4\1\31\1\0\1\4\1\32\1\4\1\0\1\33"+
    "\1\34\1\35\1\0\25\22\1\36\12\22\1\37\1\30"+
    "\1\4\2\40\1\41\1\4\1\0\36\4\1\32\1\42"+
    "\2\0\1\22\1\43\10\22\1\44\10\22\1\45\16\22"+
    "\1\46\5\22\1\4\1\47\1\0\36\4\2\0\3\22"+
    "\1\50\3\22\1\51\12\22\1\52\1\53\7\22\1\54"+
    "\2\22\1\55\4\22\1\56\1\22\1\57\1\22\1\60"+
    "\2\22\1\61\1\62\1\22\1\4\1\63\1\64\7\4"+
    "\1\65\11\4\1\66\4\4\2\0\4\22\1\67\2\22"+
    "\1\70\17\22\1\71\1\72\1\22\1\73\1\0\4\22"+
    "\1\0\1\74\13\4\1\75\1\4\1\0\1\4\1\76"+
    "\1\4\2\0\2\22\1\77\1\22\1\100\1\101\1\22"+
    "\1\102\3\22\1\103\12\22\2\0\1\104\2\22\1\105"+
    "\1\0\1\4\1\106\2\4\1\0\1\4\1\0\1\2"+
    "\1\107\3\22\1\110\4\22\1\111\3\22\1\112\1\113"+
    "\1\22\1\114\1\115\2\0\1\116\1\117\1\0\2\4"+
    "\2\0\2\22\1\120\1\121\1\22\1\122\5\22\5\0"+
    "\10\22\1\0\1\123\3\0\1\124\2\22\1\125\1\22"+
    "\1\126\1\22\1\127\1\0\1\130\2\0\1\22\1\131"+
    "\2\22\1\132\1\0\1\106\1\22\1\133\1\22\1\134"+
    "\1\22\1\135\1\0\4\22\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[491];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a"+
    "\0\u0261\0\127\0\127\0\127\0\127\0\127\0\127\0\127"+
    "\0\u02b8\0\u030f\0\u01b3\0\127\0\u0366\0\u03bd\0\u0414\0\u046b"+
    "\0\u04c2\0\u0519\0\u0570\0\u05c7\0\u061e\0\u0675\0\u06cc\0\u0723"+
    "\0\u077a\0\127\0\127\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d"+
    "\0\u0984\0\u09db\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\u0b8e\0\u0be5"+
    "\0\u01b3\0\u0c3c\0\u01b3\0\u0c93\0\127\0\u0cea\0\u01b3\0\u0d41"+
    "\0\u0d98\0\u0def\0\u0e46\0\u0e9d\0\u0ef4\0\u0f4b\0\u0fa2\0\u0ff9"+
    "\0\u1050\0\u10a7\0\u10fe\0\u1155\0\u11ac\0\u1203\0\u125a\0\u12b1"+
    "\0\u1308\0\u135f\0\u13b6\0\u140d\0\u1464\0\u14bb\0\u1512\0\u1569"+
    "\0\u15c0\0\u1617\0\u166e\0\u01b3\0\u16c5\0\u171c\0\u01b3\0\u1773"+
    "\0\u17ca\0\127\0\127\0\127\0\u1821\0\u1878\0\u18cf\0\u1926"+
    "\0\u197d\0\u19d4\0\u1a2b\0\u1a82\0\u1ad9\0\u1b30\0\u1b87\0\u1bde"+
    "\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a\0\u1d91\0\u1de8\0\u1e3f\0\u1e96"+
    "\0\u1eed\0\u1f44\0\u0519\0\u1f9b\0\u1ff2\0\u2049\0\u20a0\0\u20f7"+
    "\0\u214e\0\u21a5\0\u21fc\0\u2253\0\u22aa\0\127\0\127\0\u2301"+
    "\0\u01b3\0\127\0\u01b3\0\u2358\0\u23af\0\u2406\0\u245d\0\u24b4"+
    "\0\u250b\0\u2562\0\u25b9\0\u2610\0\u2667\0\u26be\0\u2715\0\u276c"+
    "\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f\0\u2976\0\u29cd\0\u2a24"+
    "\0\u2a7b\0\u2ad2\0\u2b29\0\u2b80\0\u2bd7\0\u2c2e\0\u2c85\0\u2cdc"+
    "\0\u2d33\0\u2d8a\0\u2de1\0\127\0\u1773\0\u2e38\0\u2e8f\0\u2ee6"+
    "\0\u0519\0\u2f3d\0\u2f94\0\u2feb\0\u3042\0\u3099\0\u30f0\0\u3147"+
    "\0\u319e\0\u0519\0\u31f5\0\u324c\0\u32a3\0\u32fa\0\u3351\0\u33a8"+
    "\0\u33ff\0\u3456\0\u0519\0\u34ad\0\u3504\0\u355b\0\u35b2\0\u3609"+
    "\0\u3660\0\u36b7\0\u370e\0\u3765\0\u37bc\0\u3813\0\u386a\0\u38c1"+
    "\0\u3918\0\u0519\0\u396f\0\u39c6\0\u3a1d\0\u3a74\0\u3acb\0\u3b22"+
    "\0\u01b3\0\u3b79\0\u3bd0\0\u3c27\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83"+
    "\0\u3dda\0\u3e31\0\u3e88\0\u3edf\0\u3f36\0\u3f8d\0\u3fe4\0\u403b"+
    "\0\u4092\0\u40e9\0\u4140\0\u4197\0\u41ee\0\u4245\0\u429c\0\u42f3"+
    "\0\u434a\0\u43a1\0\u43f8\0\u444f\0\u44a6\0\u44fd\0\u4554\0\u45ab"+
    "\0\u4602\0\u4659\0\u46b0\0\u4707\0\u475e\0\u0519\0\u47b5\0\u480c"+
    "\0\u4863\0\u0519\0\u48ba\0\u4911\0\u4968\0\u49bf\0\u4a16\0\u4a6d"+
    "\0\u4ac4\0\u4b1b\0\u4b72\0\u4bc9\0\u0519\0\u0519\0\u4c20\0\u4c77"+
    "\0\u4cce\0\u4d25\0\u4d7c\0\u4dd3\0\u4e2a\0\u0519\0\u4e81\0\u4ed8"+
    "\0\u0519\0\u4f2f\0\u4f86\0\u4fdd\0\u5034\0\u0519\0\u508b\0\u0519"+
    "\0\u50e2\0\u0519\0\u5139\0\u5190\0\u0519\0\u0519\0\u51e7\0\u523e"+
    "\0\127\0\u01b3\0\u5295\0\u52ec\0\u5343\0\u539a\0\u53f1\0\u5448"+
    "\0\u549f\0\u01b3\0\u54f6\0\u554d\0\u55a4\0\u55fb\0\u5652\0\u56a9"+
    "\0\u5700\0\u5757\0\u57ae\0\u01b3\0\u5805\0\u585c\0\u58b3\0\u590a"+
    "\0\u5961\0\u59b8\0\u5a0f\0\u5a66\0\u5abd\0\u5b14\0\u0519\0\u5b6b"+
    "\0\u5bc2\0\u0519\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u5d75\0\u5dcc"+
    "\0\u5e23\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6\0\u602d\0\u6084"+
    "\0\u60db\0\u0519\0\u0519\0\u6132\0\u0519\0\u6189\0\u61e0\0\u6237"+
    "\0\u628e\0\u62e5\0\u633c\0\u0519\0\u6393\0\u63ea\0\u6441\0\u6498"+
    "\0\u64ef\0\u6546\0\u659d\0\u65f4\0\u664b\0\u66a2\0\u66f9\0\u01b3"+
    "\0\u6750\0\u67a7\0\u67fe\0\u01b3\0\u6855\0\u68ac\0\u6903\0\u695a"+
    "\0\u69b1\0\u0519\0\u6a08\0\u0519\0\u0519\0\u6a5f\0\u0519\0\u6ab6"+
    "\0\u6b0d\0\u6b64\0\u0519\0\u6bbb\0\u6c12\0\u6c69\0\u6cc0\0\u6d17"+
    "\0\u6d6e\0\u6dc5\0\u6e1c\0\u6e73\0\u6eca\0\u6f21\0\u6f78\0\u0519"+
    "\0\u6fcf\0\u7026\0\u0519\0\u707d\0\u70d4\0\u01b3\0\u712b\0\u7182"+
    "\0\u71d9\0\u7230\0\u7287\0\u4602\0\127\0\u72de\0\u7335\0\u738c"+
    "\0\u0519\0\u73e3\0\u743a\0\u7491\0\u74e8\0\u0519\0\u753f\0\u7596"+
    "\0\u75ed\0\u0519\0\u0519\0\u7644\0\u0519\0\u0519\0\u769b\0\u76f2"+
    "\0\u0519\0\u0519\0\u7749\0\u77a0\0\u77f7\0\u784e\0\u78a5\0\u78fc"+
    "\0\u7953\0\u0519\0\u0519\0\u79aa\0\u0519\0\u7a01\0\u7a58\0\u7aaf"+
    "\0\u7b06\0\u7b5d\0\u7bb4\0\u7c0b\0\u7c62\0\u7cb9\0\u7d10\0\u7d67"+
    "\0\u7dbe\0\u7e15\0\u7e6c\0\u7ec3\0\u7f1a\0\u7f71\0\u7fc8\0\u801f"+
    "\0\127\0\u8076\0\u80cd\0\u8124\0\u0519\0\u817b\0\u81d2\0\u0519"+
    "\0\u8229\0\u0519\0\u8280\0\u0519\0\u82d7\0\127\0\u832e\0\u8385"+
    "\0\u83dc\0\u0519\0\u8433\0\u848a\0\127\0\u84e1\0\127\0\u8538"+
    "\0\u0519\0\u858f\0\u85e6\0\u863d\0\u0519\0\u85e6\0\u8694\0\u86eb"+
    "\0\u8742\0\u8799\0\u0519";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[491];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\3\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\7"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\1\31\1\32\1\33\1\34\1\35\6\32"+
    "\1\36\1\32\1\37\1\40\1\32\1\41\6\32\1\42"+
    "\1\43\1\7\1\44\1\45\1\46\1\47\1\32\1\50"+
    "\1\32\1\51\1\52\4\32\1\53\1\54\2\32\1\55"+
    "\1\56\1\57\2\32\1\60\3\32\1\61\1\62\1\63"+
    "\2\7\131\0\1\3\131\0\1\64\24\0\1\65\74\0"+
    "\4\66\1\0\1\66\1\67\1\70\1\71\3\72\5\66"+
    "\1\73\1\72\1\66\1\74\2\75\1\72\4\66\1\72"+
    "\1\66\1\76\1\77\1\100\3\77\1\101\15\77\1\102"+
    "\2\77\2\66\1\77\1\103\1\104\1\105\2\77\1\106"+
    "\1\107\1\110\1\77\1\111\1\77\1\112\1\113\1\114"+
    "\1\115\1\116\1\77\1\117\1\120\1\121\2\77\1\122"+
    "\1\77\1\123\1\77\1\72\1\66\1\72\2\77\6\0"+
    "\6\7\6\0\1\7\1\0\4\7\4\0\1\7\1\0"+
    "\27\7\2\0\34\7\1\0\3\7\6\0\4\7\1\124"+
    "\1\7\6\0\1\7\1\0\4\7\4\0\1\7\1\0"+
    "\27\7\2\0\34\7\1\0\3\7\2\125\1\0\1\125"+
    "\1\0\1\125\5\126\1\127\6\125\1\126\1\125\4\126"+
    "\4\125\1\126\1\125\27\126\2\125\34\126\1\125\3\126"+
    "\6\0\6\7\6\0\1\130\1\0\4\7\4\0\1\7"+
    "\1\0\27\7\2\0\34\7\1\0\3\7\6\0\6\7"+
    "\6\0\1\130\1\0\3\22\1\7\4\0\1\7\1\0"+
    "\27\7\2\0\34\7\1\0\3\7\5\0\1\131\24\0"+
    "\1\132\126\0\1\133\126\0\1\134\172\0\1\135\36\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\13\32\1\136\5\32\1\137\5\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\1\140"+
    "\26\32\2\0\1\141\32\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\4\32\1\142\22\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\25\32\1\143\1\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\4\32\1\144\22\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\23\32\1\145\3\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\15\32\1\146"+
    "\11\32\2\0\33\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\4\32\1\147\22\32\2\0\33\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\14\32\1\150"+
    "\16\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\1\32\1\151\15\32\1\152\13\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\1\141\7\32"+
    "\1\153\3\32\1\154\2\32\1\155\13\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\5\32\1\156"+
    "\25\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\1\32\1\157\15\32\1\160\13\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\5\32\1\161"+
    "\14\32\1\162\10\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\4\32\1\163\11\32\1\164\14\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\1\32\1\165\31\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\16\32\1\166\14\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\17\32\1\167"+
    "\13\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\22\32\1\170\1\32\1\171\6\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\5\32\1\172"+
    "\14\32\1\173\6\32\1\174\1\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\11\32\1\175\21\32"+
    "\1\7\1\0\1\7\2\32\123\0\1\176\3\0\2\64"+
    "\1\3\1\64\1\4\122\64\4\66\1\0\1\66\1\177"+
    "\124\66\1\0\1\66\1\67\5\72\6\66\1\72\1\66"+
    "\3\200\1\72\4\66\1\72\1\66\6\200\21\72\2\66"+
    "\1\72\6\200\25\72\1\66\3\72\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\5\66\1\73\1\72\1\66"+
    "\3\71\1\72\4\66\1\72\1\66\27\71\2\66\33\71"+
    "\1\72\1\66\1\72\2\71\4\66\1\0\1\66\1\67"+
    "\5\72\6\66\1\72\1\66\4\72\4\66\1\72\1\66"+
    "\27\72\2\66\34\72\1\66\3\72\4\66\1\0\1\66"+
    "\1\202\1\66\1\73\10\66\1\73\2\66\3\73\7\66"+
    "\27\73\2\66\33\73\3\66\2\73\4\66\1\0\1\66"+
    "\1\203\1\72\1\71\1\204\2\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\20\77\1\206\12\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\203\1\72\1\71\1\204\2\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\75\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\20\77\1\206\12\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\22\77\1\207"+
    "\10\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\33\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\17\77\1\210\13\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\5\77\1\211\25\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\5\77\1\212\25\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\21\77\1\213"+
    "\11\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\14\77\1\214\16\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\5\77\1\215\2\77\1\216\6\77\1\217"+
    "\13\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\25\77\1\220\5\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\22\77\1\221\10\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\24\77\1\222\6\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\25\77\1\223"+
    "\5\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\5\77\1\224\3\77\1\225\21\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\1\77\1\226\31\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\1\77\1\227"+
    "\23\77\1\230\5\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\14\77\1\231\16\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\25\77\1\232\5\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\1\77\1\233"+
    "\3\77\1\234\3\77\1\235\5\77\1\236\13\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\1\77\1\237"+
    "\7\77\1\240\21\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\5\77\1\241\25\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\10\77\1\242\22\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\5\77\1\243"+
    "\25\77\1\72\1\66\1\72\2\77\13\0\1\244\121\0"+
    "\5\7\1\127\6\0\1\7\1\0\4\7\4\0\1\7"+
    "\1\0\27\7\2\0\34\7\1\0\3\7\6\0\6\7"+
    "\6\0\1\7\1\0\3\245\1\7\4\0\1\7\1\0"+
    "\27\7\2\0\34\7\1\0\2\7\1\245\21\0\1\246"+
    "\210\0\1\247\31\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\4\32\1\250\22\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\2\32"+
    "\1\251\24\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\20\32\1\252\6\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\1\32\1\253\1\32"+
    "\1\254\2\32\1\255\1\256\1\257\2\32\1\260\2\32"+
    "\1\261\1\262\1\32\1\263\1\264\4\32\2\0\2\32"+
    "\1\253\1\32\1\254\2\32\1\255\1\256\1\257\2\32"+
    "\1\260\2\32\1\261\1\262\2\32\1\263\1\264\6\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\21\32\1\265"+
    "\5\32\2\0\33\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\10\32\1\266\16\32\2\0\33\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\22\32\1\267\4\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\14\32"+
    "\1\270\12\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\1\271\32\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\24\32\1\272\2\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\24\32\1\273\6\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\3\32\1\274\27\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\17\32"+
    "\1\275\13\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\1\32\1\276\31\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\1\32\1\277\31\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\14\32\1\300\16\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\3\32\1\301\27\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\14\32\1\302"+
    "\16\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\16\32\1\303\14\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\11\32\1\304\21\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\5\32"+
    "\1\305\25\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\24\32\1\306\6\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\15\32\1\307\15\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\3\32\1\310\27\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\27\32\1\311\3\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\3\32\1\312"+
    "\27\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\22\32\1\313\10\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\30\32\1\314\2\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\25\32"+
    "\1\315\5\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\20\32\1\316\12\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\4\32\1\317\26\32"+
    "\1\7\1\0\1\7\2\32\4\66\1\0\1\66\1\67"+
    "\5\72\6\66\1\72\1\66\3\320\1\72\4\66\1\72"+
    "\1\66\6\320\21\72\2\66\1\72\6\320\25\72\1\66"+
    "\3\72\4\66\1\0\1\66\1\321\5\72\6\66\1\72"+
    "\1\66\4\72\4\66\1\72\1\66\27\72\2\66\34\72"+
    "\1\66\3\72\4\66\1\0\1\66\1\177\6\66\1\322"+
    "\115\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\30\77\1\323\2\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\201\1\72\1\71"+
    "\3\72\1\205\4\66\1\73\1\72\1\66\3\77\1\72"+
    "\4\66\1\72\1\66\27\77\2\66\11\77\1\324\21\77"+
    "\1\72\1\66\1\72\2\77\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\25\77"+
    "\1\325\5\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\16\77\1\326\14\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\22\77\1\327\10\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\201\1\72\1\71"+
    "\3\72\1\205\4\66\1\73\1\72\1\66\3\77\1\72"+
    "\4\66\1\72\1\66\27\77\2\66\25\77\1\330\5\77"+
    "\1\72\1\66\1\72\2\77\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\1\77"+
    "\1\331\23\77\1\332\5\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\16\77\1\333\14\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\201\1\72\1\71"+
    "\3\72\1\205\4\66\1\73\1\72\1\66\3\77\1\72"+
    "\4\66\1\72\1\66\27\77\2\66\5\77\1\334\25\77"+
    "\1\72\1\66\1\72\2\77\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\14\77"+
    "\1\335\16\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\3\77\1\336\27\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\1\77\1\337\3\77\1\340\25\77"+
    "\1\72\1\66\1\72\2\77\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\24\77"+
    "\1\341\6\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\23\77\1\342\7\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\6\77\1\343\24\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\201\1\72\1\71"+
    "\3\72\1\205\4\66\1\73\1\72\1\66\3\77\1\72"+
    "\4\66\1\72\1\66\27\77\2\66\15\77\1\332\15\77"+
    "\1\72\1\66\1\72\2\77\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\22\77"+
    "\1\344\10\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\26\77\1\337\4\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\15\77\1\345\15\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\201\1\72\1\71"+
    "\3\72\1\205\4\66\1\73\1\72\1\66\3\77\1\72"+
    "\4\66\1\72\1\66\27\77\2\66\11\77\1\346\21\77"+
    "\1\72\1\66\1\72\2\77\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\22\77"+
    "\1\347\10\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\4\77\1\350\26\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\4\77\1\351\26\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\201\1\72\1\71"+
    "\3\72\1\205\4\66\1\73\1\72\1\66\3\77\1\72"+
    "\4\66\1\72\1\66\27\77\2\66\7\77\1\352\23\77"+
    "\1\72\1\66\1\72\2\77\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\27\77"+
    "\1\335\3\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\16\77\1\353\14\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\14\77\1\354\16\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\201\1\72\1\71"+
    "\3\72\1\205\4\66\1\73\1\72\1\66\3\77\1\72"+
    "\4\66\1\72\1\66\27\77\2\66\1\77\1\355\26\77"+
    "\1\356\2\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\11\77\1\357\21\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\14\77\1\360\16\77\1\72\1\66"+
    "\1\72\2\77\21\0\1\361\213\0\1\362\26\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\20\32\1\363\6\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\1\364\26\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\16\32\1\365\1\32"+
    "\1\366\2\32\1\367\3\32\2\0\17\32\1\365\2\32"+
    "\1\366\2\32\1\367\5\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\10\32\1\370\16\32\2\0\11\32\1\370"+
    "\21\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\2\32"+
    "\1\371\24\32\2\0\3\32\1\371\27\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\1\32"+
    "\1\372\1\32\1\7\4\0\1\7\1\0\4\32\1\373"+
    "\22\32\2\0\5\32\1\373\25\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\14\32\1\374\1\375\11\32\2\0"+
    "\15\32\1\374\1\375\14\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\10\32\1\376\16\32\2\0\11\32\1\376"+
    "\21\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\17\32"+
    "\1\377\7\32\2\0\20\32\1\377\12\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\2\32\1\u0100\1\32\1\u0101"+
    "\12\32\1\u0102\7\32\2\0\3\32\1\u0100\1\32\1\u0101"+
    "\12\32\1\u0102\12\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\4\32\1\u0103\3\32\1\u0104\16\32\2\0\5\32"+
    "\1\u0103\3\32\1\u0104\21\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\2\32\1\u0105\24\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\22\32\1\u0106\4\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\10\32\1\u0107\6\32\1\u0108\7\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\1\u0109"+
    "\32\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\13\32"+
    "\1\u010a\13\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\4\32\1\u010b\22\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\13\32"+
    "\1\u010c\17\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\14\32\1\u010d\16\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\22\32\1\u010e\10\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\23\32\1\u010f\7\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\17\32\1\u0110\3\32\1\u0111\7\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\11\32\1\u0112\21\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\23\32\1\u0113\7\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\24\32\1\u0114"+
    "\6\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\7\32\1\u0115\23\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\6\32\1\u0116\24\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\5\32"+
    "\1\u0117\25\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\5\32\1\u0118\25\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\14\32\1\u0119\16\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\23\32\1\u011a\7\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\11\32\1\u011b\21\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\24\32\1\u011c"+
    "\6\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\5\32\1\u011d\25\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\5\32\1\u011e\25\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\24\32"+
    "\1\u011f\6\32\1\7\1\0\1\7\2\32\4\66\1\0"+
    "\1\66\1\67\5\72\6\66\1\72\1\66\3\u0120\1\72"+
    "\4\66\1\72\1\66\6\u0120\21\72\2\66\1\72\6\u0120"+
    "\25\72\1\66\3\72\4\66\1\0\1\66\1\u0121\124\66"+
    "\1\0\1\66\1\u0122\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\33\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\1\77\1\u0123\31\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\22\77\1\u0124\10\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\5\77\1\u0125"+
    "\25\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\4\77\1\u0126\26\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\1\77\1\351\31\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\3\77\1\u0127\27\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\5\77\1\351"+
    "\25\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\24\77\1\u0128\6\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\3\77\1\u0129\27\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\u012a\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\33\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\10\77\1\u012b\22\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\31\77\1\351"+
    "\1\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\5\77\1\u012c\25\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\20\77\1\u012d\12\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\24\77\1\u012e\6\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\24\77\1\u012f"+
    "\6\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\17\77\1\u0130\13\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\2\77\1\u0131\30\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\26\77\1\332\4\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\20\77\1\u0132"+
    "\12\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\11\77\1\u0133\21\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\u0134\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\33\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\10\77\1\343\22\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\23\77\1\u0135\7\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\26\77\1\u0136"+
    "\4\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\14\77\1\351\16\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\24\77\1\u0137\6\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\24\77\1\332\6\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\14\77\1\u0138"+
    "\16\77\1\72\1\66\1\72\2\77\21\361\1\u0139\105\361"+
    "\71\0\1\u013a\43\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\22\32\1\u013b\4\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\2\32"+
    "\1\u013c\24\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\3\32\1\u013d\23\32\2\0\4\32\1\u013d"+
    "\26\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\22\32"+
    "\1\u013e\4\32\2\0\24\32\1\u013e\6\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\24\32\1\u013f\2\32\2\0"+
    "\26\32\1\u013f\4\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\10\32\1\u0140\16\32\2\0\11\32\1\u0140\21\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\1\u0141\26\32"+
    "\2\0\1\32\1\u0141\31\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\6\32\1\u0142\20\32\2\0\7\32\1\u0142"+
    "\23\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\17\32"+
    "\1\u0143\7\32\2\0\20\32\1\u0143\12\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\15\32\1\u0144\11\32\2\0"+
    "\16\32\1\u0144\14\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\22\32\1\u0145\4\32\2\0\24\32\1\u0145\6\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\20\32\1\u0146"+
    "\6\32\2\0\22\32\1\u0146\10\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\13\32\1\u0147\13\32\2\0\14\32"+
    "\1\u0147\16\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\1\u0148\26\32\2\0\1\32\1\u0148\31\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\25\32\1\u0149\1\32\2\0"+
    "\30\32\1\u0149\2\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\22\32\1\u014a\4\32\2\0\24\32\1\u014a\6\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\14\32\1\u014b"+
    "\12\32\2\0\33\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\1\u014c\26\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\1\u014d\26\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\16\32\1\u014e\10\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\20\32\1\u014f\6\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\7\32\1\u0150\23\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\5\32\1\u0151\25\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\23\32\1\u0152\7\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\22\32\1\u0153"+
    "\10\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\15\32\1\u0154\15\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\5\32\1\u0155\25\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\5\0\1\u0156\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\10\32\1\u0157\22\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\7\32\1\u0158\23\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\11\32"+
    "\1\u0159\21\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\16\32\1\u015a\14\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\5\0\1\u015b\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\10\32"+
    "\1\u015c\22\32\1\7\1\0\1\7\2\32\4\66\1\0"+
    "\1\66\1\u0134\5\72\6\66\1\72\1\66\3\u015d\1\72"+
    "\4\66\1\72\1\66\6\u015d\21\72\2\66\1\72\6\u015d"+
    "\25\72\1\66\3\72\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\14\77\1\u015e"+
    "\16\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\11\77\1\u015f\21\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\26\77\1\u0160\4\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\1\77\1\u0161\31\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\13\77\1\351"+
    "\17\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\5\77\1\u0162\25\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\13\77\1\u0163\17\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\23\77\1\u0164\7\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\16\77\1\351"+
    "\14\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\u0165\4\66\1\72\1\66\27\77\2\66"+
    "\23\77\1\u0166\7\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\11\77\1\u0167\21\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\u0168\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\33\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\17\77\1\u012c\13\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\5\77\1\u0169"+
    "\25\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\14\77\1\332\16\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\17\77\1\u0137\13\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\u016a\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\33\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\5\77\1\u016b\25\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\u016c\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\33\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\17\77\1\u016d"+
    "\13\77\1\72\1\66\1\72\2\77\21\361\1\u016e\105\361"+
    "\70\0\1\u016f\44\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\1\u0170\32\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\22\32\1\u0171"+
    "\4\32\2\0\33\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\26\32\1\u0172\2\0\31\32\1\u0172\1\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\22\32\1\u0173\4\32"+
    "\2\0\24\32\1\u0173\6\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\2\32\1\u0174\24\32\2\0\3\32\1\u0174"+
    "\27\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\3\32"+
    "\1\u0175\23\32\2\0\4\32\1\u0175\26\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\23\32\1\u0176\3\32\2\0"+
    "\25\32\1\u0176\5\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\12\32\1\u0177\14\32\2\0\13\32\1\u0177\17\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\10\32\1\u0178"+
    "\16\32\2\0\11\32\1\u0178\21\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\10\32\1\u0179\16\32\2\0\11\32"+
    "\1\u0179\21\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\4\32\1\u017a\22\32\2\0\5\32\1\u017a\25\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\14\32\1\u017b\12\32"+
    "\2\0\15\32\1\u017b\15\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\22\32\1\u017c\4\32\2\0\24\32\1\u017c"+
    "\6\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\13\32"+
    "\1\u017d\13\32\2\0\14\32\1\u017d\16\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\17\32\1\u017e\7\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\20\32"+
    "\1\u017f\6\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\13\32\1\u0180\13\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\1\u0181\26\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\21\32"+
    "\1\u0182\5\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\22\32\1\u0183\10\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\1\32"+
    "\1\u0184\31\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\1\32\1\u0185\31\32\1\7\1\0\1\7"+
    "\2\32\75\0\1\u0186\14\0\1\u0187\22\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\27\32"+
    "\2\0\24\32\1\u0188\6\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\5\32\1\u0189\25\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\27\32\2\0\3\32"+
    "\1\u018a\27\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\27\32\2\0\7\32\1\u018b\23\32\1\7\1\0\1\7"+
    "\2\32\70\0\1\u018c\36\0\4\66\1\0\1\66\1\67"+
    "\5\72\6\66\1\72\1\66\3\u018d\1\72\4\66\1\72"+
    "\1\66\6\u018d\21\72\2\66\1\72\6\u018d\25\72\1\66"+
    "\3\72\4\66\1\0\1\66\1\u018e\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\33\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\5\77\1\u018f\25\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\1\77\1\u015e"+
    "\31\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\201\1\72\1\71\3\72\1\205\4\66\1\73\1\72"+
    "\1\66\3\77\1\72\4\66\1\72\1\66\27\77\2\66"+
    "\16\77\1\u0160\14\77\1\72\1\66\1\72\2\77\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\22\77\1\u012f\10\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\2\77\1\u0190\30\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\201\1\72"+
    "\1\71\3\72\1\205\4\66\1\73\1\72\1\66\3\77"+
    "\1\72\4\66\1\72\1\66\27\77\2\66\11\77\1\330"+
    "\21\77\1\72\1\66\1\72\2\77\4\66\1\0\1\66"+
    "\1\67\5\72\6\66\1\72\1\u0191\4\72\4\66\1\72"+
    "\1\66\27\72\2\66\34\72\1\66\3\72\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\u0165\4\66\1\72\1\66\27\77"+
    "\2\66\33\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\6\77\1\u0192\24\77\1\72\1\66\1\72\2\77"+
    "\4\66\1\0\1\66\1\201\1\72\1\71\3\72\1\205"+
    "\4\66\1\73\1\72\1\66\3\77\1\72\4\66\1\72"+
    "\1\66\27\77\2\66\22\77\1\u0137\10\77\1\72\1\66"+
    "\1\72\2\77\4\66\1\0\1\66\1\202\1\66\1\73"+
    "\10\66\1\73\2\66\3\73\7\66\27\73\2\66\23\73"+
    "\1\u0193\7\73\3\66\2\73\4\66\1\0\1\66\1\201"+
    "\1\72\1\71\3\72\1\205\4\66\1\73\1\72\1\66"+
    "\3\77\1\72\4\66\1\72\1\66\27\77\2\66\22\77"+
    "\1\351\10\77\1\72\1\66\1\72\2\77\4\66\1\0"+
    "\1\66\1\201\1\72\1\71\3\72\1\205\4\66\1\73"+
    "\1\72\1\66\3\77\1\72\4\66\1\72\1\66\27\77"+
    "\2\66\27\77\1\351\3\77\1\72\1\66\1\72\2\77"+
    "\21\361\1\u016e\11\361\1\u0194\73\361\103\0\1\u0195\31\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\10\32\1\u0196\16\32\2\0\33\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\4\32\1\u0197\22\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\16\32"+
    "\1\u0198\10\32\2\0\17\32\1\u0198\13\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\22\32\1\u0199\4\32\2\0"+
    "\24\32\1\u0199\6\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\16\32\1\u019a\10\32\2\0\17\32\1\u019a\13\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\17\32\1\u019b"+
    "\7\32\2\0\20\32\1\u019b\12\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\2\32\1\u019c\24\32\2\0\3\32"+
    "\1\u019c\27\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\1\u019d\26\32\2\0\1\32\1\u019d\31\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\4\32\1\u019e\22\32\2\0"+
    "\5\32\1\u019e\25\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\1\u019f\26\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\1\u01a0\32\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\4\32\1\u01a1\22\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\3\32\1\u01a2\23\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\4\32\1\u01a3\22\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\17\32\1\u01a4\13\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\27\32\2\0\16\32\1\u01a5\14\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\14\32\1\u01a6"+
    "\16\32\1\7\1\0\1\7\2\32\70\0\1\u01a7\136\0"+
    "\1\u01a8\34\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\27\32\2\0\22\32\1\u01a9\10\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\13\32\1\u01aa\17\32\1\7\1\0\1\7\2\32\103\0"+
    "\1\u01ab\23\0\4\66\1\0\1\66\1\67\5\72\6\66"+
    "\1\72\1\66\3\u01ac\1\72\4\66\1\72\1\66\6\u01ac"+
    "\21\72\2\66\1\72\6\u01ac\25\72\1\66\3\72\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\22\77\1\u015e\10\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\17\77\1\u01ad\13\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\177\14\66"+
    "\1\u01ae\107\66\1\0\1\66\1\201\1\72\1\71\3\72"+
    "\1\205\4\66\1\73\1\72\1\66\3\77\1\72\4\66"+
    "\1\72\1\66\27\77\2\66\31\77\1\u012f\1\77\1\72"+
    "\1\66\1\72\2\77\4\66\1\0\1\66\1\202\1\66"+
    "\1\73\10\66\1\73\2\66\3\73\7\66\27\73\2\66"+
    "\5\73\1\u01af\25\73\3\66\2\73\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\15\32"+
    "\1\u01b0\11\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\20\32\1\u01b1\6\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\15\32\1\u01b2\11\32"+
    "\2\0\16\32\1\u01b2\14\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\15\32\1\u01b3\11\32\2\0\16\32\1\u01b3"+
    "\14\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\22\32"+
    "\1\u01b4\4\32\2\0\24\32\1\u01b4\6\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\22\32\1\u01b5\4\32\2\0"+
    "\24\32\1\u01b5\6\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\20\32\1\u01b6\6\32\2\0\22\32\1\u01b6\10\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\20\32\1\u01b7"+
    "\6\32\2\0\33\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\15\32\1\u01b8\11\32\2\0\33\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\1\u01b9\26\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\25\32\1\u01ba\5\32\1\7\1\0\1\7\2\32\104\0"+
    "\1\u01bb\143\0\1\u01bc\105\0\1\u01bd\26\0\4\66\1\0"+
    "\1\66\1\u0134\5\72\6\66\1\72\1\66\4\72\4\66"+
    "\1\72\1\66\27\72\2\66\34\72\1\66\3\72\4\66"+
    "\1\0\1\66\1\201\1\72\1\71\3\72\1\205\4\66"+
    "\1\73\1\72\1\66\3\77\1\72\4\66\1\72\1\66"+
    "\27\77\2\66\30\77\1\u0137\2\77\1\72\1\66\1\72"+
    "\2\77\4\66\1\0\1\66\1\177\12\66\2\u01be\1\66"+
    "\3\u01be\7\66\27\u01be\2\66\33\u01be\3\66\2\u01be\4\66"+
    "\1\0\1\66\1\202\1\66\1\73\10\66\1\73\2\66"+
    "\3\73\7\66\27\73\2\66\22\73\1\u01bf\10\73\3\66"+
    "\2\73\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\5\32\1\u01c0\21\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\27\32\2\0"+
    "\1\u01c1\32\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\10\32\1\u01c2\16\32\2\0\11\32\1\u01c2\21\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\4\32\1\u01c3\22\32"+
    "\2\0\5\32\1\u01c3\25\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\1\u01c4\32\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\23\32\1\u01c5\3\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\22\32"+
    "\1\u01c6\4\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\27\32\2\0\16\32\1\u01c7\14\32\1\7"+
    "\1\0\1\7\2\32\100\0\1\u01c8\122\0\1\u01c9\130\0"+
    "\1\u01ca\30\0\4\66\1\0\1\66\1\177\12\66\1\u01be"+
    "\1\u01cb\1\66\3\u01be\7\66\27\u01be\2\66\33\u01be\3\66"+
    "\2\u01be\4\66\1\0\1\66\1\202\1\66\1\73\10\66"+
    "\1\73\2\66\3\73\7\66\27\73\2\66\11\73\1\u01cc"+
    "\21\73\3\66\2\73\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\16\32\1\u01cd\10\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\1\u01ce\26\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\15\32\1\u01cf\11\32\2\0\16\32\1\u01cf"+
    "\14\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\1\u01d0"+
    "\26\32\2\0\1\32\1\u01d0\31\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\15\32\1\u01d1\11\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\14\32\1\u01d2"+
    "\12\32\2\0\33\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\16\32\1\u01d3\10\32\2\0\33\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\27\32\2\0\4\32\1\u01d4"+
    "\26\32\1\7\1\0\1\7\2\32\103\0\1\u01d5\130\0"+
    "\1\u01d6\21\0\4\66\1\0\1\66\1\177\12\66\1\u01be"+
    "\1\u01cb\1\66\3\u01d7\7\66\27\u01d7\2\66\33\u01d7\3\66"+
    "\2\u01d7\4\66\1\0\1\66\1\202\1\66\1\73\10\66"+
    "\1\73\2\66\3\73\7\66\27\73\2\66\6\73\1\u01d8"+
    "\24\73\3\66\2\73\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\13\32\1\u01d9\13\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\6\32\1\u01da\20\32\2\0\7\32\1\u01da\23\32\1\7"+
    "\1\0\1\7\2\32\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\23\32\1\u01db\3\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\20\32\1\u01dc\6\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\120\0\1\u01dd\6\0\4\66\1\0\1\66\1\177"+
    "\12\66\1\u01be\1\u01cb\1\66\3\u01de\7\66\27\u01de\2\66"+
    "\33\u01de\3\66\2\u01de\4\66\1\0\1\66\1\u01df\1\66"+
    "\1\73\10\66\1\73\2\66\3\73\7\66\27\73\2\66"+
    "\33\73\3\66\2\73\6\0\6\7\6\0\1\7\1\0"+
    "\3\32\1\7\4\0\1\7\1\0\4\32\1\u01e0\22\32"+
    "\2\0\33\32\1\7\1\0\1\7\2\32\6\0\6\7"+
    "\6\0\1\7\1\0\3\32\1\7\4\0\1\7\1\0"+
    "\14\32\1\u01e1\12\32\2\0\33\32\1\7\1\0\1\7"+
    "\2\32\6\0\6\7\6\0\1\7\1\0\3\32\1\7"+
    "\4\0\1\7\1\0\10\32\1\u01e2\16\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\1\u01de\3\66\1\0\1\u01de"+
    "\1\u01e3\120\u01de\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\1\u01e4\26\32\2\0\33\32"+
    "\1\7\1\0\1\7\2\32\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\16\32\1\u01e5"+
    "\10\32\2\0\33\32\1\7\1\0\1\7\2\32\1\u01e6"+
    "\4\0\1\u01e6\1\u01e3\120\u01e6\6\0\6\7\6\0\1\7"+
    "\1\0\3\32\1\7\4\0\1\7\1\0\22\32\1\u01e7"+
    "\4\32\2\0\33\32\1\7\1\0\1\7\2\32\6\0"+
    "\6\7\6\0\1\7\1\0\3\32\1\7\4\0\1\7"+
    "\1\0\16\32\1\u01e8\10\32\2\0\33\32\1\7\1\0"+
    "\1\7\2\32\6\0\6\7\6\0\1\7\1\0\3\32"+
    "\1\7\4\0\1\7\1\0\20\32\1\u01e9\6\32\2\0"+
    "\33\32\1\7\1\0\1\7\2\32\6\0\6\7\6\0"+
    "\1\7\1\0\3\32\1\7\4\0\1\7\1\0\10\32"+
    "\1\u01ea\16\32\2\0\33\32\1\7\1\0\1\7\2\32"+
    "\6\0\6\7\6\0\1\7\1\0\3\32\1\7\4\0"+
    "\1\7\1\0\16\32\1\u01eb\10\32\2\0\33\32\1\7"+
    "\1\0\1\7\2\32";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\7\11\3\1\1\11\15\1\2\11"+
    "\21\1\1\11\1\0\4\1\1\0\31\1\1\0\3\1"+
    "\1\0\3\11\1\0\40\1\2\11\2\1\1\11\2\1"+
    "\1\0\36\1\1\11\1\1\2\0\52\1\1\0\36\1"+
    "\2\0\56\1\1\11\27\1\2\0\33\1\1\0\4\1"+
    "\1\0\16\1\1\0\3\1\2\0\26\1\2\0\4\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\1\11\21\1"+
    "\2\0\2\1\1\0\2\1\2\0\13\1\5\0\10\1"+
    "\1\0\1\11\3\0\10\1\1\0\1\11\2\0\4\1"+
    "\1\11\1\0\1\11\6\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[491];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
		private Symbol symbol(int type) {
			return new Symbol(type, yyline + 1, yycolumn + 1);
		}

		private Symbol symbol(int type, Object object) {
			return new Symbol(type, yyline + 1, yycolumn + 1, object);
		}

		private String getString(String str) {
			return str.substring(1, str.length() - 1);
		}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaptchaLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 95: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 96: break;
          case 3:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 97: break;
          case 4:
            { return symbol(IN, yytext());
            }
            // fall through
          case 98: break;
          case 5:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 99: break;
          case 6:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 100: break;
          case 7:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 101: break;
          case 8:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 102: break;
          case 9:
            { return symbol(COMMA, yytext());
            }
            // fall through
          case 103: break;
          case 10:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 104: break;
          case 11:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 105: break;
          case 12:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 106: break;
          case 13:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 107: break;
          case 14:
            { return symbol(SEMI, yytext());
            }
            // fall through
          case 108: break;
          case 15:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 109: break;
          case 16:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 110: break;
          case 17:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 111: break;
          case 18:
            { return symbol(ID_V, yytext());
            }
            // fall through
          case 112: break;
          case 19:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 113: break;
          case 20:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 114: break;
          case 21:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 115: break;
          case 22:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 116: break;
          case 23:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 117: break;
          case 24:
            { return symbol(STRING, getString(yytext()));
            }
            // fall through
          case 118: break;
          case 25:
            { return symbol(AND, yytext());
            }
            // fall through
          case 119: break;
          case 26:
            { return symbol(CHAR, getString(yytext()));
            }
            // fall through
          case 120: break;
          case 27:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 121: break;
          case 28:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 122: break;
          case 29:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 123: break;
          case 30:
            { return symbol(ID, yytext());
            }
            // fall through
          case 124: break;
          case 31:
            { return symbol(OR, yytext());
            }
            // fall through
          case 125: break;
          case 32:
            { return symbol(ID_, getString(yytext()));
            }
            // fall through
          case 126: break;
          case 33:
            { return symbol(INTQ, getString(yytext()));
            }
            // fall through
          case 127: break;
          case 34:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 128: break;
          case 35:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 129: break;
          case 36:
            { return symbol(PARAGRAPH, yytext());
            }
            // fall through
          case 130: break;
          case 37:
            { return symbol(ALT, yytext());
            }
            // fall through
          case 131: break;
          case 38:
            { return symbol(SRC, yytext());
            }
            // fall through
          case 132: break;
          case 39:
            { return symbol(PERCNTG, getString(yytext()));
            }
            // fall through
          case 133: break;
          case 40:
            { return symbol(BR, yytext());
            }
            // fall through
          case 134: break;
          case 41:
            { return symbol(H1, yytext());
            }
            // fall through
          case 135: break;
          case 42:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 136: break;
          case 43:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 137: break;
          case 44:
            { return symbol(CHR, yytext());
            }
            // fall through
          case 138: break;
          case 45:
            { return symbol(COLS, yytext());
            }
            // fall through
          case 139: break;
          case 46:
            { return symbol(HREF, yytext());
            }
            // fall through
          case 140: break;
          case 47:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 141: break;
          case 48:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 142: break;
          case 49:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 143: break;
          case 50:
            { return symbol(TYPE, yytext());
            }
            // fall through
          case 144: break;
          case 51:
            { return symbol(ONCLICK, getString(yytext()));
            }
            // fall through
          case 145: break;
          case 52:
            { return symbol(PIXEL, getString(yytext()));
            }
            // fall through
          case 146: break;
          case 53:
            { return symbol(CLASS_VALUE, getString(yytext()));
            }
            // fall through
          case 147: break;
          case 54:
            { return symbol(COLOUR, getString(yytext()));
            }
            // fall through
          case 148: break;
          case 55:
            { return symbol(DIV, yytext());
            }
            // fall through
          case 149: break;
          case 56:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 150: break;
          case 57:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 151: break;
          case 58:
            { return symbol(COLOR, yytext());
            }
            // fall through
          case 152: break;
          case 59:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 153: break;
          case 60:
            { return symbol(WIDTH, yytext());
            }
            // fall through
          case 154: break;
          case 61:
            { return symbol(ALIGN_VALUE, getString(yytext()));
            }
            // fall through
          case 155: break;
          case 62:
            { return symbol(TYPE_VALUE, getString(yytext()));
            }
            // fall through
          case 156: break;
          case 63:
            { return symbol(BODY, yytext());
            }
            // fall through
          case 157: break;
          case 64:
            { return symbol(GCIC, yytext());
            }
            // fall through
          case 158: break;
          case 65:
            { return symbol(HEAD, yytext());
            }
            // fall through
          case 159: break;
          case 66:
            { return symbol(LINK, yytext());
            }
            // fall through
          case 160: break;
          case 67:
            { return symbol(SPAM, yytext());
            }
            // fall through
          case 161: break;
          case 68:
            { return symbol(HEIGHT, yytext());
            }
            // fall through
          case 162: break;
          case 69:
            { return symbol(STR, yytext());
            }
            // fall through
          case 163: break;
          case 70:
            { return symbol(FONTF_VALUE, getString(yytext()));
            }
            // fall through
          case 164: break;
          case 71:
            { return symbol(GLOBAL, yytext());
            }
            // fall through
          case 165: break;
          case 72:
            { return symbol(INPUT, yytext());
            }
            // fall through
          case 166: break;
          case 73:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 167: break;
          case 74:
            { return symbol(ON_LOAD, yytext());
            }
            // fall through
          case 168: break;
          case 75:
            { return symbol(REVERSE, yytext());
            }
            // fall through
          case 169: break;
          case 76:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 170: break;
          case 77:
            { return symbol(DEC, yytext());
            }
            // fall through
          case 171: break;
          case 78:
            { return symbol(INT, yytext());
            }
            // fall through
          case 172: break;
          case 79:
            { return symbol(CLICK, yytext());
            }
            // fall through
          case 173: break;
          case 80:
            { return symbol(BUTTON, yytext());
            }
            // fall through
          case 174: break;
          case 81:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 175: break;
          case 82:
            { return symbol(SELECT, yytext());
            }
            // fall through
          case 176: break;
          case 83:
            { return symbol(FONTS, yytext());
            }
            // fall through
          case 177: break;
          case 84:
            { return symbol(ALERT, yytext());
            }
            // fall through
          case 178: break;
          case 85:
            { return symbol(TXTAREA, yytext());
            }
            // fall through
          case 179: break;
          case 86:
            { return symbol(LETPAR, yytext());
            }
            // fall through
          case 180: break;
          case 87:
            { return symbol(BCKGRND, yytext());
            }
            // fall through
          case 181: break;
          case 88:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 182: break;
          case 89:
            { return symbol(SCRIPT, yytext());
            }
            // fall through
          case 183: break;
          case 90:
            { return symbol(FONTF, yytext());
            }
            // fall through
          case 184: break;
          case 91:
            { return symbol(LETIMPAR, yytext());
            }
            // fall through
          case 185: break;
          case 92:
            { return symbol(URL, getString(yytext()));
            }
            // fall through
          case 186: break;
          case 93:
            { return symbol(RANDOM_N, yytext());
            }
            // fall through
          case 187: break;
          case 94:
            { return symbol(RANDOM_C, yytext());
            }
            // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
