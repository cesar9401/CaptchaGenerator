package com.cesar31.captchaweb.parser;

import com.cesar31.captchaweb.model.*;
import com.cesar31.captchaweb.control.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

class CaptchaParser;

parser code {:

	private HashMap<String, AST> scripts;

	private int scriptCount;
	private BuildTag tag;
	private ErrorHandler handler;

	private List<Err> errors;
	private Symbol cur_token;

	private Token type;

	//private AST ast;

	public CaptchaParser(CaptchaLex lex) {
		super(lex);
		this.tag = new BuildTag(this);
		this.handler = new ErrorHandler(this);

		// this.AST = new LinkedList<>();
		this.errors = new ArrayList<>();

		this.scripts = new HashMap<>();

		this.scriptCount = 0;
	}

	public void syntax_error(Symbol cur_token) {
		this.cur_token = cur_token;

		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		// System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			// System.out.printf("%s, ", symbl_name_from_id(i));
		}
		// System.out.println("");

		handler.getErrors((Token) cur_token.value, symbl_name_from_id(cur_token.sym), expected);
	}

	public List<Err> getErrors() {
		return this.errors;
	}

	protected int error_sync_size() {
		return 1;
	}

	private Token setQuote(Token t) {
		if(symbl_name_from_id(t.getType()).equals("CHAR")) {
			t.setValue("\'" + t.getValue() + "\'");
			return t;
		}

		t.setValue("\"" + t.getValue() +"\"");
		return t;
	}

	public HashMap<String, AST> getScripts() {
		return scripts;
	}

:}

terminal Token GCIC, HEAD, TITLE, LINK, BODY, SPAM, INPUT, TXTAREA, SELECT, OPTION, DIV, IMG, BR, BUTTON, H1, PARAGRAPH, SCRIPT, HREF, BCKGRND, COLOR, FONTS;
terminal Token FONTF, ALIGN, TYPE, ID, NAME, COLS, CLASS, SRC, WIDTH, HEIGHT, ALT, CLICK, INTEGER, DECIMAL, BOOL, TRUE, FALSE;
terminal Token CHR, QS, STR, ASC, DESC, LETPAR, LETIMPAR, REVERSE, RANDOM_C, RANDOM_N, ALERT, EXIT, GET, GLOBAL, COLOUR, INTQ, PIXEL, PERCNTG, ID_, ID_2, INT, DEC;
terminal Token GREATER, SMALLER, LBRACE, RBRACE, LBRACKET, RBRACKET, COLON, SEMI, EQEQ, NEQ, GRTREQ, SMLLREQ, OR, AND, NOT, PLUS, MINUS, TIMES, DIVIDE;
terminal Token URL, LPAREN, RPAREN, EQUAL, ROWS, FONTF_VALUE, ERROR;
terminal Token TYPE_VALUE, ALIGN_VALUE, CLASS_VALUE, COMMA, ON_LOAD, ONCLICK, IN, ID_V;
terminal Token STRING, CHAR, IF, THEN, ELSE, REPEAT, UNTIL, WHILE, THEN_WHILE, INIT, END, PROCESS, INSERT;

non terminal clgcic, clhead, cltitle, cllink, clbody, clspam, clinput, cltxtarea, clselect, cloption, cldiv, climg, clbutton, clh1, clparagraph, clscript;

non terminal Operation s, t, u, v, a, b, c, d, boolean_val, function;
non terminal List<Operation> insert_op;
non terminal List<Token> in, insert_content;
non terminal Param color, url, cls_rws, w_h;
non terminal Boolean mode;
non terminal Token str, str_q, str_nq, string, type_var, pxl_per;
non terminal Parameter id, name, href_src, bckgrnd_clr, font_size, font_family, text_align, type, cols_rows, clss, width_height, alt, onclick, opt, param;
non terminal List<Parameter> params;
non terminal HashMap<Param, Parameter> paragraph, button, h1, div, img, body, spam, input, txtarea, select, link, gcic, head, title, option, br, script;
non terminal Component c_script, c_title, c_link, c_spam, c_h1, c_button, c_paragraph, c_img, c_input, c_txtarea, b_opt, c_br, c_option, h_opt, c_body, c_head, c_select, c_div;
non terminal List<Component> body_opt, make_option, head_opt;
non terminal Captcha c_gcic;

non terminal Assignment control_stat;
non terminal Instruction stat, control_while, control_repeat, control_if;
non terminal LinkedList<Instruction> make_var, statement, scripting, make_script, assignment, instruction, ini, type_instruction, control, alert, exit, insert;
non terminal Variable insert_sq;
non terminal AST process;

non terminal make_process;

non terminal If if_, else_, else_if;
non terminal List<If> list_else_if;

/* gramatica principal */
c_gcic ::=
				gcic:m
				c_head:head
				c_body:body clgcic
				{:
					RESULT = tag.makeCaptcha(Tag.GCIC, m, head, body);
				:}
				;

c_head ::=
				head:m head_opt:components clhead
				{:
					RESULT = tag.makeTagParent(Tag.HEAD, m, components);
				:}
				;

head_opt ::=
				head_opt:comps h_opt:c
					{:
						comps.add(c);
						RESULT = comps;
					:}
				| h_opt:c
				{:
					List<Component> comps = new ArrayList<>();
					comps.add(c);
					RESULT = comps;
				:}
				;

h_opt ::=
				c_title:c {: RESULT = c; :}
				| c_link:c {: RESULT = c; :}
				;

/* list -> List<Component> */
c_body ::= body:m body_opt:components clbody
					{:
						RESULT = tag.makeTagParent(Tag.BODY, m, components);
					:}
				;

body_opt ::=
				body_opt:list b_opt:c
					{:
						list.add(c);
						RESULT = list;
					:}
				|
					{: RESULT = new ArrayList<Component>(); :}
				;

b_opt ::=
				c_h1:c {: RESULT = c; :}
				| c_paragraph :c {: RESULT = c; :}
				|	c_spam :c {: RESULT = c; :}
				| c_input :c {: RESULT = c; :}
				| c_txtarea :c {: RESULT = c; :}
				| c_select :c {: RESULT = c; :}
				| c_img :c {: RESULT = c; :}
				| c_button :c {: RESULT = c; :}
				| c_div :c {: RESULT = c; :}
				| c_br :c {: RESULT = c; :}
				| c_script :c {: RESULT = c; :}
				;

c_script ::=
				script:m make_process /*make_script*/ clscript
					{:
						//RESULT = tag.makeTag(Tag.SCRIPT, m, null);
						RESULT = tag.makeDivInsteadScript(scriptCount);
						scriptCount++;
						/* Insertar etiquetas desde aqui */

						//AST = list;
					:}
				;

/* make_process */
make_process ::=
				make_process process /* process -> linkedlist */
				|
				;
/* make_process */

/* proceso */
process ::=
				PROCESS:p LPAREN RPAREN LBRACKET make_script:list RBRACKET
					{:
						//System.out.println("Process: " + p.getValue());
						AST ast = new AST(p.getValue(), scriptCount);
						ast.addAll(list);
						scripts.put(p.getValue(), ast);
						// RESULT = list;
					:}
				;
/* proceso */

make_script ::=
				make_script:list scripting:a
					{:
						RESULT = list;
						RESULT.addAll(a);
					:}
				|
					{:
						RESULT = new LinkedList<>();
					:}
				;

scripting ::=
				/* Declaracion/Asignacion */
				statement:list
					{: RESULT = list; :}

				/* Asignacion */
				| assignment:list
					{: RESULT = list; :}

				/* ALERT_INFO */
				| alert:list
					{: RESULT = list; :}

				/* EXIT */
				| exit:list
					{: RESULT = list; :}

				/* INSERT */
				| insert:list
					{: RESULT = list; :}

				/* If, Repeat, While */
				| control:list
					{: RESULT = list; :}
				;

statement ::=
				type_var:t
					{: type = t; :}
				make_var:list SEMI
					{: RESULT = list; :}
				;

assignment ::=
				ID_V:id EQUAL a:v1 SEMI
					{:
						/* eh.makeAssignment(id, v1, e); */
						RESULT = new LinkedList<>();
						RESULT.add(new Assignment(id, v1));
					:}
				;

/* ALERT_INFO */
alert ::=
				ALERT LPAREN:lparen a:s1 RPAREN SEMI
					{:
						RESULT = new LinkedList<>();
						RESULT.add(new Alert(lparen, s1));
					:}
				| error LPAREN a RPAREN SEMI
				| ALERT error a RPAREN SEMI
				| ALERT LPAREN a error SEMI
				| ALERT LPAREN a RPAREN error
				;
/* ALERT_INFO */

/* EXIT */
exit ::=
				EXIT:t LPAREN RPAREN SEMI
					{:
						RESULT = new LinkedList<>();
						RESULT.add(new Exit(t));
					:}
				| error LPAREN RPAREN SEMI
				| EXIT error RPAREN SEMI
				| EXIT LPAREN error SEMI
				| EXIT LPAREN RPAREN error
				;
/* EXIT */

/* INSERT */
insert ::=
				INSERT LPAREN QS input:ins QS RPAREN SEMI
					{:
						RESULT = new LinkedList<>();
						RESULT.add(new Insert(tag.makeTag(Tag.INPUT, ins, null), scriptCount));
					:}
				| INSERT LPAREN insert_op:options RPAREN SEMI
					{:
						RESULT = new LinkedList<>();
						RESULT.add(new Insert(options, scriptCount));
					:}
				;
/* INSERT */

type_var ::=
				INT:t {: RESULT = t; :}
				| STR:t {: RESULT = t; :}
				| DEC:t {: RESULT = t; :}
				| BOOL:t {: RESULT = t; :}
				| CHR:t {: RESULT = t; :}
				;

make_var ::=
				make_var:list COMMA stat:a
					{:
						RESULT = list;
						RESULT.add(a);
					:}
				| stat:a
					{:
						RESULT = new LinkedList<>();
						RESULT.add(a);
					:}
				;

stat ::=
				mode:b1 ID_V:id EQUAL a:v1
					{:
						/* Asignar variables y agregar a tabla de simbolos */
						/* eh.addSymbolTable(type, id, v1, b1, e, true); */
						/* Nueva asignacion */
						RESULT = new Assignment(type, id, v1, b1);
					:}
				| mode:b1 ID_V:id
					{:
						/* Declarar variables y agregar a tabla de simbolos */
						/* eh.addSymbolTable(type, id, null, b1, e, false); */
						RESULT = new Statement(type, id, b1);
					:}
				;

mode ::=
				GLOBAL:s
				{: RESULT = true; :}
				|
				{: RESULT = false; :}
				;

/* Solo una instruccion */
instruction ::=
				/* Declaracion/Asignacion */
				statement:list
					{: RESULT = list; :}

				/* Asignacion */
				| assignment:list
					{: RESULT = list; :}

				/* ALERT_INFO */
				| alert:list
					{: RESULT = list; :}

				/* INSERT */
				| insert:list
					{: RESULT = list; :}

				/* EXIT */
				| exit:list
					{: RESULT = list; :}
				;
/* Solo una instruccion */

/* init */
ini ::=
				INIT LBRACE COLON make_script:list COLON RBRACE END
					{: RESULT = list; :}
				;

type_instruction ::=
				instruction:list
					{: RESULT = list; :}
				| ini:list
					{: RESULT = list; :}
				;
/* init */

/* IF - WHILE- REPEAT */
control ::=
				control_if:if_
					{:
						RESULT = new LinkedList<>();
						RESULT.add(if_);
					:}
				| control_while:wh
					{:
						RESULT = new LinkedList<>();
						RESULT.add(wh);
					:}
				| control_repeat:rp
					{:
						RESULT = new LinkedList<>();
						RESULT.add(rp);
					:}
				;

/* IF */
control_if ::=
				if_:if1
					{:
						List<If> list = new ArrayList<>();
						list.add(if1);
						RESULT = new IfInstruction(list);
					:}
				| if_:if1 else_:if2
					{:
						List<If> list = new ArrayList<>();
						list.add(if1);
						list.add(if2);
						RESULT = new IfInstruction(list);
					:}
				| if_:if1 list_else_if:if2
					{:
						List<If> list = new ArrayList<>();
						list.add(if1);
						list.addAll(if2);
						RESULT = new IfInstruction(list);
					:}
				| if_:if1 list_else_if:if2 else_:if3
					{:
						List<If> list = new ArrayList<>();
						list.add(if1);
						list.addAll(if2);
						list.add(if3);
						RESULT = new IfInstruction(list);
					:}
				;

if_ ::=
				IF LPAREN:lparen a:b1 RPAREN:rparen THEN type_instruction:list
					{: RESULT = new If("IF", b1, list, lparen); :}
				;

else_ ::=
				ELSE type_instruction:list
					{: RESULT = new If("ELSE", null, list, null); :}
				;

list_else_if ::=
				list_else_if:list else_if:if1
					{:
						list.add(if1);
						RESULT = list;
					:}
				| else_if:if1
					{:
						RESULT = new ArrayList<>();
						RESULT.add(if1);
					:}
				;

else_if ::=
				ELSE IF LPAREN:lparen a:b1 RPAREN:rparen THEN type_instruction:list
					{: RESULT = new If("IF_ELSE", b1, list, lparen); :}
				;
/* IF */

/* WHILE */
control_while ::=
				WHILE LPAREN:l a:b1 RPAREN:r THEN_WHILE type_instruction:list
					{: RESULT = new While(b1, list, l); :}
				;
/* WHILE */

/* REPEAT */
control_repeat ::=
				REPEAT:r
				LPAREN:l1 control_stat:b1 RPAREN
				UNTIL LPAREN:l2 a:b2 RPAREN
				type_instruction:list
					{: RESULT = new Repeat(b1, b2, list, l1, l2); :}
				;

control_stat ::=
				INT:t ID_V:id EQUAL a:v1
					{:
						// eh.checkForVariable(t, id, v1, e);
						// RESULT = new Assignment(type, id, v1, b1);
						RESULT = new Assignment(t, id, v1, false);
					:}
				| ID_V:id EQUAL a:v1
					{:
						// eh.checkForVariable(null, id, v1, e);
						RESULT = new Assignment(id, v1);
					:}
				;
/* REPEAT */
/* IF - WHILE- REPEAT */

/* Operaciones logicas y aritmeticas */
a ::=
        a:b1 OR:op b:b2 {: RESULT = new Operation(OperationType.OR, b1, b2, op); :}
        | b:b1 {: RESULT = b1; :}
        ;

b ::=
        b:b1 AND:op d:b2 {: RESULT = new Operation(OperationType.AND, b1, b2, op); :}
        | d:b1 {: RESULT = b1; :}
        ;

d ::=
				s:n1 SMALLER:op s:n2 {: RESULT = new Operation(OperationType.SMALLER, n1, n2, op); :}
				| s:n1 GREATER:op s:n2 {: RESULT = new Operation(OperationType.GREATER, n1, n2, op); :}
				| s:n1 GRTREQ:op s:n2 {: RESULT = new Operation(OperationType.GREATER_OR_EQUAL, n1, n2, op); :}
				| s:n1 SMLLREQ:op s:n2 {: RESULT = new Operation(OperationType.LESS_OR_EQUAL, n1, n2, op); :}
				| s:n1 EQEQ:op s:n2 {: RESULT = new Operation(OperationType.EQUAL, n1, n2, op); :}
				| s:n1 NEQ:op s:n2 {: RESULT = new Operation(OperationType.NOT_EQUAL, n1, n2, op); :}
				| s:n1 {: RESULT = n1; :}
				;

s ::=
				s:n1 PLUS:op t:n2 {: RESULT =  new Operation(OperationType.SUM, n1, n2, op); :}
				| s:n1 MINUS:op t:n2 {: RESULT =  new Operation(OperationType.SUBTRACTION, n1, n2, op); :}
				| t:n1 {: RESULT = n1; :}
				;

t ::=
				t:n1 TIMES:op u:n2 {: RESULT = new Operation(OperationType.MULTIPLICATION, n1, n2, op); :}
				| t:n1 DIVIDE:op u:n2 {: RESULT = new Operation(OperationType.DIVISION, n1, n2, op); :}
				| u:n1 {: RESULT = n1; :}
				;

u ::=
				MINUS:op c:n1 {: RESULT = new Operation(OperationType.UMINUS, n1, op); :}
				| c:n1 {: RESULT = n1; :}
				;

c ::=
        NOT:op function:b1 {: RESULT = new Operation(OperationType.NOT, b1, op); :}
        | function:b1 {: RESULT = b1; :}
        ;

function ::=
				v:b1 {: RESULT = b1; :}
				| ASC LPAREN:lparen a:s1 RPAREN  {: RESULT = new Operation(OperationType.ASC, s1, lparen); :}
				| DESC LPAREN:lparen a:s1 RPAREN {: RESULT = new Operation(OperationType.DESC, s1, lparen); :}
				| LETPAR LPAREN:lparen a:s1 RPAREN {: RESULT = new Operation(OperationType.LETPAR, s1, lparen); :}
				| LETIMPAR LPAREN:lparen a:s1 RPAREN {: RESULT = new Operation(OperationType.LETIMPAR, s1, lparen); :}
				| REVERSE LPAREN:lparen a:s1 RPAREN {: RESULT = new Operation(OperationType.REVERSE, s1, lparen); :}
				| RANDOM_C LPAREN:lparen RPAREN {: RESULT = new Operation(OperationType.RANDOM_C, null, lparen); :}
				| RANDOM_N LPAREN:lparen RPAREN {: RESULT = new Operation(OperationType.RANDOM_N, null, lparen); :}
				| GET LPAREN:lparen ID_2:s1 RPAREN {: RESULT = new Operation(OperationType.GET, s1); :}
				;

v ::=
				INTEGER:n1 {: RESULT = new Operation(OperationType.integer, new Variable(Var.INTEGER, n1.getValue())); :}
				| DECIMAL:n1 {: RESULT = new Operation(OperationType.decimal, new Variable(Var.DECIMAL, n1.getValue())); :}
				| string:s1 {: RESULT = new Operation(OperationType.string, new Variable(Var.STRING, s1.getValue())); :}
				| CHAR:ch1 {: RESULT = new Operation(OperationType.character, new Variable(Var.CHAR, ch1.getValue())); :}
				| ID_V:s {: RESULT = new Operation(OperationType.id, s); :}

				/* STRING CON COMILLAS */
				| insert_sq:v {: RESULT = new Operation(OperationType.string, v); :}
				/* STRING CON COMILLAS */

				| boolean_val:b1 {: RESULT = b1; :}
				| LPAREN a:n1 RPAREN {: RESULT = n1; :}
				;
/* Operaciones logicas y aritmeticas */

/* string */
string ::=
				STRING:s1 {: RESULT = s1; :}
				| ID_:s1 {: RESULT = s1; :}
				| ID_2:s1 {: RESULT = s1; :}
				| INTQ:s1 {: RESULT = s1; :}
				| FONTF_VALUE:s1 {: RESULT = s1; :}
				| ALIGN_VALUE:s1 {: RESULT = s1; :}
				| COLOUR:s1 {: RESULT = s1; :}
				| TYPE_VALUE:s1 {: RESULT = s1; :}
				| CLASS_VALUE:s1 {: RESULT = s1; :}
				| PIXEL:s1 {: RESULT = s1; :}
				| PERCNTG:s1 {: RESULT = s1; :}
				| ONCLICK:s1 {: RESULT = s1; :}
				| URL:s1 {: RESULT = s1; :}
				;
/* string */

/* boolean */
boolean_val ::=
				TRUE:b1 {: RESULT = new Operation(OperationType.bool, new Variable(Var.BOOLEAN, b1.getValue())); :}
				| FALSE:b1 {: RESULT = new Operation(OperationType.bool, new Variable(Var.BOOLEAN, b1.getValue())); :}
				;
/* boolean */

c_title ::=
				title:m in:list cltitle
					{: RESULT = tag.makeTag(Tag.TITLE, m, list); :}
				;

c_link ::=
				link:m cllink
					{: RESULT = tag.makeTag(Tag.LINK, m, null); :}
				;

c_spam ::=
				spam:m in:list clspam
					{: RESULT = tag.makeTag(Tag.SPAN, m, list); :}
				;

c_h1 ::=
				h1:m in:list clh1
					{: RESULT = tag.makeTag(Tag.H1, m, list); :}
				;

c_paragraph ::=
				paragraph:m in:list clparagraph
					{: RESULT = tag.makeTag(Tag.P, m, list); :}
				;

c_input ::=
				input:m clinput
					{: RESULT = tag.makeTag(Tag.INPUT, m, null); :}
				;

c_txtarea ::=
				txtarea:m cltxtarea
					{: RESULT = tag.makeTag(Tag.TEXTAREA, m, null); :}
				;

c_button ::=
				button:m in:list clbutton
					{: RESULT = tag.makeTag(Tag.BUTTON, m, list); :}
				;

c_select ::=
				select:m make_option:options clselect
					{: RESULT = tag.makeTagParent(Tag.SELECT, m, options); :}
				;

make_option ::=
				make_option:list c_option:o
					{:
						list.add(o);
						RESULT = list;
					:}
				|
					{: RESULT = new ArrayList<Component>(); :}
				;

c_option ::=
				option:m in:list cloption
					{: RESULT = tag.makeTag(Tag.OPTION, m, list); :}
				;

c_img ::=
				img:m climg
					{: RESULT = tag.makeTag(Tag.IMG, m, null); :}
				;

c_br ::=
				br:m
					{: RESULT = tag.makeTag(Tag.BR, m, null); :}
				;

c_div ::=
				div:m body_opt:children cldiv
					{:
						/* Opciones para crear div */
						RESULT = tag.makeTagParent(Tag.DIV, m, children);
					:}
				;

/* contet for p, span and h1 */
in ::=
				in:list str:s
					{:
						list.add(s);
						RESULT = list;
					:}
				| /* lambda */
					{:
						List<Token> list = new ArrayList<>();
						RESULT = list;
					:}
				;
/* contet for p, span and h1 */

/* content for insert */
insert_op ::=
				insert_op:list COMMA a:op1
					{:
						list.add(op1);
						RESULT = list;
					:}
				| a:op1
					{:
						RESULT = new ArrayList<>();
						RESULT.add(op1);
					:}
				;

insert_sq ::=
				QS insert_content:list QS
					{:
						String s = tag.getContent(list);
						// System.out.println("insert_sq -> " + s);
						if(s.length() == 1) {
							RESULT = new Variable(Var.CHAR, s);
						} else {
							RESULT = new Variable(Var.STRING, s);
						}
					:}
				;

insert_content ::=
				insert_content:list str_nq:t
					{:
						list.add(t);
						RESULT = list;
					:}
				| str_nq:t
					{:
						RESULT = new ArrayList<>();
						RESULT.add(t);
					:}
				;
/* content for insert */

str ::=
				str_q:s {: RESULT = s; :}
				| str_nq:s {: RESULT = s; :}
				;

str_nq ::=
				IN:s {: RESULT = s; :}
				| ID_V:s {: RESULT = s; :}
				| COLON:s {: RESULT = s; :}
				| INTEGER:s {: RESULT = s; :}
				| DECIMAL:s {: RESULT = s; :}
				| PLUS:s {: RESULT = s; :}
				| GCIC:s {: RESULT = s; :}
				| HEAD:s {: RESULT = s; :}
				| TITLE:s {: RESULT = s; :}
				| LINK:s {: RESULT = s; :}
				| BODY:s {: RESULT = s; :}
				| SPAM:s {: RESULT = s; :}
				| INPUT:s {: RESULT = s; :}
				| TXTAREA:s {: RESULT = s; :}
				| SELECT:s {: RESULT = s; :}
				| OPTION:s {: RESULT = s; :}
				| DIV:s {: RESULT = s; :}
				| IMG:s {: RESULT = s; :}
				| BR:s {: RESULT = s; :}
				| BUTTON:s {: RESULT = s; :}
				| PARAGRAPH:s {: RESULT = s; :}
				| SCRIPT:s {: RESULT = s; :}
				| HREF:s {: RESULT = s; :}
				| BCKGRND:s {: RESULT = s; :}
				| COLOR:s {: RESULT = s; :}
				| FONTS:s {: RESULT = s; :}
				| FONTF:s {: RESULT = s; :}
				| ALIGN:s {: RESULT = s; :}
				| TYPE:s {: RESULT = s; :}
				| ID:s {: RESULT = s; :}
				| NAME:s {: RESULT = s; :}
				| COLS:s {: RESULT = s; :}
				| ROWS:s {: RESULT = s; :}
				| CLASS:s {: RESULT = s; :}
				| SRC:s {: RESULT = s; :}
				| WIDTH:s {: RESULT = s; :}
				| HEIGHT:s {: RESULT = s; :}
				| ALT:s {: RESULT = s; :}
				| CLICK:s {: RESULT = s; :}
				| IF:s {: RESULT = s; :}
				| THEN:s {: RESULT = s; :}
				| ELSE:s {: RESULT = s; :}
				| REPEAT:s {: RESULT = s; :}
				| UNTIL:s {: RESULT = s; :}
				| THEN_WHILE:s {: RESULT = s; :}
				| INIT:s {: RESULT = s; :}
				| END:s {: RESULT = s; :}
				| INT:s {: RESULT = s; :}
				| DEC:s {: RESULT = s; :}
				| BOOL:s {: RESULT = s; :}
				| TRUE:s {: RESULT = s; :}
				| FALSE:s {: RESULT = s; :}
				| CHR:s {: RESULT = s; :}
				// | QS:s {: RESULT = s; :}
				| STR:s {: RESULT = s; :}
				| DESC:s {: RESULT = s; :}
				| LETPAR:s {: RESULT = s; :}
				| LETIMPAR:s {: RESULT = s; :}
				| REVERSE:s {: RESULT = s; :}
				| RANDOM_C:s {: RESULT = s; :}
				| RANDOM_N:s {: RESULT = s; :}
				| ALERT:s {: RESULT = s; :}
				| EXIT:s {: RESULT = s; :}
				| GET:s {: RESULT = s; :}
				| GLOBAL:s {: RESULT = s; :}
				| ON_LOAD:s {: RESULT = s; :}
				// | SMALLER:s {: RESULT = s; :}
				| GREATER:s {: RESULT = s; :}
				| LBRACE:s {: RESULT = s; :}
				| RBRACE:s {: RESULT = s; :}
				| LBRACKET:s {: RESULT = s; :}
				| RBRACKET:s {: RESULT = s; :}
				| SEMI:s {: RESULT = s; :}
				| EQUAL:s {: RESULT = s; :}
				| EQEQ:s {: RESULT = s; :}
				| NEQ:s {: RESULT = s; :}
				| GRTREQ:s {: RESULT = s; :}
				| SMLLREQ:s {: RESULT = s; :}
				| OR:s {: RESULT = s; :}
				| AND:s {: RESULT = s; :}
				| NOT:s {: RESULT = s; :}
				| MINUS:s {: RESULT = s; :}
				| TIMES:s {: RESULT = s; :}
				| DIVIDE:s {: RESULT = s; :}
				| LPAREN:s {: RESULT = s; :}
				| RPAREN:s {: RESULT = s; :}
				| COMMA:s {: RESULT = s; :}
				;

str_q ::=
				FONTF_VALUE:s {: RESULT = setQuote(s); :}
				| ALIGN_VALUE:s {: RESULT = setQuote(s); :}
				| COLOUR:s {: RESULT = setQuote(s); :}
				| TYPE_VALUE:s {: RESULT = setQuote(s); :}
				| CLASS_VALUE:s {: RESULT = setQuote(s); :}
				| INTQ:s {: RESULT = setQuote(s); :}
				| PIXEL:s {: RESULT = setQuote(s); :}
				| PERCNTG:s {: RESULT = setQuote(s); :}
				| ONCLICK:s {: RESULT = setQuote(s); :}
				| ID_:s {: RESULT = setQuote(s); :}
				| ID_2:s {: RESULT = setQuote(s); :}
				| URL:s {: RESULT = setQuote(s); :}
				| STRING:s {: RESULT = setQuote(s); :}
				| CHAR:s {: RESULT = setQuote(s); :}
				;

/* Etiqueta de apertura <C_GCIC> */
gcic ::=
				SMALLER:t GCIC params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.GCIC, list); :}
				| error GCIC params GREATER
				| SMALLER error params GREATER
				// | SMALLER GCIC params error
				;

/* <C_HEAD> */
head ::=
				SMALLER:t HEAD params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.HEAD, list); :}
				| error HEAD params GREATER
				| SMALLER error params GREATER
				// | SMALLER HEAD params error
				;

/* <C_TITLE> */
title ::=
				SMALLER:t TITLE params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.TITLE, list); :}
				| error TITLE params GREATER
				// | SMALLER error GREATER
				// | SMALLER TITLE params error
				;

/* <C_LINK> */
link ::=
				SMALLER:t LINK params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.LINK, list); :}
				| error LINK params GREATER
				// | SMALLER error params GREATER
				// | SMALLER LINK params error
				;

/* <C_BODY> */
body ::=
				SMALLER:t BODY params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.BODY, list); :}
				| error BODY params GREATER
				| SMALLER error params GREATER
				// | SMALLER BODY params error
				;

/* <C_SPAM> */
spam ::=
				SMALLER:t SPAM params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.SPAN, list); :}
				| error SPAM params GREATER
				// | SMALLER error params GREATER
				// | SMALLER SPAM params error
				;

/* <C_INPUT> */
input ::=
				SMALLER:t INPUT params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.INPUT, list); :}
				| error INPUT params GREATER
				// | SMALLER error params GREATER
				// | SMALLER INPUT params error
				;

/* <C_TEXTAREA> */
txtarea ::=
				SMALLER:t TXTAREA params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.TEXTAREA, list); :}
				| error TXTAREA params GREATER
				// | SMALLER error params GREATER
				// | SMALLER TXTAREA params error
				;

/* <C_SELECT> */
select ::=
				SMALLER:t SELECT params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.SELECT, list); :}
				| error SELECT params GREATER
				// | SMALLER error params GREATER
				// | SMALLER SELECT params error
				;

/* <C_OPTION> */
option ::=
				SMALLER:t OPTION params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.OPTION, list); :}
				| error OPTION params GREATER
				| SMALLER error params GREATER
				// | SMALLER OPTION params error
				;

/* <C_DIV> */
div ::=
				SMALLER:t DIV params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.DIV, list); :}
				| error DIV params GREATER
				// | SMALLER error params GREATER
				// | SMALLER DIV params error
				;

/* <C_IMG> */
img ::=
				SMALLER:t IMG params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.IMG, list); :}
				| error IMG params GREATER
				// | SMALLER error params GREATER
				// | SMALLER IMG params error
				;

/* <C_BR> */
br ::=
				SMALLER:t BR params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.BR, list); :}
				| error BR params GREATER
				// | SMALLER error GREATER
				// | SMALLER BR params error
				;

/* <C_BUTTON> */
button ::=
				SMALLER:t BUTTON params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.BUTTON, list); :}
				| error BUTTON params GREATER
				// | SMALLER error params GREATER
				// | SMALLER BUTTON params error
				;

/* <C_H1> */
h1 ::=
				SMALLER:t H1 params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.H1, list); :}
				| error H1 params GREATER
				| SMALLER error params GREATER
				// | SMALLER H1 params error
				;

/* <C_P> */
paragraph ::=
				SMALLER:t PARAGRAPH params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.P, list); :}
				| error PARAGRAPH params GREATER
				// | SMALLER error params GREATER
				// | SMALLER PARAGRAPH params error
				;

/* <C_SCRIPTING> */
script ::=
				SMALLER:t SCRIPT params:list GREATER
					{: RESULT = tag.getParameters(t, Tag.SCRIPT, list); :}
				| error SCRIPT params GREATER
				// | SMALLER error params GREATER
				// | SMALLER SCRIPT params error
				;

/* parametros de las etiquetas */
params ::=
				params:list param:p
					{:
						list.add(p);
						RESULT = list;
					:}
				|
						{: RESULT = new ArrayList<Parameter>(); :}
				;

param ::=
				LBRACKET opt:p RBRACKET
					{: RESULT = p; :}
				| error opt RBRACKET
				| LBRACKET opt error
				;

opt ::=
				id:p {: RESULT = p; :}
				| name:p  {: RESULT = p; :}
				| href_src:p  {: RESULT = p; :}
				| bckgrnd_clr:p  {: RESULT = p; :}
				| font_size:p  {: RESULT = p; :}
				| font_family:p  {: RESULT = p; :}
				| text_align:p  {: RESULT = p; :}
				| type:p  {: RESULT = p; :}
				| cols_rows:p  {: RESULT = p; :}
				| clss:p  {: RESULT = p; :}
				| width_height:p  {: RESULT = p; :}
				| alt:p  {: RESULT = p; :}
				| onclick:p  {: RESULT = p; :}
				| error
				;

id ::=
				ID EQUAL ID_:s
					{: RESULT = new Parameter(Param.ID, s.getValue()); :}
				| error EQUAL ID_
				| ID error ID_
				| ID EQUAL error
				;

name ::=
				NAME EQUAL STRING:s
					{: RESULT = new Parameter(Param.NAME, s.getValue()); :}
				| error EQUAL STRING
				| NAME error STRING
				| NAME EQUAL error
				;

/* href/src */
href_src ::=
				url:p EQUAL URL:s
					{: RESULT = new Parameter(p, s.getValue()); :}
				| error EQUAL URL
				| url error URL
				| url EQUAL error
				;

/* href/src */
url ::=
				HREF
					{: RESULT = Param.HREF; :}
				| SRC
					{: RESULT = Param.SRC; :}
				;

/* background / color */
bckgrnd_clr ::=
				color:p EQUAL COLOUR:s
					{: RESULT = new Parameter(p, s.getValue()); :}
				| error EQUAL COLOUR
				| color error COLOUR
				| color EQUAL error
				;

/* background / color */
color ::=
				BCKGRND
					{: RESULT = Param.BACKGROUND; :}
				| COLOR
					{: RESULT = Param.COLOR; :}
				;

font_size ::=
				FONTS EQUAL PIXEL:s
					{: RESULT = new Parameter(Param.FONT_SIZE, s.getValue()); :}
				// | error EQUAL PIXEL
				| FONTS error PIXEL
				| FONTS EQUAL error
				;

font_family ::=
				FONTF EQUAL FONTF_VALUE:s
					{: RESULT = new Parameter(Param.FONT_FAMILY, s.getValue()); :}
				| error EQUAL FONTF_VALUE
				| FONTF error FONTF_VALUE
				| FONTF EQUAL error
				;

text_align ::=
				ALIGN EQUAL ALIGN_VALUE:s
					{: RESULT = new Parameter(Param.TEXT_ALIGN, s.getValue()); :}
				| error EQUAL ALIGN_VALUE
				| ALIGN error ALIGN_VALUE
				| ALIGN EQUAL error
				;

/* type for inputs */
type ::=
				TYPE EQUAL TYPE_VALUE:s
					{: RESULT = new Parameter(Param.TYPE, s.getValue()); :}
				| error EQUAL TYPE_VALUE
				| TYPE error TYPE_VALUE
				| TYPE EQUAL error
				;

cols_rows ::=
				cls_rws:p EQUAL INTQ:s
					{: RESULT = new Parameter(p, s.getValue()); :}
				| error EQUAL INTQ
				| cls_rws error INTQ
				| cls_rws EQUAL error
				;

cls_rws ::=
				COLS
					{: RESULT = Param.COLS; :}
				| ROWS
					{: RESULT = Param.ROWS; :}
				;

clss ::=
				CLASS EQUAL CLASS_VALUE:s
					{: RESULT = new Parameter(Param.CLASS, s.getValue()); :}
				| error EQUAL CLASS_VALUE
				| CLASS error CLASS_VALUE
				| CLASS EQUAL error
				;

/* width/height */
width_height ::=
				w_h:p EQUAL pxl_per:s
					{: RESULT = new Parameter(p, s.getValue()); :}
				| error EQUAL pxl_per
				| w_h error pxl_per
				| w_h EQUAL error
				;

w_h ::=
				WIDTH:p {: RESULT = Param.WIDTH; :}
				| HEIGHT:p {: RESULT = Param.HEIGHT; :}
				;

pxl_per ::=
				PIXEL:s
					{: RESULT = s; :}
				| PERCNTG:s
					{: RESULT = s; :}
				;

/* alt */
alt ::=
				ALT EQUAL STRING:s
					{: RESULT = new Parameter(Param.ALT, s.getValue()); :}
				// | error EQUAL STRING // alt ::= error ...  and name ::= error ...
				| ALT error STRING
				| ALT EQUAL error
				;

/* onclick */
onclick ::=
				CLICK EQUAL ONCLICK:s
					{: RESULT = new Parameter(Param.ONCLICK, s.getValue()); :}
				| error EQUAL ONCLICK
				| CLICK error ONCLICK
				| CLICK EQUAL error
				;
/* --------------- Etiquetas de cierre --------------- */
/* </C_GCIC> */
clgcic ::=
				SMALLER DIVIDE GCIC GREATER
				| error DIVIDE GCIC GREATER
				| SMALLER error GCIC GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE GCIC error
				;

/* </C_HEAD> */
clhead ::=
				SMALLER DIVIDE HEAD GREATER
				| error DIVIDE HEAD GREATER
				| SMALLER error HEAD GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE HEAD error
				;

/* </C_TITLE> */
cltitle ::=
				SMALLER DIVIDE TITLE GREATER
				| error DIVIDE TITLE GREATER
				| SMALLER error TITLE GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE TITLE error
				;

/* </C_LINK> */
cllink ::=
				SMALLER DIVIDE LINK GREATER
				| error DIVIDE LINK GREATER
				| SMALLER error LINK GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE LINK error
				;

/* </C_BODY> */
clbody ::=
				SMALLER DIVIDE BODY GREATER
				| error DIVIDE BODY GREATER
				| SMALLER error BODY GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE BODY error
				;

/* </C_SPAM> */
clspam ::=
				SMALLER DIVIDE SPAM GREATER
				| error DIVIDE SPAM GREATER
				| SMALLER error SPAM GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE SPAM error
				;

/* </C_INPUT> */
clinput ::=
				SMALLER DIVIDE INPUT GREATER
				| error DIVIDE INPUT GREATER
				| SMALLER error INPUT GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE INPUT error
				;

/* </C_TEXTAREA> */
cltxtarea ::=
				SMALLER DIVIDE TXTAREA GREATER
				| error DIVIDE TXTAREA GREATER
				| SMALLER error TXTAREA GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE TXTAREA error
				;

/* </C_SELECT> */
clselect ::=
				SMALLER DIVIDE SELECT GREATER
				| error DIVIDE SELECT GREATER
				| SMALLER error SELECT GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE SELECT error
				;

/* </C_OPTION> */
cloption ::=
				SMALLER DIVIDE OPTION GREATER
				| error DIVIDE OPTION GREATER
				| SMALLER error OPTION GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE OPTION error
				;

/* </C_DIV> */
cldiv ::=
				SMALLER DIVIDE DIV GREATER
				| error DIVIDE DIV GREATER
				| SMALLER error DIV GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE DIV error
				;

/* </C_IMG> */
climg ::=
				SMALLER DIVIDE IMG GREATER
				| error DIVIDE IMG GREATER
				| SMALLER error IMG GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE IMG error
				;

/* </C_BUTTON> */
clbutton ::=
				SMALLER DIVIDE BUTTON GREATER
				| error DIVIDE BUTTON GREATER
				| SMALLER error BUTTON GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE BUTTON error
				;

/* </C_H1> */
clh1 ::=
				SMALLER DIVIDE H1 GREATER
				| error DIVIDE H1 GREATER
				| SMALLER error H1 GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE H1 error
				;

/* </C_P> */
clparagraph ::=
				SMALLER DIVIDE PARAGRAPH GREATER
				| error DIVIDE PARAGRAPH GREATER
				| SMALLER error PARAGRAPH GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE PARAGRAPH error
				;

/* <C_SCRIPTING> */
clscript ::=
				SMALLER DIVIDE SCRIPT GREATER
				| error DIVIDE SCRIPT GREATER
				| SMALLER error SCRIPT GREATER
				| SMALLER DIVIDE error GREATER
				| SMALLER DIVIDE SCRIPT error
				;
