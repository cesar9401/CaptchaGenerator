
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.captchaweb.parser;

import com.cesar31.captchaweb.model.*;
import com.cesar31.captchaweb.control.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CaptchaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CaptchaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CaptchaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CaptchaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CaptchaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\002\030\006\000\002\002\004\000\002\046" +
    "\005\000\002\047\004\000\002\047\003\000\002\050\003" +
    "\000\002\050\003\000\002\051\005\000\002\052\004\000" +
    "\002\052\002\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\054\005\000" +
    "\002\055\004\000\002\055\002\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\060\005\000\002\072" +
    "\006\000\002\115\003\000\002\115\003\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\056\005\000" +
    "\002\056\003\000\002\057\006\000\002\057\004\000\002" +
    "\112\003\000\002\112\002\000\002\070\004\000\002\070" +
    "\003\000\002\066\003\000\002\066\003\000\002\065\003" +
    "\000\002\065\003\000\002\116\011\000\002\071\003\000" +
    "\002\071\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\061\011\000\002\062\012\000\002\062" +
    "\004\000\002\062\002\000\002\063\010\000\002\064\013" +
    "\000\002\077\006\000\002\077\005\000\002\100\005\000" +
    "\002\100\003\000\002\101\005\000\002\101\003\000\002" +
    "\103\005\000\002\103\005\000\002\103\005\000\002\103" +
    "\005\000\002\103\005\000\002\103\005\000\002\103\003" +
    "\000\002\073\005\000\002\073\005\000\002\073\003\000" +
    "\002\074\005\000\002\074\005\000\002\074\003\000\002" +
    "\075\004\000\002\075\003\000\002\102\004\000\002\102" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\005\000" +
    "\002\114\003\000\002\114\003\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\104\003\000\002\104\003\000" +
    "\002\031\005\000\002\032\004\000\002\033\005\000\002" +
    "\034\005\000\002\036\005\000\002\040\004\000\002\041" +
    "\004\000\002\035\005\000\002\044\005\000\002\043\004" +
    "\000\002\043\002\000\002\042\005\000\002\037\004\000" +
    "\002\045\005\000\002\105\004\000\002\105\002\000\002" +
    "\113\003\000\002\113\003\000\002\153\006\000\002\153" +
    "\006\000\002\153\006\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\152\006\000\002" +
    "\152\006\000\002\145\006\000\002\145\006\000\002\145" +
    "\006\000\002\146\006\000\002\146\006\000\002\147\006" +
    "\000\002\147\006\000\002\150\006\000\002\150\006\000" +
    "\002\151\006\000\002\151\006\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\143" +
    "\006\000\002\143\006\000\002\144\006\000\002\144\006" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\141\006\000\002\141\006\000\002\142\006\000\002" +
    "\142\006\000\002\142\006\000\002\140\006\000\002\140" +
    "\006\000\002\006\005\000\002\006\005\000\002\137\004" +
    "\000\002\137\002\000\002\136\005\000\002\136\005\000" +
    "\002\136\005\000\002\135\003\000\002\135\003\000\002" +
    "\135\003\000\002\135\003\000\002\135\003\000\002\135" +
    "\003\000\002\135\003\000\002\135\003\000\002\135\003" +
    "\000\002\135\003\000\002\135\003\000\002\135\003\000" +
    "\002\135\003\000\002\135\003\000\002\120\005\000\002" +
    "\120\005\000\002\120\005\000\002\120\005\000\002\121" +
    "\005\000\002\121\005\000\002\121\005\000\002\121\005" +
    "\000\002\122\005\000\002\122\005\000\002\122\005\000" +
    "\002\122\005\000\002\107\003\000\002\107\003\000\002" +
    "\123\005\000\002\123\005\000\002\123\005\000\002\123" +
    "\005\000\002\106\003\000\002\106\003\000\002\124\005" +
    "\000\002\124\005\000\002\124\005\000\002\125\005\000" +
    "\002\125\005\000\002\125\005\000\002\125\005\000\002" +
    "\126\005\000\002\126\005\000\002\126\005\000\002\126" +
    "\005\000\002\127\005\000\002\127\005\000\002\127\005" +
    "\000\002\127\005\000\002\130\005\000\002\130\005\000" +
    "\002\130\005\000\002\130\005\000\002\110\003\000\002" +
    "\110\003\000\002\131\005\000\002\131\005\000\002\131" +
    "\005\000\002\131\005\000\002\132\005\000\002\132\005" +
    "\000\002\132\005\000\002\132\005\000\002\111\003\000" +
    "\002\111\003\000\002\117\003\000\002\117\003\000\002" +
    "\133\005\000\002\133\005\000\002\133\005\000\002\134" +
    "\005\000\002\134\005\000\002\134\005\000\002\134\005" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\020\006\000\002" +
    "\021\006\000\002\021\006\000\002\021\006\000\002\021" +
    "\006\000\002\021\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\023\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\024\006\000\002\024" +
    "\006\000\002\024\006\000\002\024\006\000\002\024\006" +
    "\000\002\025\006\000\002\025\006\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\026\006\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\026" +
    "\006\000\002\027\006\000\002\027\006\000\002\027\006" +
    "\000\002\027\006\000\002\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0299\000\006\003\004\100\005\001\002\000\004\004" +
    "\u0299\001\002\000\006\003\u0293\004\u0294\001\002\000\006" +
    "\003\011\100\014\001\002\000\004\002\010\001\002\000" +
    "\004\002\000\001\002\000\004\005\u0291\001\002\000\006" +
    "\003\323\100\324\001\002\000\006\003\023\100\026\001" +
    "\002\000\006\003\015\005\016\001\002\000\004\077\021" +
    "\001\002\000\006\003\020\077\017\001\002\000\006\003" +
    "\uff88\100\uff88\001\002\000\006\003\uff85\100\uff85\001\002" +
    "\000\006\003\uff86\100\uff86\001\002\000\006\003\ufffd\100" +
    "\ufffd\001\002\000\006\006\274\007\272\001\002\000\006" +
    "\003\ufffb\100\ufffb\001\002\000\006\003\302\100\303\001" +
    "\002\000\006\006\064\007\061\001\002\000\006\003\056" +
    "\100\060\001\002\000\006\003\ufffc\100\ufffc\001\002\000" +
    "\012\003\uff8e\100\uff8e\140\uff8e\141\uff8e\001\002\000\012" +
    "\003\034\100\035\140\033\141\037\001\002\000\012\003" +
    "\uff8d\100\uff8d\140\uff8d\141\uff8d\001\002\000\004\121\052" +
    "\001\002\000\006\003\041\121\042\001\002\000\006\003" +
    "\uff9d\100\uff9d\001\002\000\012\003\uff8c\100\uff8c\140\uff8c" +
    "\141\uff8c\001\002\000\012\003\uff8f\100\uff8f\140\uff8f\141" +
    "\uff8f\001\002\000\004\006\050\001\002\000\006\003\043" +
    "\006\044\001\002\000\004\077\047\001\002\000\006\003" +
    "\046\077\045\001\002\000\006\003\uff07\100\uff07\001\002" +
    "\000\006\003\uff03\100\uff03\001\002\000\006\003\uff04\100" +
    "\uff04\001\002\000\004\077\051\001\002\000\006\003\uff05" +
    "\100\uff05\001\002\000\004\006\053\001\002\000\004\077" +
    "\054\001\002\000\006\003\uff06\100\uff06\001\002\000\006" +
    "\003\ufffe\100\ufffe\001\002\000\010\006\274\007\272\121" +
    "\273\001\002\000\006\003\uffff\100\uffff\001\002\000\012" +
    "\003\062\006\064\007\061\121\063\001\002\000\010\003" +
    "\uff5f\077\uff5f\103\uff5f\001\002\000\004\005\074\001\002" +
    "\000\006\003\067\005\070\001\002\000\006\003\065\077" +
    "\066\001\002\000\012\003\uff82\100\uff82\140\uff82\141\uff82" +
    "\001\002\000\012\003\uff84\100\uff84\140\uff84\141\uff84\001" +
    "\002\000\004\077\073\001\002\000\006\003\072\077\071" +
    "\001\002\000\006\003\uff0c\100\uff0c\001\002\000\006\003" +
    "\uff08\100\uff08\001\002\000\006\003\uff09\100\uff09\001\002" +
    "\000\004\077\075\001\002\000\006\003\uff0a\100\uff0a\001" +
    "\002\000\010\003\077\077\100\103\101\001\002\000\046" +
    "\003\123\025\141\026\134\027\130\030\144\031\104\032" +
    "\145\033\114\034\121\035\127\036\131\040\116\041\142" +
    "\042\105\043\126\044\137\045\136\126\110\001\002\000" +
    "\006\003\uff81\100\uff81\001\002\000\046\003\123\025\141" +
    "\026\134\027\130\030\144\031\104\032\145\033\114\034" +
    "\121\035\127\036\131\040\116\041\142\042\105\043\126" +
    "\044\137\045\136\126\110\001\002\000\010\003\uff60\077" +
    "\uff60\103\uff60\001\002\000\006\003\uff59\104\uff59\001\002" +
    "\000\006\003\263\125\264\001\002\000\006\003\uff1c\125" +
    "\uff1c\001\002\000\006\003\256\125\257\001\002\000\006" +
    "\003\251\125\252\001\002\000\006\003\uff25\125\uff25\001" +
    "\002\000\006\003\244\125\245\001\002\000\006\003\uff5a" +
    "\104\uff5a\001\002\000\006\003\uff50\104\uff50\001\002\000" +
    "\006\003\237\125\240\001\002\000\006\003\uff53\104\uff53" +
    "\001\002\000\006\003\232\125\233\001\002\000\006\003" +
    "\230\104\231\001\002\000\006\003\uff52\104\uff52\001\002" +
    "\000\006\003\223\125\224\001\002\000\006\003\uff57\104" +
    "\uff57\001\002\000\010\003\uff4e\104\uff4e\125\205\001\002" +
    "\000\006\003\200\125\201\001\002\000\006\003\uff51\104" +
    "\uff51\001\002\000\006\003\uff1b\125\uff1b\001\002\000\006" +
    "\003\173\125\174\001\002\000\006\003\uff3a\125\uff3a\001" +
    "\002\000\006\003\uff26\125\uff26\001\002\000\006\003\uff5b" +
    "\104\uff5b\001\002\000\006\003\uff4f\104\uff4f\001\002\000" +
    "\006\003\uff3b\125\uff3b\001\002\000\006\003\uff55\104\uff55" +
    "\001\002\000\006\003\166\125\167\001\002\000\006\003" +
    "\161\125\162\001\002\000\006\003\uff58\104\uff58\001\002" +
    "\000\006\003\uff41\125\uff41\001\002\000\006\003\uff40\125" +
    "\uff40\001\002\000\006\003\uff56\104\uff56\001\002\000\006" +
    "\003\154\125\155\001\002\000\006\003\147\125\150\001" +
    "\002\000\006\003\uff54\104\uff54\001\002\000\004\133\153" +
    "\001\002\000\006\003\151\133\152\001\002\000\006\003" +
    "\uff2f\104\uff2f\001\002\000\006\003\uff32\104\uff32\001\002" +
    "\000\006\003\uff30\104\uff30\001\002\000\004\072\160\001" +
    "\002\000\006\003\156\072\157\001\002\000\006\003\uff37" +
    "\104\uff37\001\002\000\006\003\uff39\104\uff39\001\002\000" +
    "\006\003\uff38\104\uff38\001\002\000\004\142\165\001\002" +
    "\000\006\003\164\142\163\001\002\000\006\003\uff18\104" +
    "\uff18\001\002\000\006\003\uff16\104\uff16\001\002\000\006" +
    "\003\uff17\104\uff17\001\002\000\004\137\172\001\002\000" +
    "\006\003\170\137\171\001\002\000\006\003\uff12\104\uff12" +
    "\001\002\000\006\003\uff15\104\uff15\001\002\000\006\003" +
    "\uff13\104\uff13\001\002\000\004\142\177\001\002\000\006" +
    "\003\176\142\175\001\002\000\006\003\uff49\104\uff49\001" +
    "\002\000\006\003\uff46\104\uff46\001\002\000\006\003\uff47" +
    "\104\uff47\001\002\000\004\070\204\001\002\000\006\003" +
    "\202\070\203\001\002\000\006\003\uff3c\104\uff3c\001\002" +
    "\000\006\003\uff3f\104\uff3f\001\002\000\006\003\uff3d\104" +
    "\uff3d\001\002\000\032\070\220\071\210\072\221\073\217" +
    "\074\207\122\216\127\211\132\222\133\206\134\215\137" +
    "\212\142\213\001\002\000\006\003\uff31\104\uff31\001\002" +
    "\000\006\003\uff4c\104\uff4c\001\002\000\006\003\uff29\104" +
    "\uff29\001\002\000\006\003\uff35\104\uff35\001\002\000\006" +
    "\003\uff14\104\uff14\001\002\000\006\003\uff48\104\uff48\001" +
    "\002\000\006\003\uff1f\104\uff1f\001\002\000\006\003\uff23" +
    "\104\uff23\001\002\000\006\003\uff44\104\uff44\001\002\000" +
    "\006\003\uff19\104\uff19\001\002\000\006\003\uff3e\104\uff3e" +
    "\001\002\000\006\003\uff1a\104\uff1a\001\002\000\006\003" +
    "\uff2d\104\uff2d\001\002\000\004\074\227\001\002\000\006" +
    "\003\226\074\225\001\002\000\006\003\uff4d\104\uff4d\001" +
    "\002\000\006\003\uff4a\104\uff4a\001\002\000\006\003\uff4b" +
    "\104\uff4b\001\002\000\010\003\uff5c\077\uff5c\103\uff5c\001" +
    "\002\000\010\003\uff5e\077\uff5e\103\uff5e\001\002\000\004" +
    "\134\236\001\002\000\006\003\234\134\235\001\002\000" +
    "\006\003\uff21\104\uff21\001\002\000\006\003\uff24\104\uff24" +
    "\001\002\000\006\003\uff22\104\uff22\001\002\000\004\132" +
    "\243\001\002\000\006\003\241\132\242\001\002\000\006" +
    "\003\uff2b\104\uff2b\001\002\000\006\003\uff2e\104\uff2e\001" +
    "\002\000\006\003\uff2c\104\uff2c\001\002\000\004\071\250" +
    "\001\002\000\006\003\246\071\247\001\002\000\006\003" +
    "\uff27\104\uff27\001\002\000\006\003\uff2a\104\uff2a\001\002" +
    "\000\006\003\uff28\104\uff28\001\002\000\006\072\221\073" +
    "\217\001\002\000\010\003\254\072\221\073\217\001\002" +
    "\000\006\003\uff20\104\uff20\001\002\000\006\003\uff1d\104" +
    "\uff1d\001\002\000\006\003\uff1e\104\uff1e\001\002\000\004" +
    "\122\262\001\002\000\006\003\261\122\260\001\002\000" +
    "\006\003\uff45\104\uff45\001\002\000\006\003\uff42\104\uff42" +
    "\001\002\000\006\003\uff43\104\uff43\001\002\000\004\127" +
    "\267\001\002\000\006\003\265\127\266\001\002\000\006" +
    "\003\uff33\104\uff33\001\002\000\006\003\uff36\104\uff36\001" +
    "\002\000\006\003\uff34\104\uff34\001\002\000\004\104\271" +
    "\001\002\000\010\003\uff5d\077\uff5d\103\uff5d\001\002\000" +
    "\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\004\005\276" +
    "\001\002\000\004\077\275\001\002\000\012\003\uff83\100" +
    "\uff83\140\uff83\141\uff83\001\002\000\004\077\277\001\002" +
    "\000\006\003\uff0b\100\uff0b\001\002\000\010\003\077\077" +
    "\301\103\101\001\002\000\006\003\uff80\100\uff80\001\002" +
    "\000\004\121\316\001\002\000\006\003\305\121\306\001" +
    "\002\000\006\003\uff9c\100\uff9c\001\002\000\004\007\314" +
    "\001\002\000\006\003\310\007\307\001\002\000\006\003" +
    "\313\077\312\001\002\000\004\077\311\001\002\000\006" +
    "\003\ufeff\100\ufeff\001\002\000\006\003\uff02\100\uff02\001" +
    "\002\000\006\003\ufefe\100\ufefe\001\002\000\004\077\315" +
    "\001\002\000\006\003\uff00\100\uff00\001\002\000\004\007" +
    "\317\001\002\000\004\077\320\001\002\000\006\003\uff01" +
    "\100\uff01\001\002\000\006\003\u0283\100\u0284\001\002\000" +
    "\006\003\ufff8\100\ufff8\001\002\000\004\010\333\001\002" +
    "\000\006\003\325\010\326\001\002\000\010\003\uff5f\077" +
    "\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f" +
    "\001\002\000\010\003\077\077\330\103\101\001\002\000" +
    "\006\003\uff7f\100\uff7f\001\002\000\010\003\077\077\332" +
    "\103\101\001\002\000\006\003\uff7d\100\uff7d\001\002\000" +
    "\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\077" +
    "\077\335\103\101\001\002\000\006\003\uff7e\100\uff7e\001" +
    "\002\000\006\003\356\100\340\001\002\000\012\003\uff8e" +
    "\100\uff8e\140\uff8e\141\uff8e\001\002\000\034\003\u026a\011" +
    "\u0228\012\u0222\013\u0220\014\u0227\016\u0224\017\u022a\020\u0223" +
    "\021\u0221\022\u0229\023\u022b\024\u0225\121\u0269\001\002\000" +
    "\006\003\ufff4\100\ufff4\001\002\000\006\003\ufffa\100\ufffa" +
    "\001\002\000\006\003\ufff1\100\ufff1\001\002\000\012\003" +
    "\uff8e\100\uff8e\140\uff8e\141\uff8e\001\002\000\006\003\ufff0" +
    "\100\ufff0\001\002\000\006\003\ufff2\100\ufff2\001\002\000" +
    "\006\003\ufff5\100\ufff5\001\002\000\006\003\u024b\100\u024c" +
    "\001\002\000\006\003\ufff8\100\ufff8\001\002\000\006\003" +
    "\uff93\100\uff93\001\002\000\006\003\ufff7\100\ufff7\001\002" +
    "\000\006\003\ufff9\100\ufff9\001\002\000\006\003\u01e2\100" +
    "\u01e3\001\002\000\032\011\u01c7\012\u01c3\013\u01c0\014\u01c6" +
    "\016\u01c4\017\u01ca\020\u01c2\021\u01c1\022\u01c8\023\u01c9\024" +
    "\u01c5\121\u01bf\001\002\000\006\003\uffed\100\uffed\001\002" +
    "\000\006\003\ufff3\100\ufff3\001\002\000\006\003\uffef\100" +
    "\uffef\001\002\000\012\003\uff8e\100\uff8e\140\uff8e\141\uff8e" +
    "\001\002\000\006\003\ufff6\100\ufff6\001\002\000\012\003" +
    "\uff8e\100\uff8e\140\uff8e\141\uff8e\001\002\000\006\003\uffee" +
    "\100\uffee\001\002\000\030\003\uffea\050\uffea\053\uffea\054" +
    "\uffea\075\uffea\076\uffea\100\uffea\141\uffea\144\uffea\147\uffea" +
    "\151\uffea\001\002\000\006\003\370\100\371\001\002\000" +
    "\004\121\u0104\001\002\000\006\003\373\121\374\001\002" +
    "\000\006\003\uff91\100\uff91\001\002\000\004\017\u0102\001" +
    "\002\000\006\003\375\017\376\001\002\000\004\077\u0101" +
    "\001\002\000\006\003\377\077\u0100\001\002\000\006\003" +
    "\ufed6\100\ufed6\001\002\000\006\003\ufeda\100\ufeda\001\002" +
    "\000\006\003\ufed7\100\ufed7\001\002\000\004\077\u0103\001" +
    "\002\000\006\003\ufed8\100\ufed8\001\002\000\004\017\u0105" +
    "\001\002\000\004\077\u0106\001\002\000\006\003\ufed9\100" +
    "\ufed9\001\002\000\030\003\u0115\050\u0118\053\u0119\054\u0117" +
    "\075\u010b\076\u0113\100\u010a\141\u011b\144\u010f\147\u011a\151" +
    "\u010d\001\002\000\032\003\uffd0\050\uffd0\053\uffd0\054\uffd0" +
    "\075\uffd0\076\uffd0\100\uffd0\105\uffd0\141\uffd0\144\uffd0\147" +
    "\uffd0\151\uffd0\001\002\000\030\003\uffe9\050\uffe9\053\uffe9" +
    "\054\uffe9\075\uffe9\076\uffe9\100\uffe9\141\uffe9\144\uffe9\147" +
    "\uffe9\151\uffe9\001\002\000\006\003\u0196\121\u0197\001\002" +
    "\000\006\066\uffe4\141\uffe4\001\002\000\032\003\uffcf\050" +
    "\uffcf\053\uffcf\054\uffcf\075\uffcf\076\uffcf\100\uffcf\105\uffcf" +
    "\141\uffcf\144\uffcf\147\uffcf\151\uffcf\001\002\000\004\123" +
    "\u0191\001\002\000\006\066\u0188\141\uffda\001\002\000\004" +
    "\123\u0178\001\002\000\006\003\uffec\100\uffec\001\002\000" +
    "\030\003\uffe7\050\uffe7\053\uffe7\054\uffe7\075\uffe7\076\uffe7" +
    "\100\uffe7\141\uffe7\144\uffe7\147\uffe7\151\uffe7\001\002\000" +
    "\030\003\uffeb\050\uffeb\053\uffeb\054\uffeb\075\uffeb\076\uffeb" +
    "\100\uffeb\141\uffeb\144\uffeb\147\uffeb\151\uffeb\001\002\000" +
    "\006\066\uffe2\141\uffe2\001\002\000\030\003\uffe8\050\uffe8" +
    "\053\uffe8\054\uffe8\075\uffe8\076\uffe8\100\uffe8\141\uffe8\144" +
    "\uffe8\147\uffe8\151\uffe8\001\002\000\004\121\u0175\001\002" +
    "\000\032\003\uffce\050\uffce\053\uffce\054\uffce\075\uffce\076" +
    "\uffce\100\uffce\105\uffce\141\uffce\144\uffce\147\uffce\151\uffce" +
    "\001\002\000\006\066\uffe3\141\uffe3\001\002\000\006\066" +
    "\uffe1\141\uffe1\001\002\000\006\066\uffe0\141\uffe0\001\002" +
    "\000\004\123\u0157\001\002\000\004\125\u011c\001\002\000" +
    "\050\046\u0134\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136" +
    "\072\u0133\073\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127" +
    "\u0126\132\u0129\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f" +
    "\001\002\000\040\077\uffa3\100\uffa3\106\uffa3\107\uffa3\110" +
    "\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3\116\uffa3\117\uffa3" +
    "\120\uffa3\121\uffa3\124\uffa3\135\uffa3\001\002\000\040\077" +
    "\uffae\100\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112\uffae" +
    "\113\uffae\114\uffae\116\uffae\117\uffae\120\uffae\121\uffae\124" +
    "\uffae\135\uffae\001\002\000\040\077\uffad\100\uffad\106\uffad" +
    "\107\uffad\110\uffad\111\uffad\112\uffad\113\uffad\114\uffad\116" +
    "\uffad\117\uffad\120\uffad\121\uffad\124\uffad\135\uffad\001\002" +
    "\000\040\077\uffaf\100\uffaf\106\uffaf\107\uffaf\110\uffaf\111" +
    "\uffaf\112\uffaf\113\uffaf\114\uffaf\116\uffaf\117\uffaf\120\uffaf" +
    "\121\uffaf\124\uffaf\135\uffaf\001\002\000\044\046\u0134\047" +
    "\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125" +
    "\074\u012d\123\u0124\127\u0126\132\u0129\133\u0123\134\u011d\137" +
    "\u0130\142\u012c\143\u011f\001\002\000\040\077\uff9f\100\uff9f" +
    "\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112\uff9f\113\uff9f\114" +
    "\uff9f\116\uff9f\117\uff9f\120\uff9f\121\uff9f\124\uff9f\135\uff9f" +
    "\001\002\000\040\077\uffa6\100\uffa6\106\uffa6\107\uffa6\110" +
    "\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\116\uffa6\117\uffa6" +
    "\120\uffa6\121\uffa6\124\uffa6\135\uffa6\001\002\000\050\046" +
    "\u0134\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133" +
    "\073\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132" +
    "\u0129\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f\001\002" +
    "\000\040\077\uffa1\100\uffa1\106\uffa1\107\uffa1\110\uffa1\111" +
    "\uffa1\112\uffa1\113\uffa1\114\uffa1\116\uffa1\117\uffa1\120\uffa1" +
    "\121\uffa1\124\uffa1\135\uffa1\001\002\000\040\077\uffa7\100" +
    "\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7\113\uffa7" +
    "\114\uffa7\116\uffa7\117\uffa7\120\uffa7\121\uffa7\124\uffa7\135" +
    "\uffa7\001\002\000\040\077\uffac\100\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\113\uffac\114\uffac\116\uffac\117" +
    "\uffac\120\uffac\121\uffac\124\uffac\135\uffac\001\002\000\040" +
    "\077\uffb1\100\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\113\uffb1\114\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1" +
    "\124\uffb1\135\uffb1\001\002\000\040\077\uffa4\100\uffa4\106" +
    "\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4\114\uffa4" +
    "\116\uffa4\117\uffa4\120\uffa4\121\uffa4\124\uffa4\135\uffa4\001" +
    "\002\000\040\077\uffb5\100\uffb5\106\uffb5\107\uffb5\110\uffb5" +
    "\111\uffb5\112\uffb5\113\uffb5\114\uffb5\116\uffb5\117\uffb5\120" +
    "\uffb5\121\uffb5\124\uffb5\135\uffb5\001\002\000\040\077\uffa5" +
    "\100\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112\uffa5\113" +
    "\uffa5\114\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\124\uffa5" +
    "\135\uffa5\001\002\000\040\077\uffaa\100\uffaa\106\uffaa\107" +
    "\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa\114\uffaa\116\uffaa" +
    "\117\uffaa\120\uffaa\121\uffaa\124\uffaa\135\uffaa\001\002\000" +
    "\040\077\uffa9\100\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9" +
    "\112\uffa9\113\uffa9\114\uffa9\116\uffa9\117\uffa9\120\uffa9\121" +
    "\uffa9\124\uffa9\135\uffa9\001\002\000\040\077\uffb8\100\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113\uffb8\114" +
    "\uffb8\116\uffb8\117\uffb8\120\u014e\121\u014d\124\uffb8\135\uffb8" +
    "\001\002\000\034\077\u0140\100\u0144\106\uffbb\107\u0147\110" +
    "\u0146\111\u0145\112\u0142\113\uffbb\114\uffbb\116\u0141\117\u0143" +
    "\124\uffbb\135\uffbb\001\002\000\040\077\uffa0\100\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0" +
    "\116\uffa0\117\uffa0\120\uffa0\121\uffa0\124\uffa0\135\uffa0\001" +
    "\002\000\040\077\uff9e\100\uff9e\106\uff9e\107\uff9e\110\uff9e" +
    "\111\uff9e\112\uff9e\113\uff9e\114\uff9e\116\uff9e\117\uff9e\120" +
    "\uff9e\121\uff9e\124\uff9e\135\uff9e\001\002\000\046\046\u0134" +
    "\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073" +
    "\u0125\074\u012d\115\u0121\123\u0124\127\u0126\132\u0129\133\u0123" +
    "\134\u011d\137\u0130\142\u012c\143\u011f\001\002\000\040\077" +
    "\uffa2\100\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2" +
    "\113\uffa2\114\uffa2\116\uffa2\117\uffa2\120\uffa2\121\uffa2\124" +
    "\uffa2\135\uffa2\001\002\000\040\077\uffb0\100\uffb0\106\uffb0" +
    "\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\114\uffb0\116" +
    "\uffb0\117\uffb0\120\uffb0\121\uffb0\124\uffb0\135\uffb0\001\002" +
    "\000\014\106\uffc2\113\uffc2\114\uffc2\124\uffc2\135\uffc2\001" +
    "\002\000\040\077\uffa8\100\uffa8\106\uffa8\107\uffa8\110\uffa8" +
    "\111\uffa8\112\uffa8\113\uffa8\114\uffa8\116\uffa8\117\uffa8\120" +
    "\uffa8\121\uffa8\124\uffa8\135\uffa8\001\002\000\040\077\uffb3" +
    "\100\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113" +
    "\uffb3\114\uffb3\116\uffb3\117\uffb3\120\uffb3\121\uffb3\124\uffb3" +
    "\135\uffb3\001\002\000\014\106\uffc4\113\uffc4\114\u013d\124" +
    "\uffc4\135\uffc4\001\002\000\006\106\u013a\113\u013b\001\002" +
    "\000\034\003\uffe5\050\uffe5\053\uffe5\054\uffe5\075\uffe5\076" +
    "\uffe5\100\uffe5\105\uffe5\141\uffe5\144\uffe5\146\uffe5\147\uffe5" +
    "\151\uffe5\001\002\000\050\046\u0134\047\u0120\051\u0122\052" +
    "\u0131\070\u012b\071\u0136\072\u0133\073\u0125\074\u012d\115\u0121" +
    "\117\u0132\123\u0124\127\u0126\132\u0129\133\u0123\134\u011d\137" +
    "\u0130\142\u012c\143\u011f\001\002\000\014\106\uffc5\113\uffc5" +
    "\114\u013d\124\uffc5\135\uffc5\001\002\000\050\046\u0134\047" +
    "\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125" +
    "\074\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132\u0129\133" +
    "\u0123\134\u011d\137\u0130\142\u012c\143\u011f\001\002\000\014" +
    "\106\uffc3\113\uffc3\114\uffc3\124\uffc3\135\uffc3\001\002\000" +
    "\040\077\uffb4\100\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4" +
    "\112\uffb4\113\uffb4\114\uffb4\116\uffb4\117\uffb4\120\uffb4\121" +
    "\uffb4\124\uffb4\135\uffb4\001\002\000\050\046\u0134\047\u0120" +
    "\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125\074" +
    "\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132\u0129\133\u0123" +
    "\134\u011d\137\u0130\142\u012c\143\u011f\001\002\000\050\046" +
    "\u0134\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133" +
    "\073\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132" +
    "\u0129\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f\001\002" +
    "\000\050\046\u0134\047\u0120\051\u0122\052\u0131\070\u012b\071" +
    "\u0136\072\u0133\073\u0125\074\u012d\115\u0121\117\u0132\123\u0124" +
    "\127\u0126\132\u0129\133\u0123\134\u011d\137\u0130\142\u012c\143" +
    "\u011f\001\002\000\050\046\u0134\047\u0120\051\u0122\052\u0131" +
    "\070\u012b\071\u0136\072\u0133\073\u0125\074\u012d\115\u0121\117" +
    "\u0132\123\u0124\127\u0126\132\u0129\133\u0123\134\u011d\137\u0130" +
    "\142\u012c\143\u011f\001\002\000\050\046\u0134\047\u0120\051" +
    "\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125\074\u012d" +
    "\115\u0121\117\u0132\123\u0124\127\u0126\132\u0129\133\u0123\134" +
    "\u011d\137\u0130\142\u012c\143\u011f\001\002\000\050\046\u0134" +
    "\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073" +
    "\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132\u0129" +
    "\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f\001\002\000" +
    "\050\046\u0134\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136" +
    "\072\u0133\073\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127" +
    "\u0126\132\u0129\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f" +
    "\001\002\000\050\046\u0134\047\u0120\051\u0122\052\u0131\070" +
    "\u012b\071\u0136\072\u0133\073\u0125\074\u012d\115\u0121\117\u0132" +
    "\123\u0124\127\u0126\132\u0129\133\u0123\134\u011d\137\u0130\142" +
    "\u012c\143\u011f\001\002\000\020\106\uffbd\113\uffbd\114\uffbd" +
    "\116\u0141\117\u0143\124\uffbd\135\uffbd\001\002\000\020\106" +
    "\uffbc\113\uffbc\114\uffbc\116\u0141\117\u0143\124\uffbc\135\uffbc" +
    "\001\002\000\020\106\uffbf\113\uffbf\114\uffbf\116\u0141\117" +
    "\u0143\124\uffbf\135\uffbf\001\002\000\020\106\uffc1\113\uffc1" +
    "\114\uffc1\116\u0141\117\u0143\124\uffc1\135\uffc1\001\002\000" +
    "\040\077\uffb9\100\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9" +
    "\112\uffb9\113\uffb9\114\uffb9\116\uffb9\117\uffb9\120\u014e\121" +
    "\u014d\124\uffb9\135\uffb9\001\002\000\050\046\u0134\047\u0120" +
    "\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125\074" +
    "\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132\u0129\133\u0123" +
    "\134\u011d\137\u0130\142\u012c\143\u011f\001\002\000\050\046" +
    "\u0134\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133" +
    "\073\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132" +
    "\u0129\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f\001\002" +
    "\000\040\077\uffb7\100\uffb7\106\uffb7\107\uffb7\110\uffb7\111" +
    "\uffb7\112\uffb7\113\uffb7\114\uffb7\116\uffb7\117\uffb7\120\uffb7" +
    "\121\uffb7\124\uffb7\135\uffb7\001\002\000\040\077\uffb6\100" +
    "\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6" +
    "\114\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\124\uffb6\135" +
    "\uffb6\001\002\000\020\106\uffbe\113\uffbe\114\uffbe\116\u0141" +
    "\117\u0143\124\uffbe\135\uffbe\001\002\000\040\077\uffba\100" +
    "\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba" +
    "\114\uffba\116\uffba\117\uffba\120\u014e\121\u014d\124\uffba\135" +
    "\uffba\001\002\000\020\106\uffc0\113\uffc0\114\uffc0\116\u0141" +
    "\117\u0143\124\uffc0\135\uffc0\001\002\000\006\113\u013b\124" +
    "\u0155\001\002\000\040\077\uffab\100\uffab\106\uffab\107\uffab" +
    "\110\uffab\111\uffab\112\uffab\113\uffab\114\uffab\116\uffab\117" +
    "\uffab\120\uffab\121\uffab\124\uffab\135\uffab\001\002\000\040" +
    "\077\uffb2\100\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112" +
    "\uffb2\113\uffb2\114\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2" +
    "\124\uffb2\135\uffb2\001\002\000\006\075\u0159\141\u0158\001" +
    "\002\000\004\125\u0173\001\002\000\004\141\u0170\001\002" +
    "\000\004\124\u015b\001\002\000\004\150\u015c\001\002\000" +
    "\004\123\u015d\001\002\000\050\046\u0134\047\u0120\051\u0122" +
    "\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125\074\u012d\115" +
    "\u0121\117\u0132\123\u0124\127\u0126\132\u0129\133\u0123\134\u011d" +
    "\137\u0130\142\u012c\143\u011f\001\002\000\006\113\u013b\124" +
    "\u015f\001\002\000\020\050\u0118\053\u0119\054\u0117\075\u010b" +
    "\076\u0113\141\u011b\153\u0164\001\002\000\034\003\uffd2\050" +
    "\uffd2\053\uffd2\054\uffd2\075\uffd2\076\uffd2\100\uffd2\105\uffd2" +
    "\141\uffd2\144\uffd2\146\uffd2\147\uffd2\151\uffd2\001\002\000" +
    "\034\003\uffd4\050\uffd4\053\uffd4\054\uffd4\075\uffd4\076\uffd4" +
    "\100\uffd4\105\uffd4\141\uffd4\144\uffd4\146\uffd4\147\uffd4\151" +
    "\uffd4\001\002\000\034\003\uffd5\050\uffd5\053\uffd5\054\uffd5" +
    "\075\uffd5\076\uffd5\100\uffd5\105\uffd5\141\uffd5\144\uffd5\146" +
    "\uffd5\147\uffd5\151\uffd5\001\002\000\032\003\uffc8\050\uffc8" +
    "\053\uffc8\054\uffc8\075\uffc8\076\uffc8\100\uffc8\105\uffc8\141" +
    "\uffc8\144\uffc8\147\uffc8\151\uffc8\001\002\000\004\101\u0166" +
    "\001\002\000\034\003\uffd1\050\uffd1\053\uffd1\054\uffd1\075" +
    "\uffd1\076\uffd1\100\uffd1\105\uffd1\141\uffd1\144\uffd1\146\uffd1" +
    "\147\uffd1\151\uffd1\001\002\000\004\105\u0167\001\002\000" +
    "\024\050\u0118\053\u0119\054\u0117\075\u010b\076\u0113\141\u011b" +
    "\144\u010f\147\u011a\151\u010d\001\002\000\026\050\uffd8\053" +
    "\uffd8\054\uffd8\075\uffd8\076\uffd8\105\uffd8\141\uffd8\144\uffd8" +
    "\147\uffd8\151\uffd8\001\002\000\026\050\uffd7\053\uffd7\054" +
    "\uffd7\075\uffd7\076\uffd7\105\uffd7\141\uffd7\144\uffd7\147\uffd7" +
    "\151\uffd7\001\002\000\026\050\u0118\053\u0119\054\u0117\075" +
    "\u010b\076\u0113\105\u016d\141\u011b\144\u010f\147\u011a\151\u010d" +
    "\001\002\000\026\050\uffd6\053\uffd6\054\uffd6\075\uffd6\076" +
    "\uffd6\105\uffd6\141\uffd6\144\uffd6\147\uffd6\151\uffd6\001\002" +
    "\000\026\050\uffd9\053\uffd9\054\uffd9\075\uffd9\076\uffd9\105" +
    "\uffd9\141\uffd9\144\uffd9\147\uffd9\151\uffd9\001\002\000\004" +
    "\102\u016e\001\002\000\004\154\u016f\001\002\000\034\003" +
    "\uffd3\050\uffd3\053\uffd3\054\uffd3\075\uffd3\076\uffd3\100\uffd3" +
    "\105\uffd3\141\uffd3\144\uffd3\146\uffd3\147\uffd3\151\uffd3\001" +
    "\002\000\004\125\u0171\001\002\000\050\046\u0134\047\u0120" +
    "\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125\074" +
    "\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132\u0129\133\u0123" +
    "\134\u011d\137\u0130\142\u012c\143\u011f\001\002\000\006\113" +
    "\u013b\124\uffc7\001\002\000\050\046\u0134\047\u0120\051\u0122" +
    "\052\u0131\070\u012b\071\u0136\072\u0133\073\u0125\074\u012d\115" +
    "\u0121\117\u0132\123\u0124\127\u0126\132\u0129\133\u0123\134\u011d" +
    "\137\u0130\142\u012c\143\u011f\001\002\000\006\113\u013b\124" +
    "\uffc6\001\002\000\004\024\u0176\001\002\000\004\077\u0177" +
    "\001\002\000\006\003\ufec5\100\ufec5\001\002\000\050\046" +
    "\u0134\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133" +
    "\073\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132" +
    "\u0129\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f\001\002" +
    "\000\006\113\u013b\124\u017a\001\002\000\004\145\u017b\001" +
    "\002\000\020\050\u0118\053\u0119\054\u0117\075\u010b\076\u0113" +
    "\141\u011b\153\u0164\001\002\000\034\003\uffca\050\uffca\053" +
    "\uffca\054\uffca\075\uffca\076\uffca\100\uffca\105\uffca\141\uffca" +
    "\144\uffca\146\u017d\147\uffca\151\uffca\001\002\000\022\050" +
    "\u0118\053\u0119\054\u0117\075\u010b\076\u0113\141\u011b\144\u017f" +
    "\153\u0164\001\002\000\032\003\uffcd\050\uffcd\053\uffcd\054" +
    "\uffcd\075\uffcd\076\uffcd\100\uffcd\105\uffcd\141\uffcd\144\uffcd" +
    "\147\uffcd\151\uffcd\001\002\000\004\123\u0181\001\002\000" +
    "\032\003\uffcb\050\uffcb\053\uffcb\054\uffcb\075\uffcb\076\uffcb" +
    "\100\uffcb\105\uffcb\141\uffcb\144\uffcb\147\uffcb\151\uffcb\001" +
    "\002\000\050\046\u0134\047\u0120\051\u0122\052\u0131\070\u012b" +
    "\071\u0136\072\u0133\073\u0125\074\u012d\115\u0121\117\u0132\123" +
    "\u0124\127\u0126\132\u0129\133\u0123\134\u011d\137\u0130\142\u012c" +
    "\143\u011f\001\002\000\006\113\u013b\124\u0183\001\002\000" +
    "\004\145\u0184\001\002\000\020\050\u0118\053\u0119\054\u0117" +
    "\075\u010b\076\u0113\141\u011b\153\u0164\001\002\000\034\003" +
    "\uffca\050\uffca\053\uffca\054\uffca\075\uffca\076\uffca\100\uffca" +
    "\105\uffca\141\uffca\144\uffca\146\u017d\147\uffca\151\uffca\001" +
    "\002\000\032\003\uffcc\050\uffcc\053\uffcc\054\uffcc\075\uffcc" +
    "\076\uffcc\100\uffcc\105\uffcc\141\uffcc\144\uffcc\147\uffcc\151" +
    "\uffcc\001\002\000\006\106\u018f\135\u018e\001\002\000\004" +
    "\141\uffdb\001\002\000\006\106\uffde\135\uffde\001\002\000" +
    "\004\141\u018b\001\002\000\010\106\uffdc\125\u018c\135\uffdc" +
    "\001\002\000\050\046\u0134\047\u0120\051\u0122\052\u0131\070" +
    "\u012b\071\u0136\072\u0133\073\u0125\074\u012d\115\u0121\117\u0132" +
    "\123\u0124\127\u0126\132\u0129\133\u0123\134\u011d\137\u0130\142" +
    "\u012c\143\u011f\001\002\000\010\106\uffdd\113\u013b\135\uffdd" +
    "\001\002\000\006\066\u0188\141\uffda\001\002\000\034\003" +
    "\uffe6\050\uffe6\053\uffe6\054\uffe6\075\uffe6\076\uffe6\100\uffe6" +
    "\105\uffe6\141\uffe6\144\uffe6\146\uffe6\147\uffe6\151\uffe6\001" +
    "\002\000\006\106\uffdf\135\uffdf\001\002\000\050\046\u0134" +
    "\047\u0120\051\u0122\052\u0131\070\u012b\071\u0136\072\u0133\073" +
    "\u0125\074\u012d\115\u0121\117\u0132\123\u0124\127\u0126\132\u0129" +
    "\133\u0123\134\u011d\137\u0130\142\u012c\143\u011f\001\002\000" +
    "\006\113\u013b\124\u0193\001\002\000\004\152\u0194\001\002" +
    "\000\020\050\u0118\053\u0119\054\u0117\075\u010b\076\u0113\141" +
    "\u011b\153\u0164\001\002\000\032\003\uffc9\050\uffc9\053\uffc9" +
    "\054\uffc9\075\uffc9\076\uffc9\100\uffc9\105\uffc9\141\uffc9\144" +
    "\uffc9\147\uffc9\151\uffc9\001\002\000\004\024\u019d\001\002" +
    "\000\006\003\u0199\024\u0198\001\002\000\006\003\u019b\077" +
    "\u019c\001\002\000\004\077\u019a\001\002\000\006\003\ufec3" +
    "\100\ufec3\001\002\000\006\003\ufec2\100\ufec2\001\002\000" +
    "\006\003\ufec6\100\ufec6\001\002\000\004\077\u019e\001\002" +
    "\000\006\003\ufec4\100\ufec4\001\002\000\012\003\u01a1\100" +
    "\u01a2\140\033\141\037\001\002\000\006\003\uff99\100\uff99" +
    "\001\002\000\004\121\u01ac\001\002\000\006\003\u01a3\121" +
    "\u01a4\001\002\000\004\023\u01aa\001\002\000\006\003\u01a5" +
    "\023\u01a6\001\002\000\004\077\u01a9\001\002\000\006\003" +
    "\u01a8\077\u01a7\001\002\000\006\003\ufecb\100\ufecb\001\002" +
    "\000\006\003\ufec7\100\ufec7\001\002\000\006\003\ufec8\100" +
    "\ufec8\001\002\000\004\077\u01ab\001\002\000\006\003\ufec9" +
    "\100\ufec9\001\002\000\004\023\u01ad\001\002\000\004\077" +
    "\u01ae\001\002\000\006\003\ufeca\100\ufeca\001\002\000\012" +
    "\003\u01b0\100\u01b1\140\033\141\037\001\002\000\004\121" +
    "\u01bc\001\002\000\006\003\u01b3\121\u01b4\001\002\000\006" +
    "\003\uff9b\100\uff9b\001\002\000\004\011\u01ba\001\002\000" +
    "\006\003\u01b6\011\u01b5\001\002\000\006\003\u01b8\077\u01b9" +
    "\001\002\000\004\077\u01b7\001\002\000\006\003\ufef5\100" +
    "\ufef5\001\002\000\006\003\ufef4\100\ufef4\001\002\000\006" +
    "\003\ufef8\100\ufef8\001\002\000\004\077\u01bb\001\002\000" +
    "\006\003\ufef6\100\ufef6\001\002\000\004\011\u01bd\001\002" +
    "\000\004\077\u01be\001\002\000\006\003\ufef7\100\ufef7\001" +
    "\002\000\004\010\u01df\001\002\000\010\003\uff5f\077\uff5f" +
    "\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001" +
    "\002\000\004\077\u01da\001\002\000\010\003\uff5f\077\uff5f" +
    "\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001" +
    "\002\000\004\077\u01d5\001\002\000\010\003\uff5f\077\uff5f" +
    "\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001" +
    "\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010" +
    "\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077" +
    "\uff5f\103\uff5f\001\002\000\010\003\077\077\u01cc\103\101" +
    "\001\002\000\006\003\uff6d\100\uff6d\001\002\000\010\003" +
    "\077\077\u01ce\103\101\001\002\000\012\003\uff63\100\uff63" +
    "\140\uff63\141\uff63\001\002\000\010\003\077\077\u01d0\103" +
    "\101\001\002\000\012\003\uff66\100\uff66\140\uff66\141\uff66" +
    "\001\002\000\010\003\077\077\u01d2\103\101\001\002\000" +
    "\012\003\uff7b\100\uff7b\140\uff7b\141\uff7b\001\002\000\010" +
    "\003\077\077\u01d4\103\101\001\002\000\006\003\uff75\100" +
    "\uff75\001\002\000\030\003\uff61\050\uff61\053\uff61\054\uff61" +
    "\075\uff61\076\uff61\100\uff61\141\uff61\144\uff61\147\uff61\151" +
    "\uff61\001\002\000\010\003\077\077\u01d7\103\101\001\002" +
    "\000\006\003\uff6f\100\uff6f\001\002\000\010\003\077\077" +
    "\u01d9\103\101\001\002\000\006\003\uff79\100\uff79\001\002" +
    "\000\006\003\uff6b\100\uff6b\001\002\000\010\003\077\077" +
    "\u01dc\103\101\001\002\000\012\003\uff68\100\uff68\140\uff68" +
    "\141\uff68\001\002\000\010\003\077\077\u01de\103\101\001" +
    "\002\000\006\003\uff77\100\uff77\001\002\000\004\077\u01e0" +
    "\001\002\000\006\003\ufefc\100\ufefc\001\002\000\006\003" +
    "\uff97\100\uff97\001\002\000\004\121\u01ed\001\002\000\006" +
    "\003\u01e4\121\u01e5\001\002\000\004\013\u01eb\001\002\000" +
    "\006\003\u01e6\013\u01e7\001\002\000\004\077\u01ea\001\002" +
    "\000\006\003\u01e9\077\u01e8\001\002\000\006\003\ufeee\100" +
    "\ufeee\001\002\000\006\003\ufeea\100\ufeea\001\002\000\006" +
    "\003\ufeeb\100\ufeeb\001\002\000\004\077\u01ec\001\002\000" +
    "\006\003\ufeec\100\ufeec\001\002\000\004\013\u01ee\001\002" +
    "\000\004\077\u01ef\001\002\000\006\003\ufeed\100\ufeed\001" +
    "\002\000\006\003\u01f1\100\u01f4\001\002\000\006\015\u0213" +
    "\121\u0214\001\002\000\006\003\uff95\100\uff95\001\002\000" +
    "\012\003\uff8e\100\uff8e\140\uff8e\141\uff8e\001\002\000\010" +
    "\003\u01f6\015\u01f7\121\u01f8\001\002\000\006\003\uff94\100" +
    "\uff94\001\002\000\006\014\u0201\077\u0200\001\002\000\006" +
    "\003\u01ff\077\u01fe\001\002\000\006\003\u01f9\014\u01fa\001" +
    "\002\000\004\077\u01fd\001\002\000\006\003\u01fc\077\u01fb" +
    "\001\002\000\006\003\ufee9\100\ufee9\001\002\000\006\003" +
    "\ufee5\100\ufee5\001\002\000\006\003\ufee6\100\ufee6\001\002" +
    "\000\012\003\uff74\100\uff74\140\uff74\141\uff74\001\002\000" +
    "\012\003\uff71\100\uff71\140\uff71\141\uff71\001\002\000\012" +
    "\003\uff72\100\uff72\140\uff72\141\uff72\001\002\000\004\077" +
    "\u0202\001\002\000\006\003\ufee7\100\ufee7\001\002\000\012" +
    "\003\u0204\100\u0205\140\033\141\037\001\002\000\004\121" +
    "\u0210\001\002\000\006\003\u0207\121\u0208\001\002\000\006" +
    "\003\uff92\100\uff92\001\002\000\004\015\u020e\001\002\000" +
    "\006\003\u0209\015\u020a\001\002\000\004\077\u020d\001\002" +
    "\000\006\003\u020b\077\u020c\001\002\000\006\003\ufee0\100" +
    "\ufee0\001\002\000\006\003\ufee4\100\ufee4\001\002\000\006" +
    "\003\ufee1\100\ufee1\001\002\000\004\077\u020f\001\002\000" +
    "\006\003\ufee2\100\ufee2\001\002\000\004\015\u0211\001\002" +
    "\000\004\077\u0212\001\002\000\006\003\ufee3\100\ufee3\001" +
    "\002\000\004\077\u0217\001\002\000\004\014\u0215\001\002" +
    "\000\004\077\u0216\001\002\000\006\003\ufee8\100\ufee8\001" +
    "\002\000\012\003\uff73\100\uff73\140\uff73\141\uff73\001\002" +
    "\000\006\003\u021b\100\u0219\001\002\000\034\003\u0226\011" +
    "\u0228\012\u0222\013\u0220\014\u0227\016\u0224\017\u022a\020\u0223" +
    "\021\u0221\022\u0229\023\u022b\024\u0225\121\u021f\001\002\000" +
    "\006\003\uff90\100\uff90\001\002\000\032\011\u01c7\012\u01c3" +
    "\013\u01c0\014\u01c6\016\u01c4\017\u01ca\020\u01c2\021\u01c1\022" +
    "\u01c8\023\u01c9\024\u01c5\121\u021c\001\002\000\004\016\u021d" +
    "\001\002\000\004\077\u021e\001\002\000\006\003\ufede\100" +
    "\ufede\001\002\000\006\003\u0245\016\u0246\001\002\000\010" +
    "\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077" +
    "\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f" +
    "\001\002\000\006\003\u023d\077\u023e\001\002\000\010\003" +
    "\uff5f\077\uff5f\103\uff5f\001\002\000\004\077\u023a\001\002" +
    "\000\012\003\uff5f\016\u0236\077\uff5f\103\uff5f\001\002\000" +
    "\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f" +
    "\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103" +
    "\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002" +
    "\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003" +
    "\077\077\u022d\103\101\001\002\000\012\003\uff64\100\uff64" +
    "\140\uff64\141\uff64\001\002\000\010\003\077\077\u022f\103" +
    "\101\001\002\000\006\003\uff6e\100\uff6e\001\002\000\010" +
    "\003\077\077\u0231\103\101\001\002\000\012\003\uff67\100" +
    "\uff67\140\uff67\141\uff67\001\002\000\010\003\077\077\u0233" +
    "\103\101\001\002\000\012\003\uff7c\100\uff7c\140\uff7c\141" +
    "\uff7c\001\002\000\010\003\077\077\u0235\103\101\001\002" +
    "\000\006\003\uff76\100\uff76\001\002\000\004\077\u0239\001" +
    "\002\000\010\003\077\077\u0238\103\101\001\002\000\012" +
    "\003\uff65\100\uff65\140\uff65\141\uff65\001\002\000\006\003" +
    "\ufedd\100\ufedd\001\002\000\030\003\uff62\050\uff62\053\uff62" +
    "\054\uff62\075\uff62\076\uff62\100\uff62\141\uff62\144\uff62\147" +
    "\uff62\151\uff62\001\002\000\010\003\077\077\u023c\103\101" +
    "\001\002\000\006\003\uff70\100\uff70\001\002\000\006\003" +
    "\uff6a\100\uff6a\001\002\000\006\003\uff6c\100\uff6c\001\002" +
    "\000\010\003\077\077\u0240\103\101\001\002\000\006\003" +
    "\uff7a\100\uff7a\001\002\000\010\003\077\077\u0242\103\101" +
    "\001\002\000\012\003\uff69\100\uff69\140\uff69\141\uff69\001" +
    "\002\000\010\003\077\077\u0244\103\101\001\002\000\006" +
    "\003\uff78\100\uff78\001\002\000\004\077\u0249\001\002\000" +
    "\006\003\u0247\077\u0248\001\002\000\006\003\ufedb\100\ufedb" +
    "\001\002\000\006\003\ufedf\100\ufedf\001\002\000\006\003" +
    "\ufedc\100\ufedc\001\002\000\006\003\uff98\100\uff98\001\002" +
    "\000\004\121\u0256\001\002\000\006\003\u024d\121\u024e\001" +
    "\002\000\004\012\u0254\001\002\000\006\003\u0250\012\u024f" +
    "\001\002\000\006\003\u0253\077\u0252\001\002\000\004\077" +
    "\u0251\001\002\000\006\003\ufef0\100\ufef0\001\002\000\006" +
    "\003\ufef3\100\ufef3\001\002\000\006\003\ufeef\100\ufeef\001" +
    "\002\000\004\077\u0255\001\002\000\006\003\ufef1\100\ufef1" +
    "\001\002\000\004\012\u0257\001\002\000\004\077\u0258\001" +
    "\002\000\006\003\ufef2\100\ufef2\001\002\000\012\003\u025b" +
    "\100\u025c\140\033\141\037\001\002\000\006\003\uff9a\100" +
    "\uff9a\001\002\000\004\121\u0266\001\002\000\006\003\u025d" +
    "\121\u025e\001\002\000\004\022\u0264\001\002\000\006\003" +
    "\u025f\022\u0260\001\002\000\004\077\u0263\001\002\000\006" +
    "\003\u0262\077\u0261\001\002\000\006\003\ufed0\100\ufed0\001" +
    "\002\000\006\003\ufecc\100\ufecc\001\002\000\006\003\ufecd" +
    "\100\ufecd\001\002\000\004\077\u0265\001\002\000\006\003" +
    "\ufece\100\ufece\001\002\000\004\022\u0267\001\002\000\004" +
    "\077\u0268\001\002\000\006\003\ufecf\100\ufecf\001\002\000" +
    "\006\003\u026d\010\u026e\001\002\000\012\003\uff5f\010\u026b" +
    "\077\uff5f\103\uff5f\001\002\000\004\077\u026c\001\002\000" +
    "\006\003\ufefb\100\ufefb\001\002\000\004\077\u0271\001\002" +
    "\000\006\003\u026f\077\u0270\001\002\000\006\003\ufef9\100" +
    "\ufef9\001\002\000\006\003\ufefd\100\ufefd\001\002\000\006" +
    "\003\ufefa\100\ufefa\001\002\000\012\003\u0273\100\u0274\140" +
    "\033\141\037\001\002\000\004\121\u027f\001\002\000\006" +
    "\003\u0276\121\u0277\001\002\000\006\003\uff96\100\uff96\001" +
    "\002\000\004\021\u027d\001\002\000\006\003\u0279\021\u0278" +
    "\001\002\000\006\003\u027c\077\u027b\001\002\000\004\077" +
    "\u027a\001\002\000\006\003\ufed2\100\ufed2\001\002\000\006" +
    "\003\ufed5\100\ufed5\001\002\000\006\003\ufed1\100\ufed1\001" +
    "\002\000\004\077\u027e\001\002\000\006\003\ufed3\100\ufed3" +
    "\001\002\000\004\021\u0280\001\002\000\004\077\u0281\001" +
    "\002\000\006\003\ufed4\100\ufed4\001\002\000\004\002\001" +
    "\001\002\000\004\121\u028e\001\002\000\006\003\u0285\121" +
    "\u0286\001\002\000\004\004\u028c\001\002\000\006\003\u0287" +
    "\004\u0288\001\002\000\004\077\u028b\001\002\000\006\003" +
    "\u0289\077\u028a\001\002\000\004\002\uff0d\001\002\000\004" +
    "\002\uff11\001\002\000\004\002\uff0e\001\002\000\004\077" +
    "\u028d\001\002\000\004\002\uff0f\001\002\000\004\004\u028f" +
    "\001\002\000\004\077\u0290\001\002\000\004\002\uff10\001" +
    "\002\000\004\077\u0292\001\002\000\006\003\uff87\100\uff87" +
    "\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000" +
    "\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\077" +
    "\077\u0296\103\101\001\002\000\006\003\uff8b\100\uff8b\001" +
    "\002\000\010\003\077\077\u0298\103\101\001\002\000\006" +
    "\003\uff89\100\uff89\001\002\000\010\003\uff5f\077\uff5f\103" +
    "\uff5f\001\002\000\010\003\077\077\u029b\103\101\001\002" +
    "\000\006\003\uff8a\100\uff8a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0299\000\006\030\006\153\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\012\046\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\320\145\321\001\001\000\016\003\030\031\027" +
    "\032\023\047\026\050\021\152\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\303\001\001" +
    "\000\002\001\001\000\016\003\030\011\056\031\027\032" +
    "\023\050\054\152\024\001\001\000\002\001\001\000\004" +
    "\105\031\001\001\000\006\012\035\113\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\137\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\136\101\001\001\000\046\106\123\107\105\110\110\111" +
    "\106\120\131\121\111\122\102\123\137\124\121\125\142" +
    "\126\134\127\145\130\114\131\117\132\124\133\112\134" +
    "\132\135\267\001\001\000\002\001\001\000\046\106\123" +
    "\107\105\110\110\111\106\120\131\121\111\122\102\123" +
    "\137\124\121\125\142\126\134\127\145\130\114\131\117" +
    "\132\124\133\112\134\132\135\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\254\001" +
    "\001\000\004\117\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\136\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0281\001\001" +
    "\000\004\052\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\137\330\001\001\000\004\137\326\001\001" +
    "\000\004\136\101\001\001\000\002\001\001\000\004\136" +
    "\101\001\001\000\002\001\001\000\004\137\333\001\001" +
    "\000\004\136\101\001\001\000\002\001\001\000\060\005" +
    "\364\006\365\014\341\033\346\034\352\035\344\036\362" +
    "\037\342\040\340\041\357\044\345\045\360\053\353\054" +
    "\356\140\363\141\336\142\343\143\350\144\366\146\361" +
    "\147\347\150\354\151\351\001\001\000\004\105\u0271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\u0258\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0249" +
    "\001\001\000\004\052\u0217\001\001\000\004\043\u01ef\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u01e0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\105\u01ae\001\001\000\002" +
    "\001\001\000\004\105\u019e\001\001\000\002\001\001\000" +
    "\004\055\u0106\001\001\000\004\023\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\u0111\027\u010f\060" +
    "\u0108\061\u0107\063\u010b\064\u0115\067\u0110\072\u0113\115\u010d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\056\u0186\057\u0188\112\u0189\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\073" +
    "\u012e\074\u012d\075\u0129\076\u0127\100\u0138\101\u0137\102\u0136" +
    "\103\u0134\104\u0126\114\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\076\u0155\104\u0126\114\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\073\u012e\074\u012d\075\u0129\076\u0127" +
    "\100\u0153\101\u0137\102\u0136\103\u0134\104\u0126\114\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\076\u0127\102\u013e\104\u0126\114\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\073\u012e\074\u012d\075" +
    "\u0129\076\u0127\101\u013b\102\u0136\103\u0134\104\u0126\114\u011d" +
    "\001\001\000\002\001\001\000\022\073\u012e\074\u012d\075" +
    "\u0129\076\u0127\102\u0136\103\u013d\104\u0126\114\u011d\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\073\u0152\074" +
    "\u012d\075\u0129\076\u0127\102\u0136\104\u0126\114\u011d\001\001" +
    "\000\016\074\u0151\075\u0129\076\u0127\102\u0136\104\u0126\114" +
    "\u011d\001\001\000\020\073\u0150\074\u012d\075\u0129\076\u0127" +
    "\102\u0136\104\u0126\114\u011d\001\001\000\016\074\u014b\075" +
    "\u0129\076\u0127\102\u0136\104\u0126\114\u011d\001\001\000\020" +
    "\073\u014a\074\u012d\075\u0129\076\u0127\102\u0136\104\u0126\114" +
    "\u011d\001\001\000\020\073\u0149\074\u012d\075\u0129\076\u0127" +
    "\102\u0136\104\u0126\114\u011d\001\001\000\020\073\u0148\074" +
    "\u012d\075\u0129\076\u0127\102\u0136\104\u0126\114\u011d\001\001" +
    "\000\020\073\u0147\074\u012d\075\u0129\076\u0127\102\u0136\104" +
    "\u0126\114\u011d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\075\u014f\076\u0127\102\u0136\104\u0126\114\u011d\001\001" +
    "\000\014\075\u014e\076\u0127\102\u0136\104\u0126\114\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\u0159\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\073\u012e\074\u012d" +
    "\075\u0129\076\u0127\100\u015d\101\u0137\102\u0136\103\u0134\104" +
    "\u0126\114\u011d\001\001\000\002\001\001\000\016\060\u0161" +
    "\065\u015f\071\u0162\072\u0160\115\u010d\116\u0164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\060\u0161\061\u0107\063\u010b\064\u0115\065\u016a" +
    "\066\u0167\067\u0168\070\u0169\072\u0160\115\u010d\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\060\u0161\061\u0107" +
    "\063\u010b\064\u0115\065\u016a\066\u016b\067\u0168\072\u0160\115" +
    "\u010d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\073\u012e\074\u012d\075\u0129\076\u0127\100\u0171" +
    "\101\u0137\102\u0136\103\u0134\104\u0126\114\u011d\001\001\000" +
    "\002\001\001\000\026\073\u012e\074\u012d\075\u0129\076\u0127" +
    "\100\u0173\101\u0137\102\u0136\103\u0134\104\u0126\114\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\073\u012e\074\u012d\075\u0129\076" +
    "\u0127\100\u0178\101\u0137\102\u0136\103\u0134\104\u0126\114\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\060" +
    "\u0161\065\u015f\071\u017b\072\u0160\115\u010d\116\u0164\001\001" +
    "\000\004\062\u017d\001\001\000\016\060\u0161\065\u015f\071" +
    "\u017f\072\u0160\115\u010d\116\u0164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\073\u012e\074" +
    "\u012d\075\u0129\076\u0127\100\u0181\101\u0137\102\u0136\103\u0134" +
    "\104\u0126\114\u011d\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\060\u0161\065\u015f\071\u0184\072\u0160\115\u010d" +
    "\116\u0164\001\001\000\004\062\u0185\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\073\u012e\074" +
    "\u012d\075\u0129\076\u0127\100\u018c\101\u0137\102\u0136\103\u0134" +
    "\104\u0126\114\u011d\001\001\000\002\001\001\000\006\057" +
    "\u018f\112\u0189\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\073\u012e\074\u012d\075\u0129\076\u0127\100\u0191\101" +
    "\u0137\102\u0136\103\u0134\104\u0126\114\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\060\u0161\065\u015f\071" +
    "\u0194\072\u0160\115\u010d\116\u0164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\u019f\113\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u01b1\113\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\137\u01dc\001\001" +
    "\000\004\137\u01da\001\001\000\002\001\001\000\004\137" +
    "\u01d7\001\001\000\004\137\u01d5\001\001\000\002\001\001" +
    "\000\004\137\u01d2\001\001\000\004\137\u01d0\001\001\000" +
    "\004\137\u01ce\001\001\000\004\137\u01cc\001\001\000\004" +
    "\137\u01ca\001\001\000\004\136\101\001\001\000\002\001" +
    "\001\000\004\136\101\001\001\000\002\001\001\000\004" +
    "\136\101\001\001\000\002\001\001\000\004\136\101\001" +
    "\001\000\002\001\001\000\004\136\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\136\101\001\001\000" +
    "\002\001\001\000\004\136\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\136\101\001\001\000\002\001" +
    "\001\000\004\136\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\u01f2\020\u01f1\042\u01f4\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\u0202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\u0205\113\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\005\364\006\365\022\u0219\033" +
    "\346\034\352\035\344\036\362\037\342\040\340\041\357" +
    "\044\345\045\360\053\353\054\356\140\363\141\336\142" +
    "\343\143\350\144\366\146\361\147\347\150\354\151\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\137\u0242\001\001\000\004\137" +
    "\u0240\001\001\000\004\137\u023e\001\001\000\002\001\001" +
    "\000\004\137\u023a\001\001\000\002\001\001\000\004\137" +
    "\u0236\001\001\000\004\137\u0233\001\001\000\004\137\u0231" +
    "\001\001\000\004\137\u022f\001\001\000\004\137\u022d\001" +
    "\001\000\004\137\u022b\001\001\000\004\136\101\001\001" +
    "\000\002\001\001\000\004\136\101\001\001\000\002\001" +
    "\001\000\004\136\101\001\001\000\002\001\001\000\004" +
    "\136\101\001\001\000\002\001\001\000\004\136\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\136\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\136\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\136\101\001\001\000" +
    "\002\001\001\000\004\136\101\001\001\000\002\001\001" +
    "\000\004\136\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u0259\113\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\137\u0236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\u0274\113\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\137\u0296\001\001" +
    "\000\004\137\u0294\001\001\000\004\136\101\001\001\000" +
    "\002\001\001\000\004\136\101\001\001\000\002\001\001" +
    "\000\004\137\u0299\001\001\000\004\136\101\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CaptchaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CaptchaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CaptchaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<Err> errors;
	private Operation op;
	private BuildTag tag;

	private Symbol cur_token;

	public CaptchaParser(CaptchaLex lex) {
		super(lex);
		this.op = new Operation();
		this.tag = new BuildTag(this);
		this.errors = new ArrayList<>();
	}

	public void syntax_error(Symbol cur_token) {
		this.cur_token = cur_token;

		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}

	public List<Err> getErrors() {
		return this.errors;
	}

	protected int error_sync_size() {
		return 1;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CaptchaParser$actions {
  private final CaptchaParser parser;

  /** Constructor */
  CUP$CaptchaParser$actions(CaptchaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000000(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // c_gcic ::= gcic c_head c_body clgcic 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_gcic",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= c_gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		RESULT = start_val;
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CaptchaParser$parser.done_parsing();
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // c_head ::= head head_opt clhead 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_head",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // head_opt ::= head_opt h_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // head_opt ::= h_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // h_opt ::= c_title 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // h_opt ::= c_link 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c_body ::= body body_opt clbody 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_body",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body_opt ::= body_opt b_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body_opt ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_opt ::= c_h1 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b_opt ::= c_paragraph 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b_opt ::= c_spam 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b_opt ::= c_input 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_opt ::= c_txtarea 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b_opt ::= c_select 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b_opt ::= c_img 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b_opt ::= c_button 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b_opt ::= c_div 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b_opt ::= br 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b_opt ::= c_script 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_script ::= script make_script clscript 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_script",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // make_script ::= make_script scripting 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // make_script ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scripting ::= statement 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scripting ::= assignment 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scripting ::= control 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= type_var make_var SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		 System.out.println("Tipo: " + t.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("statement",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment ::= ID_V EQUAL a SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("Asignacion: " + id.getValue() + " = " + v1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_var ::= INT 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_var ::= STR 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_var ::= DEC 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_var ::= BOOL 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_var ::= CHR 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // make_var ::= make_var COMMA stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_var",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // make_var ::= stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_var",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stat ::= mode ID_V EQUAL a 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println(id.getValue() + " -> " + v1.toString()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("stat",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("stat",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mode ::= GLOBAL 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = true; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mode ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // make_ins ::= make_ins instructions 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_ins",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // make_ins ::= instructions 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_ins",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instructions ::= control 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instructions",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instructions",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= statement 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instruction",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction ::= assignment 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instruction",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ini ::= INIT LBRACE COLON make_ins COLON RBRACE END 
            {
              Token RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("ini",76, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_instruction ::= instruction 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_instruction",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_instruction ::= ini 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_instruction",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control ::= control_if 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // control ::= control_while 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // control ::= control_repeat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // control_if ::= IF LPAREN a RPAREN THEN type_instruction else_if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).value;
		 System.out.println("if -> " + b1 + ": " + i); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_if",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_if ::= ELSE IF LPAREN a RPAREN THEN type_instruction else_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).value;
		 System.out.println("else if -> " + b1 + ": " + e); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("else_if",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_if ::= ELSE type_instruction 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("else: " + e); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("else_if",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_if ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("else_if",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control_while ::= WHILE LPAREN a RPAREN THEN_WHILE type_instruction 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		 System.out.println("while -> " + b1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_while",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-5)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control_repeat ::= REPEAT LPAREN control_stat RPAREN UNTIL LPAREN a RPAREN type_instruction 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		 System.out.println("repeat -> " + b1 + " until ->" + b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_repeat",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-8)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control_stat ::= INT ID_V EQUAL a 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_stat",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control_stat ::= ID_V EQUAL a 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_stat",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // a ::= a OR b 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.or(b1, b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // a ::= b 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // b ::= b AND d 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.and(b1, b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // b ::= d 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // d ::= s SMALLER s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.SMALLER); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // d ::= s GREATER s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.GREATER); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // d ::= s GRTREQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.GREATER_OR_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // d ::= s SMLLREQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.LESS_OR_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // d ::= s EQEQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // d ::= s NEQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.NOT_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // d ::= s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // s ::= s PLUS t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.sum(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // s ::= s MINUS t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.subtraction(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s ::= t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // t ::= t TIMES u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.multiplication(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // t ::= t DIVIDE u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.division(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // t ::= u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // u ::= MINUS c 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.uminus(n1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // u ::= c 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // c ::= NOT v 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.not(b1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",64, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // c ::= v 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",64, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // v ::= INTEGER 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.INTEGER, n1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // v ::= DECIMAL 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.DECIMAL, n1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // v ::= string 
            {
              Variable RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.STRING, s1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // v ::= CHAR 
            {
              Variable RESULT =null;
		int ch1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int ch1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token ch1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.CHAR, ch1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // v ::= boolean_val 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // v ::= LPAREN a RPAREN 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // string ::= STRING 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // string ::= ID_ 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // string ::= INTQ 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // string ::= FONTF_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // string ::= ALIGN_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // string ::= COLOUR 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // string ::= TYPE_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // string ::= CLASS_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // string ::= PIXEL 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // string ::= PERCNTG 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // string ::= ONCLICK 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token b1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, b1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token b1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, b1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // c_title ::= title in cltitle 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("Titulo: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_title",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // c_link ::= link cllink 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_link",24, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // c_spam ::= spam in clspam 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						System.out.println("Spam: " + list);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_spam",25, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // c_h1 ::= h1 in clh1 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						System.out.println("h1: " + list);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_h1",26, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // c_paragraph ::= paragraph in clparagraph 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("paragraph: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_paragraph",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // c_input ::= input clinput 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_input",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // c_txtarea ::= txtarea cltxtarea 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_txtarea",31, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // c_button ::= button in clbutton 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("button: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_button",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // c_select ::= select make_option clselect 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_select",34, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // make_option ::= make_option c_option 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // make_option ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // c_option ::= option in cloption 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("option: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_option",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // c_img ::= img climg 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_img",29, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // c_div ::= div body_opt cldiv 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_div",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // in ::= in str 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
					list.add(s);
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",67, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // in ::= 
            {
              List<Token> RESULT =null;
		
					List<Token> list = new ArrayList<>();
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",67, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // str ::= IN 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // str ::= ID_V 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // gcic ::= SMALLER GCIC params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.GCIC, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",105, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // gcic ::= error GCIC params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",105, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // gcic ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",105, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // head ::= SMALLER HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // head ::= error HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // head ::= SMALLER error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // head ::= SMALLER HEAD error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // title ::= SMALLER TITLE GREATER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // title ::= error TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // title ::= SMALLER TITLE error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // link ::= SMALLER LINK params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.LINK, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",104, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // link ::= error LINK params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",104, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // body ::= SMALLER BODY params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.BODY, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // body ::= error BODY params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // body ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // spam ::= SMALLER SPAM params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.SPAN, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // spam ::= error SPAM params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // input ::= SMALLER INPUT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.INPUT, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // input ::= error INPUT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // txtarea ::= SMALLER TXTAREA params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.TEXTAREA, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",102, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // txtarea ::= error TXTAREA params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",102, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // select ::= SMALLER SELECT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.SELECT, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",103, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // select ::= error SELECT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",103, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // option ::= SMALLER OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // option ::= error OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // option ::= SMALLER error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // option ::= SMALLER OPTION error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // div ::= SMALLER DIV params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.DIV, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // div ::= error DIV params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // img ::= SMALLER IMG params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.IMG, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",98, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // img ::= error IMG params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",98, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // br ::= SMALLER BR GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // br ::= error BR GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // br ::= SMALLER BR error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // button ::= SMALLER BUTTON params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.BUTTON, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",95, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // button ::= error BUTTON params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",95, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // h1 ::= SMALLER H1 params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.H1, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // h1 ::= error H1 params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // h1 ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // paragraph ::= SMALLER PARAGRAPH params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.P, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // paragraph ::= error PARAGRAPH params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // script ::= SMALLER SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // script ::= error SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // params ::= params param 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
						list.add(p);
						RESULT = list;
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // params ::= 
            {
              List<Parameter> RESULT =null;
		 RESULT = new ArrayList<Parameter>(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // param ::= LBRACKET opt RBRACKET 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // param ::= error opt RBRACKET 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // param ::= LBRACKET opt error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // opt ::= id 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // opt ::= name 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // opt ::= href_src 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // opt ::= bckgrnd_clr 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // opt ::= font_size 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // opt ::= font_family 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // opt ::= text_align 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // opt ::= type 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // opt ::= cols_rows 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // opt ::= clss 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // opt ::= width_height 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // opt ::= alt 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // opt ::= onclick 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // opt ::= error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // id ::= ID EQUAL ID_ 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.ID, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // id ::= error EQUAL ID_ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // id ::= ID error ID_ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // id ::= ID EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // name ::= NAME EQUAL STRING 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.NAME, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // name ::= error EQUAL STRING 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // name ::= NAME error STRING 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // name ::= NAME EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // href_src ::= url EQUAL URL 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // href_src ::= error EQUAL URL 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // href_src ::= url error URL 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // href_src ::= url EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // url ::= HREF 
            {
              Param RESULT =null;
		 RESULT = Param.HREF; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // url ::= SRC 
            {
              Param RESULT =null;
		 RESULT = Param.SRC; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // bckgrnd_clr ::= color EQUAL COLOUR 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // bckgrnd_clr ::= error EQUAL COLOUR 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // bckgrnd_clr ::= color error COLOUR 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // bckgrnd_clr ::= color EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // color ::= BCKGRND 
            {
              Param RESULT =null;
		 RESULT = Param.BACKGROUND; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",68, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // color ::= COLOR 
            {
              Param RESULT =null;
		 RESULT = Param.COLOR; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",68, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // font_size ::= FONTS EQUAL PIXEL 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.FONT_SIZE, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // font_size ::= FONTS error PIXEL 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // font_size ::= FONTS EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // font_family ::= FONTF EQUAL FONTF_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.FONT_FAMILY, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // font_family ::= error EQUAL FONTF_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // font_family ::= FONTF error FONTF_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // font_family ::= FONTF EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // text_align ::= ALIGN EQUAL ALIGN_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.TEXT_ALIGN, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // text_align ::= error EQUAL ALIGN_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // text_align ::= ALIGN error ALIGN_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // text_align ::= ALIGN EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // type ::= TYPE EQUAL TYPE_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.TYPE, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // type ::= error EQUAL TYPE_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // type ::= TYPE error TYPE_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // type ::= TYPE EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // cols_rows ::= cls_rws EQUAL INTQ 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // cols_rows ::= error EQUAL INTQ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // cols_rows ::= cls_rws error INTQ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // cols_rows ::= cls_rws EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // cls_rws ::= COLS 
            {
              Param RESULT =null;
		 RESULT = Param.COLS; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // cls_rws ::= ROWS 
            {
              Param RESULT =null;
		 RESULT = Param.ROWS; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // clss ::= CLASS EQUAL CLASS_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.CLASS, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // clss ::= error EQUAL CLASS_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // clss ::= CLASS error CLASS_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // clss ::= CLASS EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // width_height ::= w_h EQUAL pxl_per 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // width_height ::= error EQUAL pxl_per 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // width_height ::= w_h error pxl_per 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // width_height ::= w_h EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // w_h ::= WIDTH 
            {
              Param RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = Param.WIDTH; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",71, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // w_h ::= HEIGHT 
            {
              Param RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = Param.HEIGHT; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",71, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // pxl_per ::= PIXEL 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // pxl_per ::= PERCNTG 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // alt ::= ALT EQUAL STRING 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.ALT, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // alt ::= ALT error STRING 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // alt ::= ALT EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // onclick ::= CLICK EQUAL ONCLICK 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.ONCLICK, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // onclick ::= error EQUAL ONCLICK 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // onclick ::= CLICK error ONCLICK 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // onclick ::= CLICK EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // clgcic ::= SMALLER DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // clgcic ::= error DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // clgcic ::= SMALLER error GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // clgcic ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // clgcic ::= SMALLER DIVIDE GCIC error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // clhead ::= SMALLER DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // clhead ::= error DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // clhead ::= SMALLER error HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // clhead ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // clhead ::= SMALLER DIVIDE HEAD error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // cltitle ::= SMALLER DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // cltitle ::= error DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // cltitle ::= SMALLER error TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // cltitle ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // cltitle ::= SMALLER DIVIDE TITLE error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // cllink ::= SMALLER DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // cllink ::= error DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // cllink ::= SMALLER error LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // cllink ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // cllink ::= SMALLER DIVIDE LINK error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // clbody ::= SMALLER DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // clbody ::= error DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // clbody ::= SMALLER error BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // clbody ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // clbody ::= SMALLER DIVIDE BODY error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // clspam ::= SMALLER DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // clspam ::= error DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // clspam ::= SMALLER error SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // clspam ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // clspam ::= SMALLER DIVIDE SPAM error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // clinput ::= SMALLER DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // clinput ::= error DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // clinput ::= SMALLER error INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // clinput ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // clinput ::= SMALLER DIVIDE INPUT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // cltxtarea ::= SMALLER DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // cltxtarea ::= error DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // cltxtarea ::= SMALLER error TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // cltxtarea ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // cltxtarea ::= SMALLER DIVIDE TXTAREA error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // clselect ::= SMALLER DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // clselect ::= error DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // clselect ::= SMALLER error SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // clselect ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // clselect ::= SMALLER DIVIDE SELECT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // cloption ::= SMALLER DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // cloption ::= error DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // cloption ::= SMALLER error OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // cloption ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // cloption ::= SMALLER DIVIDE OPTION error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // cldiv ::= SMALLER DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // cldiv ::= error DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // cldiv ::= SMALLER error DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // cldiv ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // cldiv ::= SMALLER DIVIDE DIV error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // climg ::= SMALLER DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // climg ::= error DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // climg ::= SMALLER error IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // climg ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // climg ::= SMALLER DIVIDE IMG error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000001(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // clbutton ::= SMALLER DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // clbutton ::= error DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // clbutton ::= SMALLER error BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // clbutton ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // clbutton ::= SMALLER DIVIDE BUTTON error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // clh1 ::= SMALLER DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // clh1 ::= error DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // clh1 ::= SMALLER error H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // clh1 ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // clh1 ::= SMALLER DIVIDE H1 error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // clparagraph ::= SMALLER DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // clparagraph ::= error DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // clparagraph ::= SMALLER error PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // clparagraph ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // clparagraph ::= SMALLER DIVIDE PARAGRAPH error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // clscript ::= SMALLER DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // clscript ::= error DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // clscript ::= SMALLER error SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // clscript ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // clscript ::= SMALLER DIVIDE SCRIPT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CaptchaParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CaptchaParser$do_action_part00000000(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CaptchaParser$do_action_part00000001(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
