
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.captchaweb.parser;

import com.cesar31.captchaweb.model.*;
import com.cesar31.captchaweb.control.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CaptchaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CaptchaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CaptchaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CaptchaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CaptchaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\002\070\006\000\002\002\004\000\002\106" +
    "\005\000\002\107\004\000\002\107\003\000\002\110\003" +
    "\000\002\110\003\000\002\111\005\000\002\112\004\000" +
    "\002\112\002\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\113\003" +
    "\000\002\113\003\000\002\113\003\000\002\114\005\000" +
    "\002\115\004\000\002\115\002\000\002\045\005\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\045" +
    "\005\000\002\117\005\000\002\117\003\000\002\116\006" +
    "\000\002\116\004\000\002\123\005\000\002\123\003\000" +
    "\002\122\006\000\002\122\004\000\002\125\005\000\002" +
    "\125\003\000\002\124\006\000\002\124\004\000\002\127" +
    "\005\000\002\127\003\000\002\126\006\000\002\126\004" +
    "\000\002\121\005\000\002\121\003\000\002\120\006\000" +
    "\002\120\004\000\002\145\003\000\002\145\002\000\002" +
    "\134\005\000\002\134\003\000\002\135\005\000\002\135" +
    "\003\000\002\136\004\000\002\136\003\000\002\137\005" +
    "\000\002\137\005\000\002\137\005\000\002\137\005\000" +
    "\002\137\005\000\002\137\005\000\002\137\003\000\002" +
    "\130\005\000\002\130\005\000\002\130\003\000\002\131" +
    "\005\000\002\131\005\000\002\131\003\000\002\132\004" +
    "\000\002\132\003\000\002\133\003\000\002\133\003\000" +
    "\002\133\003\000\002\133\003\000\002\133\003\000\002" +
    "\133\005\000\002\147\003\000\002\147\003\000\002\141" +
    "\003\000\002\141\003\000\002\071\005\000\002\072\004" +
    "\000\002\073\005\000\002\074\005\000\002\076\005\000" +
    "\002\100\004\000\002\101\004\000\002\075\005\000\002" +
    "\104\005\000\002\103\004\000\002\103\002\000\002\102" +
    "\005\000\002\077\004\000\002\105\005\000\002\142\004" +
    "\000\002\142\002\000\002\146\003\000\002\146\003\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\011\006\000\002\011\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\031\006\000\002" +
    "\031\006\000\002\032\006\000\002\032\006\000\002\033" +
    "\006\000\002\033\006\000\002\034\006\000\002\034\006" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\036\006\000\002\036\006\000\002" +
    "\037\006\000\002\037\006\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\041\006\000\002\041\006" +
    "\000\002\042\006\000\002\042\006\000\002\042\006\000" +
    "\002\043\006\000\002\043\006\000\002\044\005\000\002" +
    "\044\005\000\002\006\004\000\002\006\002\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\022\003" +
    "\000\002\022\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\143\003\000\002" +
    "\143\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\017\003\000\002\017\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\047\005\000\002\047\005\000\002" +
    "\047\005\000\002\047\005\000\002\050\006\000\002\050" +
    "\006\000\002\050\006\000\002\050\006\000\002\050\006" +
    "\000\002\051\006\000\002\051\006\000\002\051\006\000" +
    "\002\051\006\000\002\051\006\000\002\052\006\000\002" +
    "\052\006\000\002\052\006\000\002\052\006\000\002\052" +
    "\006\000\002\053\006\000\002\053\006\000\002\053\006" +
    "\000\002\053\006\000\002\053\006\000\002\054\006\000" +
    "\002\054\006\000\002\054\006\000\002\054\006\000\002" +
    "\054\006\000\002\055\006\000\002\055\006\000\002\055" +
    "\006\000\002\055\006\000\002\055\006\000\002\056\006" +
    "\000\002\056\006\000\002\056\006\000\002\056\006\000" +
    "\002\056\006\000\002\057\006\000\002\057\006\000\002" +
    "\057\006\000\002\057\006\000\002\057\006\000\002\060" +
    "\006\000\002\060\006\000\002\060\006\000\002\060\006" +
    "\000\002\060\006\000\002\061\006\000\002\061\006\000" +
    "\002\061\006\000\002\061\006\000\002\061\006\000\002" +
    "\062\006\000\002\062\006\000\002\062\006\000\002\062" +
    "\006\000\002\062\006\000\002\063\006\000\002\063\006" +
    "\000\002\063\006\000\002\063\006\000\002\063\006\000" +
    "\002\064\006\000\002\064\006\000\002\064\006\000\002" +
    "\064\006\000\002\064\006\000\002\065\006\000\002\065" +
    "\006\000\002\065\006\000\002\065\006\000\002\065\006" +
    "\000\002\066\006\000\002\066\006\000\002\066\006\000" +
    "\002\066\006\000\002\066\006\000\002\067\006\000\002" +
    "\067\006\000\002\067\006\000\002\067\006\000\002\067" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0274\000\006\003\004\101\005\001\002\000\004\004" +
    "\u0274\001\002\000\006\003\u026e\004\u026f\001\002\000\006" +
    "\003\011\101\014\001\002\000\004\002\010\001\002\000" +
    "\004\002\000\001\002\000\004\005\u026c\001\002\000\006" +
    "\003\323\101\324\001\002\000\006\003\023\101\026\001" +
    "\002\000\006\003\015\005\016\001\002\000\004\100\021" +
    "\001\002\000\006\003\020\100\017\001\002\000\006\003" +
    "\uff9a\101\uff9a\001\002\000\006\003\uff97\101\uff97\001\002" +
    "\000\006\003\uff98\101\uff98\001\002\000\006\003\ufffd\101" +
    "\ufffd\001\002\000\006\006\274\007\272\001\002\000\006" +
    "\003\ufffb\101\ufffb\001\002\000\006\003\302\101\303\001" +
    "\002\000\006\006\064\007\061\001\002\000\006\003\056" +
    "\101\060\001\002\000\012\003\uffa0\101\uffa0\142\uffa0\143" +
    "\uffa0\001\002\000\006\003\ufffc\101\ufffc\001\002\000\012" +
    "\003\034\101\035\142\033\143\037\001\002\000\012\003" +
    "\uff9f\101\uff9f\142\uff9f\143\uff9f\001\002\000\004\122\052" +
    "\001\002\000\006\003\041\122\042\001\002\000\006\003" +
    "\uffaf\101\uffaf\001\002\000\012\003\uff9e\101\uff9e\142\uff9e" +
    "\143\uff9e\001\002\000\012\003\uffa1\101\uffa1\142\uffa1\143" +
    "\uffa1\001\002\000\004\006\050\001\002\000\006\003\043" +
    "\006\044\001\002\000\004\100\047\001\002\000\006\003" +
    "\045\100\046\001\002\000\006\003\uff15\101\uff15\001\002" +
    "\000\006\003\uff19\101\uff19\001\002\000\006\003\uff16\101" +
    "\uff16\001\002\000\004\100\051\001\002\000\006\003\uff17" +
    "\101\uff17\001\002\000\004\006\053\001\002\000\004\100" +
    "\054\001\002\000\006\003\uff18\101\uff18\001\002\000\006" +
    "\003\ufffe\101\ufffe\001\002\000\010\006\274\007\272\122" +
    "\273\001\002\000\006\003\uffff\101\uffff\001\002\000\012" +
    "\003\062\006\064\007\061\122\063\001\002\000\010\003" +
    "\uff71\100\uff71\104\uff71\001\002\000\004\005\074\001\002" +
    "\000\006\003\067\005\070\001\002\000\006\003\066\100" +
    "\065\001\002\000\012\003\uff96\101\uff96\142\uff96\143\uff96" +
    "\001\002\000\012\003\uff94\101\uff94\142\uff94\143\uff94\001" +
    "\002\000\004\100\073\001\002\000\006\003\071\100\072" +
    "\001\002\000\006\003\uff1a\101\uff1a\001\002\000\006\003" +
    "\uff1e\101\uff1e\001\002\000\006\003\uff1b\101\uff1b\001\002" +
    "\000\004\100\075\001\002\000\006\003\uff1c\101\uff1c\001" +
    "\002\000\010\003\077\100\100\104\102\001\002\000\046" +
    "\003\123\025\141\026\134\027\130\030\144\031\104\032" +
    "\145\034\114\035\121\036\127\037\131\041\116\042\142" +
    "\043\105\044\126\045\137\046\136\130\110\001\002\000" +
    "\006\003\uff93\101\uff93\001\002\000\010\003\uff72\100\uff72" +
    "\104\uff72\001\002\000\046\003\123\025\141\026\134\027" +
    "\130\030\144\031\104\032\145\034\114\035\121\036\127" +
    "\037\131\041\116\042\142\043\105\044\126\045\137\046" +
    "\136\130\110\001\002\000\006\003\uff6b\105\uff6b\001\002" +
    "\000\006\003\263\126\264\001\002\000\006\003\uff2e\126" +
    "\uff2e\001\002\000\006\003\256\126\257\001\002\000\006" +
    "\003\251\126\252\001\002\000\006\003\uff37\126\uff37\001" +
    "\002\000\006\003\244\126\245\001\002\000\006\003\uff6c" +
    "\105\uff6c\001\002\000\006\003\uff62\105\uff62\001\002\000" +
    "\006\003\237\126\240\001\002\000\006\003\uff65\105\uff65" +
    "\001\002\000\006\003\232\126\233\001\002\000\006\003" +
    "\230\105\231\001\002\000\006\003\uff64\105\uff64\001\002" +
    "\000\006\003\223\126\224\001\002\000\006\003\uff69\105" +
    "\uff69\001\002\000\010\003\uff60\105\uff60\126\205\001\002" +
    "\000\006\003\200\126\201\001\002\000\006\003\uff63\105" +
    "\uff63\001\002\000\006\003\uff2d\126\uff2d\001\002\000\006" +
    "\003\173\126\174\001\002\000\006\003\uff4c\126\uff4c\001" +
    "\002\000\006\003\uff38\126\uff38\001\002\000\006\003\uff6d" +
    "\105\uff6d\001\002\000\006\003\uff61\105\uff61\001\002\000" +
    "\006\003\uff4d\126\uff4d\001\002\000\006\003\uff67\105\uff67" +
    "\001\002\000\006\003\166\126\167\001\002\000\006\003" +
    "\161\126\162\001\002\000\006\003\uff6a\105\uff6a\001\002" +
    "\000\006\003\uff53\126\uff53\001\002\000\006\003\uff52\126" +
    "\uff52\001\002\000\006\003\uff68\105\uff68\001\002\000\006" +
    "\003\154\126\155\001\002\000\006\003\147\126\150\001" +
    "\002\000\006\003\uff66\105\uff66\001\002\000\004\135\153" +
    "\001\002\000\006\003\151\135\152\001\002\000\006\003" +
    "\uff41\105\uff41\001\002\000\006\003\uff44\105\uff44\001\002" +
    "\000\006\003\uff42\105\uff42\001\002\000\004\073\160\001" +
    "\002\000\006\003\156\073\157\001\002\000\006\003\uff49" +
    "\105\uff49\001\002\000\006\003\uff4b\105\uff4b\001\002\000" +
    "\006\003\uff4a\105\uff4a\001\002\000\004\144\165\001\002" +
    "\000\006\003\164\144\163\001\002\000\006\003\uff2a\105" +
    "\uff2a\001\002\000\006\003\uff28\105\uff28\001\002\000\006" +
    "\003\uff29\105\uff29\001\002\000\004\141\172\001\002\000" +
    "\006\003\170\141\171\001\002\000\006\003\uff24\105\uff24" +
    "\001\002\000\006\003\uff27\105\uff27\001\002\000\006\003" +
    "\uff25\105\uff25\001\002\000\004\144\177\001\002\000\006" +
    "\003\176\144\175\001\002\000\006\003\uff5b\105\uff5b\001" +
    "\002\000\006\003\uff58\105\uff58\001\002\000\006\003\uff59" +
    "\105\uff59\001\002\000\004\071\204\001\002\000\006\003" +
    "\202\071\203\001\002\000\006\003\uff4e\105\uff4e\001\002" +
    "\000\006\003\uff51\105\uff51\001\002\000\006\003\uff4f\105" +
    "\uff4f\001\002\000\032\071\220\072\210\073\221\075\207" +
    "\123\216\127\217\131\211\134\222\135\206\136\215\141" +
    "\212\144\213\001\002\000\006\003\uff43\105\uff43\001\002" +
    "\000\006\003\uff5e\105\uff5e\001\002\000\006\003\uff3b\105" +
    "\uff3b\001\002\000\006\003\uff47\105\uff47\001\002\000\006" +
    "\003\uff26\105\uff26\001\002\000\006\003\uff5a\105\uff5a\001" +
    "\002\000\006\003\uff31\105\uff31\001\002\000\006\003\uff35" +
    "\105\uff35\001\002\000\006\003\uff56\105\uff56\001\002\000" +
    "\006\003\uff2b\105\uff2b\001\002\000\006\003\uff50\105\uff50" +
    "\001\002\000\006\003\uff2c\105\uff2c\001\002\000\006\003" +
    "\uff3f\105\uff3f\001\002\000\004\075\227\001\002\000\006" +
    "\003\226\075\225\001\002\000\006\003\uff5f\105\uff5f\001" +
    "\002\000\006\003\uff5c\105\uff5c\001\002\000\006\003\uff5d" +
    "\105\uff5d\001\002\000\010\003\uff6e\100\uff6e\104\uff6e\001" +
    "\002\000\010\003\uff70\100\uff70\104\uff70\001\002\000\004" +
    "\136\236\001\002\000\006\003\234\136\235\001\002\000" +
    "\006\003\uff33\105\uff33\001\002\000\006\003\uff36\105\uff36" +
    "\001\002\000\006\003\uff34\105\uff34\001\002\000\004\134" +
    "\243\001\002\000\006\003\241\134\242\001\002\000\006" +
    "\003\uff3d\105\uff3d\001\002\000\006\003\uff40\105\uff40\001" +
    "\002\000\006\003\uff3e\105\uff3e\001\002\000\004\072\250" +
    "\001\002\000\006\003\246\072\247\001\002\000\006\003" +
    "\uff39\105\uff39\001\002\000\006\003\uff3c\105\uff3c\001\002" +
    "\000\006\003\uff3a\105\uff3a\001\002\000\006\073\221\127" +
    "\217\001\002\000\010\003\254\073\221\127\217\001\002" +
    "\000\006\003\uff32\105\uff32\001\002\000\006\003\uff2f\105" +
    "\uff2f\001\002\000\006\003\uff30\105\uff30\001\002\000\004" +
    "\123\262\001\002\000\006\003\261\123\260\001\002\000" +
    "\006\003\uff57\105\uff57\001\002\000\006\003\uff54\105\uff54" +
    "\001\002\000\006\003\uff55\105\uff55\001\002\000\004\131" +
    "\267\001\002\000\006\003\265\131\266\001\002\000\006" +
    "\003\uff45\105\uff45\001\002\000\006\003\uff48\105\uff48\001" +
    "\002\000\006\003\uff46\105\uff46\001\002\000\004\105\271" +
    "\001\002\000\010\003\uff6f\100\uff6f\104\uff6f\001\002\000" +
    "\010\003\uff71\100\uff71\104\uff71\001\002\000\004\005\276" +
    "\001\002\000\004\100\275\001\002\000\012\003\uff95\101" +
    "\uff95\142\uff95\143\uff95\001\002\000\004\100\277\001\002" +
    "\000\006\003\uff1d\101\uff1d\001\002\000\010\003\077\100" +
    "\301\104\102\001\002\000\006\003\uff92\101\uff92\001\002" +
    "\000\004\122\316\001\002\000\006\003\305\122\306\001" +
    "\002\000\006\003\uffae\101\uffae\001\002\000\004\007\314" +
    "\001\002\000\006\003\310\007\307\001\002\000\006\003" +
    "\313\100\312\001\002\000\004\100\311\001\002\000\006" +
    "\003\uff11\101\uff11\001\002\000\006\003\uff14\101\uff14\001" +
    "\002\000\006\003\uff10\101\uff10\001\002\000\004\100\315" +
    "\001\002\000\006\003\uff12\101\uff12\001\002\000\004\007" +
    "\317\001\002\000\004\100\320\001\002\000\006\003\uff13" +
    "\101\uff13\001\002\000\006\003\u025e\101\u025f\001\002\000" +
    "\006\003\ufff8\101\ufff8\001\002\000\004\010\333\001\002" +
    "\000\006\003\325\010\326\001\002\000\010\003\uff71\100" +
    "\uff71\104\uff71\001\002\000\010\003\uff71\100\uff71\104\uff71" +
    "\001\002\000\010\003\077\100\330\104\102\001\002\000" +
    "\006\003\uff91\101\uff91\001\002\000\010\003\077\100\332" +
    "\104\102\001\002\000\006\003\uff8f\101\uff8f\001\002\000" +
    "\010\003\uff71\100\uff71\104\uff71\001\002\000\010\003\077" +
    "\100\335\104\102\001\002\000\006\003\uff90\101\uff90\001" +
    "\002\000\006\003\356\101\340\001\002\000\012\003\uffa0" +
    "\101\uffa0\142\uffa0\143\uffa0\001\002\000\034\003\u0245\011" +
    "\u0203\012\u01fe\013\u01fb\014\u0202\016\u01ff\017\u0205\020\u01fd" +
    "\021\u01fc\022\u0204\023\u0206\024\u0200\122\u0244\001\002\000" +
    "\006\003\ufff4\101\ufff4\001\002\000\006\003\ufffa\101\ufffa" +
    "\001\002\000\006\003\ufff1\101\ufff1\001\002\000\012\003" +
    "\uffa0\101\uffa0\142\uffa0\143\uffa0\001\002\000\006\003\ufff0" +
    "\101\ufff0\001\002\000\006\003\ufff2\101\ufff2\001\002\000" +
    "\006\003\ufff5\101\ufff5\001\002\000\006\003\u0226\101\u0227" +
    "\001\002\000\006\003\ufff8\101\ufff8\001\002\000\006\003" +
    "\uffa5\101\uffa5\001\002\000\006\003\ufff7\101\ufff7\001\002" +
    "\000\006\003\ufff9\101\ufff9\001\002\000\006\003\u01bd\101" +
    "\u01be\001\002\000\032\011\u01a2\012\u019d\013\u019c\014\u01a1" +
    "\016\u019f\017\u01a4\020\u019e\021\u019b\022\u01a3\023\u01a5\024" +
    "\u01a0\122\u019a\001\002\000\006\003\ufff3\101\ufff3\001\002" +
    "\000\006\003\uffed\101\uffed\001\002\000\006\003\uffef\101" +
    "\uffef\001\002\000\012\003\uffa0\101\uffa0\142\uffa0\143\uffa0" +
    "\001\002\000\006\003\ufff6\101\ufff6\001\002\000\012\003" +
    "\uffa0\101\uffa0\142\uffa0\143\uffa0\001\002\000\006\003\uffee" +
    "\101\uffee\001\002\000\020\003\uffea\051\uffea\054\uffea\055" +
    "\uffea\076\uffea\077\uffea\101\uffea\001\002\000\006\003\370" +
    "\101\371\001\002\000\004\122\u0104\001\002\000\006\003" +
    "\373\122\374\001\002\000\006\003\uffa3\101\uffa3\001\002" +
    "\000\004\017\u0102\001\002\000\006\003\375\017\376\001" +
    "\002\000\004\100\u0101\001\002\000\006\003\u0100\100\377" +
    "\001\002\000\006\003\ufeec\101\ufeec\001\002\000\006\003" +
    "\ufee8\101\ufee8\001\002\000\006\003\ufee9\101\ufee9\001\002" +
    "\000\004\100\u0103\001\002\000\006\003\ufeea\101\ufeea\001" +
    "\002\000\004\017\u0105\001\002\000\004\100\u0106\001\002" +
    "\000\006\003\ufeeb\101\ufeeb\001\002\000\020\003\u010e\051" +
    "\u010a\054\u0110\055\u010c\076\u0108\077\u010f\101\u0109\001\002" +
    "\000\006\067\u0112\143\uffcf\001\002\000\006\003\u0168\122" +
    "\u0169\001\002\000\006\067\u0112\143\uffcf\001\002\000\020" +
    "\003\uffeb\051\uffeb\054\uffeb\055\uffeb\076\uffeb\077\uffeb\101" +
    "\uffeb\001\002\000\006\067\u0112\143\uffcf\001\002\000\006" +
    "\003\uffec\101\uffec\001\002\000\004\122\u0153\001\002\000" +
    "\006\067\u0112\143\uffcf\001\002\000\006\067\u0112\143\uffcf" +
    "\001\002\000\006\107\uffd7\137\uffd7\001\002\000\004\143" +
    "\uffd0\001\002\000\006\107\u0119\137\u0118\001\002\000\004" +
    "\143\u0115\001\002\000\010\107\uffd5\126\u0116\137\uffd5\001" +
    "\002\000\004\145\u0117\001\002\000\006\107\uffd6\137\uffd6" +
    "\001\002\000\006\067\u0112\143\uffcf\001\002\000\020\003" +
    "\uffe5\051\uffe5\054\uffe5\055\uffe5\076\uffe5\077\uffe5\101\uffe5" +
    "\001\002\000\006\107\uffd8\137\uffd8\001\002\000\006\107" +
    "\uffdf\137\uffdf\001\002\000\006\107\u0151\137\u0150\001\002" +
    "\000\004\143\u011e\001\002\000\010\107\uffdd\126\u011f\137" +
    "\uffdd\001\002\000\026\047\u012f\050\u0122\052\u0124\053\u012d" +
    "\075\u0128\116\u0123\120\u012e\124\u0125\144\u012a\145\u0121\001" +
    "\002\000\040\100\uffb7\101\uffb7\107\uffb7\110\uffb7\111\uffb7" +
    "\112\uffb7\113\uffb7\114\uffb7\115\uffb7\117\uffb7\120\uffb7\121" +
    "\uffb7\122\uffb7\125\uffb7\137\uffb7\001\002\000\040\100\uffb6" +
    "\101\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\114" +
    "\uffb6\115\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6\125\uffb6" +
    "\137\uffb6\001\002\000\040\100\uffb8\101\uffb8\107\uffb8\110" +
    "\uffb8\111\uffb8\112\uffb8\113\uffb8\114\uffb8\115\uffb8\117\uffb8" +
    "\120\uffb8\121\uffb8\122\uffb8\125\uffb8\137\uffb8\001\002\000" +
    "\024\047\u012f\050\u0122\052\u0124\053\u012d\075\u0128\120\u012e" +
    "\124\u0125\144\u012a\145\u0121\001\002\000\040\100\uffb1\101" +
    "\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1" +
    "\115\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1\125\uffb1\137" +
    "\uffb1\001\002\000\026\047\u012f\050\u0122\052\u0124\053\u012d" +
    "\075\u0128\116\u0123\120\u012e\124\u0125\144\u012a\145\u0121\001" +
    "\002\000\040\100\uffb5\101\uffb5\107\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\113\uffb5\114\uffb5\115\uffb5\117\uffb5\120\uffb5\121" +
    "\uffb5\122\uffb5\125\uffb5\137\uffb5\001\002\000\040\100\uffba" +
    "\101\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114" +
    "\uffba\115\uffba\117\uffba\120\uffba\121\uffba\122\uffba\125\uffba" +
    "\137\uffba\001\002\000\040\100\uffb2\101\uffb2\107\uffb2\110" +
    "\uffb2\111\uffb2\112\uffb2\113\uffb2\114\uffb2\115\uffb2\117\uffb2" +
    "\120\uffb2\121\uffb2\122\uffb2\125\uffb2\137\uffb2\001\002\000" +
    "\040\100\uffbc\101\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc" +
    "\113\uffbc\114\uffbc\115\uffbc\117\uffbc\120\uffbc\121\uffbc\122" +
    "\uffbc\125\uffbc\137\uffbc\001\002\000\040\100\uffb3\101\uffb3" +
    "\107\uffb3\110\uffb3\111\uffb3\112\uffb3\113\uffb3\114\uffb3\115" +
    "\uffb3\117\uffb3\120\uffb3\121\uffb3\122\uffb3\125\uffb3\137\uffb3" +
    "\001\002\000\040\100\uffbf\101\uffbf\107\uffbf\110\uffbf\111" +
    "\uffbf\112\uffbf\113\uffbf\114\uffbf\115\uffbf\117\uffbf\120\uffbf" +
    "\121\u0147\122\u0146\125\uffbf\137\uffbf\001\002\000\034\100" +
    "\u0139\101\u013d\107\uffc2\110\u0140\111\u013f\112\u013e\113\u013b" +
    "\114\uffc2\115\uffc2\117\u013a\120\u013c\125\uffc2\137\uffc2\001" +
    "\002\000\040\100\uffb0\101\uffb0\107\uffb0\110\uffb0\111\uffb0" +
    "\112\uffb0\113\uffb0\114\uffb0\115\uffb0\117\uffb0\120\uffb0\121" +
    "\uffb0\122\uffb0\125\uffb0\137\uffb0\001\002\000\022\047\u012f" +
    "\050\u0122\052\u0124\053\u012d\075\u0128\124\u0125\144\u012a\145" +
    "\u0121\001\002\000\040\100\uffb9\101\uffb9\107\uffb9\110\uffb9" +
    "\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\117\uffb9\120" +
    "\uffb9\121\uffb9\122\uffb9\125\uffb9\137\uffb9\001\002\000\014" +
    "\107\uffc9\114\uffc9\115\uffc9\125\uffc9\137\uffc9\001\002\000" +
    "\014\107\uffcb\114\uffcb\115\uffcb\125\uffcb\137\uffcb\001\002" +
    "\000\014\107\uffcd\114\uffcd\115\u0136\125\uffcd\137\uffcd\001" +
    "\002\000\010\107\uffde\114\u0134\137\uffde\001\002\000\026" +
    "\047\u012f\050\u0122\052\u0124\053\u012d\075\u0128\116\u0123\120" +
    "\u012e\124\u0125\144\u012a\145\u0121\001\002\000\014\107\uffce" +
    "\114\uffce\115\u0136\125\uffce\137\uffce\001\002\000\026\047" +
    "\u012f\050\u0122\052\u0124\053\u012d\075\u0128\116\u0123\120\u012e" +
    "\124\u0125\144\u012a\145\u0121\001\002\000\014\107\uffcc\114" +
    "\uffcc\115\uffcc\125\uffcc\137\uffcc\001\002\000\040\100\uffbb" +
    "\101\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\114" +
    "\uffbb\115\uffbb\117\uffbb\120\uffbb\121\uffbb\122\uffbb\125\uffbb" +
    "\137\uffbb\001\002\000\024\047\u012f\050\u0122\052\u0124\053" +
    "\u012d\075\u0128\120\u012e\124\u0125\144\u012a\145\u0121\001\002" +
    "\000\024\047\u012f\050\u0122\052\u0124\053\u012d\075\u0128\120" +
    "\u012e\124\u0125\144\u012a\145\u0121\001\002\000\024\047\u012f" +
    "\050\u0122\052\u0124\053\u012d\075\u0128\120\u012e\124\u0125\144" +
    "\u012a\145\u0121\001\002\000\024\047\u012f\050\u0122\052\u0124" +
    "\053\u012d\075\u0128\120\u012e\124\u0125\144\u012a\145\u0121\001" +
    "\002\000\024\047\u012f\050\u0122\052\u0124\053\u012d\075\u0128" +
    "\120\u012e\124\u0125\144\u012a\145\u0121\001\002\000\024\047" +
    "\u012f\050\u0122\052\u0124\053\u012d\075\u0128\120\u012e\124\u0125" +
    "\144\u012a\145\u0121\001\002\000\024\047\u012f\050\u0122\052" +
    "\u0124\053\u012d\075\u0128\120\u012e\124\u0125\144\u012a\145\u0121" +
    "\001\002\000\024\047\u012f\050\u0122\052\u0124\053\u012d\075" +
    "\u0128\120\u012e\124\u0125\144\u012a\145\u0121\001\002\000\020" +
    "\107\uffc4\114\uffc4\115\uffc4\117\u013a\120\u013c\125\uffc4\137" +
    "\uffc4\001\002\000\020\107\uffc3\114\uffc3\115\uffc3\117\u013a" +
    "\120\u013c\125\uffc3\137\uffc3\001\002\000\020\107\uffc6\114" +
    "\uffc6\115\uffc6\117\u013a\120\u013c\125\uffc6\137\uffc6\001\002" +
    "\000\020\107\uffc8\114\uffc8\115\uffc8\117\u013a\120\u013c\125" +
    "\uffc8\137\uffc8\001\002\000\040\100\uffc0\101\uffc0\107\uffc0" +
    "\110\uffc0\111\uffc0\112\uffc0\113\uffc0\114\uffc0\115\uffc0\117" +
    "\uffc0\120\uffc0\121\u0147\122\u0146\125\uffc0\137\uffc0\001\002" +
    "\000\024\047\u012f\050\u0122\052\u0124\053\u012d\075\u0128\120" +
    "\u012e\124\u0125\144\u012a\145\u0121\001\002\000\024\047\u012f" +
    "\050\u0122\052\u0124\053\u012d\075\u0128\120\u012e\124\u0125\144" +
    "\u012a\145\u0121\001\002\000\040\100\uffbe\101\uffbe\107\uffbe" +
    "\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\117" +
    "\uffbe\120\uffbe\121\uffbe\122\uffbe\125\uffbe\137\uffbe\001\002" +
    "\000\040\100\uffbd\101\uffbd\107\uffbd\110\uffbd\111\uffbd\112" +
    "\uffbd\113\uffbd\114\uffbd\115\uffbd\117\uffbd\120\uffbd\121\uffbd" +
    "\122\uffbd\125\uffbd\137\uffbd\001\002\000\020\107\uffc5\114" +
    "\uffc5\115\uffc5\117\u013a\120\u013c\125\uffc5\137\uffc5\001\002" +
    "\000\040\100\uffc1\101\uffc1\107\uffc1\110\uffc1\111\uffc1\112" +
    "\uffc1\113\uffc1\114\uffc1\115\uffc1\117\uffc1\120\uffc1\121\u0147" +
    "\122\u0146\125\uffc1\137\uffc1\001\002\000\020\107\uffc7\114" +
    "\uffc7\115\uffc7\117\u013a\120\u013c\125\uffc7\137\uffc7\001\002" +
    "\000\006\114\u0134\125\u014e\001\002\000\040\100\uffb4\101" +
    "\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4" +
    "\115\uffb4\117\uffb4\120\uffb4\121\uffb4\122\uffb4\125\uffb4\137" +
    "\uffb4\001\002\000\014\107\uffca\114\uffca\115\uffca\125\uffca" +
    "\137\uffca\001\002\000\006\067\u0112\143\uffcf\001\002\000" +
    "\020\003\uffe7\051\uffe7\054\uffe7\055\uffe7\076\uffe7\077\uffe7" +
    "\101\uffe7\001\002\000\006\107\uffe0\137\uffe0\001\002\000" +
    "\004\024\u0154\001\002\000\004\100\u0155\001\002\000\006" +
    "\003\ufed7\101\ufed7\001\002\000\006\107\u015d\137\u015c\001" +
    "\002\000\004\143\u0159\001\002\000\006\107\uffd3\137\uffd3" +
    "\001\002\000\010\107\uffd1\126\u015a\137\uffd1\001\002\000" +
    "\026\047\u012f\050\u0122\052\u0124\053\u012d\075\u0128\116\u0123" +
    "\120\u012e\124\u0125\144\u012a\145\u0121\001\002\000\010\107" +
    "\uffd2\114\u0134\137\uffd2\001\002\000\006\067\u0112\143\uffcf" +
    "\001\002\000\020\003\uffe8\051\uffe8\054\uffe8\055\uffe8\076" +
    "\uffe8\077\uffe8\101\uffe8\001\002\000\006\107\uffd4\137\uffd4" +
    "\001\002\000\006\107\uffdb\137\uffdb\001\002\000\006\107" +
    "\u0166\137\u0165\001\002\000\004\143\u0162\001\002\000\010" +
    "\107\uffd9\126\u0163\137\uffd9\001\002\000\026\047\u012f\050" +
    "\u0122\052\u0124\053\u012d\075\u0128\116\u0123\120\u012e\124\u0125" +
    "\144\u012a\145\u0121\001\002\000\010\107\uffda\114\u0134\137" +
    "\uffda\001\002\000\006\067\u0112\143\uffcf\001\002\000\020" +
    "\003\uffe6\051\uffe6\054\uffe6\055\uffe6\076\uffe6\077\uffe6\101" +
    "\uffe6\001\002\000\006\107\uffdc\137\uffdc\001\002\000\004" +
    "\024\u016f\001\002\000\006\003\u016b\024\u016a\001\002\000" +
    "\006\003\u016e\100\u016d\001\002\000\004\100\u016c\001\002" +
    "\000\006\003\ufed5\101\ufed5\001\002\000\006\003\ufed8\101" +
    "\ufed8\001\002\000\006\003\ufed4\101\ufed4\001\002\000\004" +
    "\100\u0170\001\002\000\006\003\ufed6\101\ufed6\001\002\000" +
    "\006\107\u0178\137\u0177\001\002\000\006\107\uffe3\137\uffe3" +
    "\001\002\000\004\143\u0174\001\002\000\010\107\uffe1\126" +
    "\u0175\137\uffe1\001\002\000\026\047\u012f\050\u0122\052\u0124" +
    "\053\u012d\075\u0128\116\u0123\120\u012e\124\u0125\144\u012a\145" +
    "\u0121\001\002\000\010\107\uffe2\114\u0134\137\uffe2\001\002" +
    "\000\006\067\u0112\143\uffcf\001\002\000\020\003\uffe9\051" +
    "\uffe9\054\uffe9\055\uffe9\076\uffe9\077\uffe9\101\uffe9\001\002" +
    "\000\006\107\uffe4\137\uffe4\001\002\000\012\003\u017c\101" +
    "\u017d\142\033\143\037\001\002\000\006\003\uffab\101\uffab" +
    "\001\002\000\004\122\u0187\001\002\000\006\003\u017e\122" +
    "\u017f\001\002\000\004\023\u0185\001\002\000\006\003\u0180" +
    "\023\u0181\001\002\000\004\100\u0184\001\002\000\006\003" +
    "\u0183\100\u0182\001\002\000\006\003\ufedd\101\ufedd\001\002" +
    "\000\006\003\ufed9\101\ufed9\001\002\000\006\003\ufeda\101" +
    "\ufeda\001\002\000\004\100\u0186\001\002\000\006\003\ufedb" +
    "\101\ufedb\001\002\000\004\023\u0188\001\002\000\004\100" +
    "\u0189\001\002\000\006\003\ufedc\101\ufedc\001\002\000\012" +
    "\003\u018b\101\u018c\142\033\143\037\001\002\000\004\122" +
    "\u0197\001\002\000\006\003\u018e\122\u018f\001\002\000\006" +
    "\003\uffad\101\uffad\001\002\000\004\011\u0195\001\002\000" +
    "\006\003\u0191\011\u0190\001\002\000\006\003\u0194\100\u0193" +
    "\001\002\000\004\100\u0192\001\002\000\006\003\uff07\101" +
    "\uff07\001\002\000\006\003\uff0a\101\uff0a\001\002\000\006" +
    "\003\uff06\101\uff06\001\002\000\004\100\u0196\001\002\000" +
    "\006\003\uff08\101\uff08\001\002\000\004\011\u0198\001\002" +
    "\000\004\100\u0199\001\002\000\006\003\uff09\101\uff09\001" +
    "\002\000\004\010\u01ba\001\002\000\010\003\uff71\100\uff71" +
    "\104\uff71\001\002\000\010\003\uff71\100\uff71\104\uff71\001" +
    "\002\000\010\003\uff71\100\uff71\104\uff71\001\002\000\004" +
    "\100\u01b3\001\002\000\010\003\uff71\100\uff71\104\uff71\001" +
    "\002\000\004\100\u01b0\001\002\000\010\003\uff71\100\uff71" +
    "\104\uff71\001\002\000\010\003\uff71\100\uff71\104\uff71\001" +
    "\002\000\010\003\uff71\100\uff71\104\uff71\001\002\000\010" +
    "\003\uff71\100\uff71\104\uff71\001\002\000\010\003\uff71\100" +
    "\uff71\104\uff71\001\002\000\010\003\077\100\u01a7\104\102" +
    "\001\002\000\012\003\uff75\101\uff75\142\uff75\143\uff75\001" +
    "\002\000\010\003\077\100\u01a9\104\102\001\002\000\006" +
    "\003\uff7f\101\uff7f\001\002\000\010\003\077\100\u01ab\104" +
    "\102\001\002\000\012\003\uff78\101\uff78\142\uff78\143\uff78" +
    "\001\002\000\010\003\077\100\u01ad\104\102\001\002\000" +
    "\012\003\uff8d\101\uff8d\142\uff8d\143\uff8d\001\002\000\010" +
    "\003\077\100\u01af\104\102\001\002\000\006\003\uff87\101" +
    "\uff87\001\002\000\020\003\uff73\051\uff73\054\uff73\055\uff73" +
    "\076\uff73\077\uff73\101\uff73\001\002\000\010\003\077\100" +
    "\u01b2\104\102\001\002\000\006\003\uff81\101\uff81\001\002" +
    "\000\006\003\uff7d\101\uff7d\001\002\000\010\003\077\100" +
    "\u01b5\104\102\001\002\000\006\003\uff8b\101\uff8b\001\002" +
    "\000\010\003\077\100\u01b7\104\102\001\002\000\006\003" +
    "\uff89\101\uff89\001\002\000\010\003\077\100\u01b9\104\102" +
    "\001\002\000\012\003\uff7a\101\uff7a\142\uff7a\143\uff7a\001" +
    "\002\000\004\100\u01bb\001\002\000\006\003\uff0e\101\uff0e" +
    "\001\002\000\006\003\uffa9\101\uffa9\001\002\000\004\122" +
    "\u01c8\001\002\000\006\003\u01bf\122\u01c0\001\002\000\004" +
    "\013\u01c6\001\002\000\006\003\u01c1\013\u01c2\001\002\000" +
    "\004\100\u01c5\001\002\000\006\003\u01c3\100\u01c4\001\002" +
    "\000\006\003\ufefc\101\ufefc\001\002\000\006\003\uff00\101" +
    "\uff00\001\002\000\006\003\ufefd\101\ufefd\001\002\000\004" +
    "\100\u01c7\001\002\000\006\003\ufefe\101\ufefe\001\002\000" +
    "\004\013\u01c9\001\002\000\004\100\u01ca\001\002\000\006" +
    "\003\ufeff\101\ufeff\001\002\000\006\003\u01cc\101\u01d0\001" +
    "\002\000\006\015\u01ee\122\u01ef\001\002\000\006\003\uffa7" +
    "\101\uffa7\001\002\000\012\003\uffa0\101\uffa0\142\uffa0\143" +
    "\uffa0\001\002\000\006\003\uffa6\101\uffa6\001\002\000\010" +
    "\003\u01d1\015\u01d2\122\u01d3\001\002\000\006\014\u01dc\100" +
    "\u01db\001\002\000\006\003\u01d9\100\u01da\001\002\000\006" +
    "\003\u01d4\014\u01d5\001\002\000\004\100\u01d8\001\002\000" +
    "\006\003\u01d6\100\u01d7\001\002\000\006\003\ufef7\101\ufef7" +
    "\001\002\000\006\003\ufefb\101\ufefb\001\002\000\006\003" +
    "\ufef8\101\ufef8\001\002\000\012\003\uff83\101\uff83\142\uff83" +
    "\143\uff83\001\002\000\012\003\uff86\101\uff86\142\uff86\143" +
    "\uff86\001\002\000\012\003\uff84\101\uff84\142\uff84\143\uff84" +
    "\001\002\000\004\100\u01dd\001\002\000\006\003\ufef9\101" +
    "\ufef9\001\002\000\012\003\u01df\101\u01e0\142\033\143\037" +
    "\001\002\000\004\122\u01eb\001\002\000\006\003\u01e2\122" +
    "\u01e3\001\002\000\006\003\uffa4\101\uffa4\001\002\000\004" +
    "\015\u01e9\001\002\000\006\003\u01e4\015\u01e5\001\002\000" +
    "\004\100\u01e8\001\002\000\006\003\u01e7\100\u01e6\001\002" +
    "\000\006\003\ufef6\101\ufef6\001\002\000\006\003\ufef2\101" +
    "\ufef2\001\002\000\006\003\ufef3\101\ufef3\001\002\000\004" +
    "\100\u01ea\001\002\000\006\003\ufef4\101\ufef4\001\002\000" +
    "\004\015\u01ec\001\002\000\004\100\u01ed\001\002\000\006" +
    "\003\ufef5\101\ufef5\001\002\000\004\100\u01f2\001\002\000" +
    "\004\014\u01f0\001\002\000\004\100\u01f1\001\002\000\006" +
    "\003\ufefa\101\ufefa\001\002\000\012\003\uff85\101\uff85\142" +
    "\uff85\143\uff85\001\002\000\006\003\u01f6\101\u01f4\001\002" +
    "\000\034\003\u0201\011\u0203\012\u01fe\013\u01fb\014\u0202\016" +
    "\u01ff\017\u0205\020\u01fd\021\u01fc\022\u0204\023\u0206\024\u0200" +
    "\122\u01fa\001\002\000\006\003\uffa2\101\uffa2\001\002\000" +
    "\032\011\u01a2\012\u019d\013\u019c\014\u01a1\016\u019f\017\u01a4" +
    "\020\u019e\021\u019b\022\u01a3\023\u01a5\024\u01a0\122\u01f7\001" +
    "\002\000\004\016\u01f8\001\002\000\004\100\u01f9\001\002" +
    "\000\006\003\ufef0\101\ufef0\001\002\000\006\003\u0220\016" +
    "\u0221\001\002\000\010\003\uff71\100\uff71\104\uff71\001\002" +
    "\000\010\003\uff71\100\uff71\104\uff71\001\002\000\006\003" +
    "\u021a\100\u021b\001\002\000\010\003\uff71\100\uff71\104\uff71" +
    "\001\002\000\010\003\uff71\100\uff71\104\uff71\001\002\000" +
    "\004\100\u0215\001\002\000\012\003\uff71\016\u0211\100\uff71" +
    "\104\uff71\001\002\000\010\003\uff71\100\uff71\104\uff71\001" +
    "\002\000\010\003\uff71\100\uff71\104\uff71\001\002\000\010" +
    "\003\uff71\100\uff71\104\uff71\001\002\000\010\003\uff71\100" +
    "\uff71\104\uff71\001\002\000\010\003\uff71\100\uff71\104\uff71" +
    "\001\002\000\010\003\077\100\u0208\104\102\001\002\000" +
    "\012\003\uff76\101\uff76\142\uff76\143\uff76\001\002\000\010" +
    "\003\077\100\u020a\104\102\001\002\000\006\003\uff80\101" +
    "\uff80\001\002\000\010\003\077\100\u020c\104\102\001\002" +
    "\000\012\003\uff79\101\uff79\142\uff79\143\uff79\001\002\000" +
    "\010\003\077\100\u020e\104\102\001\002\000\012\003\uff8e" +
    "\101\uff8e\142\uff8e\143\uff8e\001\002\000\010\003\077\100" +
    "\u0210\104\102\001\002\000\006\003\uff88\101\uff88\001\002" +
    "\000\004\100\u0214\001\002\000\010\003\077\100\u0213\104" +
    "\102\001\002\000\012\003\uff77\101\uff77\142\uff77\143\uff77" +
    "\001\002\000\006\003\ufeef\101\ufeef\001\002\000\020\003" +
    "\uff74\051\uff74\054\uff74\055\uff74\076\uff74\077\uff74\101\uff74" +
    "\001\002\000\010\003\077\100\u0217\104\102\001\002\000" +
    "\006\003\uff82\101\uff82\001\002\000\010\003\077\100\u0219" +
    "\104\102\001\002\000\006\003\uff8c\101\uff8c\001\002\000" +
    "\006\003\uff7c\101\uff7c\001\002\000\006\003\uff7e\101\uff7e" +
    "\001\002\000\010\003\077\100\u021d\104\102\001\002\000" +
    "\012\003\uff7b\101\uff7b\142\uff7b\143\uff7b\001\002\000\010" +
    "\003\077\100\u021f\104\102\001\002\000\006\003\uff8a\101" +
    "\uff8a\001\002\000\004\100\u0224\001\002\000\006\003\u0223" +
    "\100\u0222\001\002\000\006\003\ufef1\101\ufef1\001\002\000" +
    "\006\003\ufeed\101\ufeed\001\002\000\006\003\ufeee\101\ufeee" +
    "\001\002\000\006\003\uffaa\101\uffaa\001\002\000\004\122" +
    "\u0231\001\002\000\006\003\u0228\122\u0229\001\002\000\004" +
    "\012\u022f\001\002\000\006\003\u022b\012\u022a\001\002\000" +
    "\006\003\u022d\100\u022e\001\002\000\004\100\u022c\001\002" +
    "\000\006\003\uff02\101\uff02\001\002\000\006\003\uff01\101" +
    "\uff01\001\002\000\006\003\uff05\101\uff05\001\002\000\004" +
    "\100\u0230\001\002\000\006\003\uff03\101\uff03\001\002\000" +
    "\004\012\u0232\001\002\000\004\100\u0233\001\002\000\006" +
    "\003\uff04\101\uff04\001\002\000\012\003\u0236\101\u0237\142" +
    "\033\143\037\001\002\000\006\003\uffac\101\uffac\001\002" +
    "\000\004\122\u0241\001\002\000\006\003\u0238\122\u0239\001" +
    "\002\000\004\022\u023f\001\002\000\006\003\u023a\022\u023b" +
    "\001\002\000\004\100\u023e\001\002\000\006\003\u023c\100" +
    "\u023d\001\002\000\006\003\ufede\101\ufede\001\002\000\006" +
    "\003\ufee2\101\ufee2\001\002\000\006\003\ufedf\101\ufedf\001" +
    "\002\000\004\100\u0240\001\002\000\006\003\ufee0\101\ufee0" +
    "\001\002\000\004\022\u0242\001\002\000\004\100\u0243\001" +
    "\002\000\006\003\ufee1\101\ufee1\001\002\000\006\003\u0248" +
    "\010\u0249\001\002\000\012\003\uff71\010\u0246\100\uff71\104" +
    "\uff71\001\002\000\004\100\u0247\001\002\000\006\003\uff0d" +
    "\101\uff0d\001\002\000\004\100\u024c\001\002\000\006\003" +
    "\u024b\100\u024a\001\002\000\006\003\uff0f\101\uff0f\001\002" +
    "\000\006\003\uff0b\101\uff0b\001\002\000\006\003\uff0c\101" +
    "\uff0c\001\002\000\012\003\u024e\101\u024f\142\033\143\037" +
    "\001\002\000\004\122\u025a\001\002\000\006\003\u0251\122" +
    "\u0252\001\002\000\006\003\uffa8\101\uffa8\001\002\000\004" +
    "\021\u0258\001\002\000\006\003\u0254\021\u0253\001\002\000" +
    "\006\003\u0256\100\u0257\001\002\000\004\100\u0255\001\002" +
    "\000\006\003\ufee4\101\ufee4\001\002\000\006\003\ufee3\101" +
    "\ufee3\001\002\000\006\003\ufee7\101\ufee7\001\002\000\004" +
    "\100\u0259\001\002\000\006\003\ufee5\101\ufee5\001\002\000" +
    "\004\021\u025b\001\002\000\004\100\u025c\001\002\000\006" +
    "\003\ufee6\101\ufee6\001\002\000\004\002\001\001\002\000" +
    "\004\122\u0269\001\002\000\006\003\u0260\122\u0261\001\002" +
    "\000\004\004\u0267\001\002\000\006\003\u0262\004\u0263\001" +
    "\002\000\004\100\u0266\001\002\000\006\003\u0265\100\u0264" +
    "\001\002\000\004\002\uff23\001\002\000\004\002\uff1f\001" +
    "\002\000\004\002\uff20\001\002\000\004\100\u0268\001\002" +
    "\000\004\002\uff21\001\002\000\004\004\u026a\001\002\000" +
    "\004\100\u026b\001\002\000\004\002\uff22\001\002\000\004" +
    "\100\u026d\001\002\000\006\003\uff99\101\uff99\001\002\000" +
    "\010\003\uff71\100\uff71\104\uff71\001\002\000\010\003\uff71" +
    "\100\uff71\104\uff71\001\002\000\010\003\077\100\u0271\104" +
    "\102\001\002\000\006\003\uff9d\101\uff9d\001\002\000\010" +
    "\003\077\100\u0273\104\102\001\002\000\006\003\uff9b\101" +
    "\uff9b\001\002\000\010\003\uff71\100\uff71\104\uff71\001\002" +
    "\000\010\003\077\100\u0276\104\102\001\002\000\006\003" +
    "\uff9c\101\uff9c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0274\000\006\005\005\070\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\012\106\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\321\111\320\001\001\000\016\010\027\011\024" +
    "\071\030\072\023\107\026\110\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\303\001\001" +
    "\000\002\001\001\000\016\010\027\011\024\051\056\071" +
    "\030\072\023\110\054\001\001\000\004\142\031\001\001" +
    "\000\002\001\001\000\006\052\035\146\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\100\001\001\000\046\002\131\003\111\004\267\012" +
    "\137\013\121\014\142\015\134\016\145\017\110\020\114" +
    "\021\117\022\105\023\102\024\124\025\106\027\112\047" +
    "\132\143\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\002\131\003\111\004\116\012\137\013\121\014" +
    "\142\015\134\016\145\017\110\020\114\021\117\022\105" +
    "\023\102\024\124\025\106\027\112\047\132\143\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\254\001" +
    "\001\000\004\026\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\u025c\001\001" +
    "\000\004\112\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\330\001\001\000\004\006\326\001\001" +
    "\000\004\046\100\001\001\000\002\001\001\000\004\046" +
    "\100\001\001\000\002\001\001\000\004\006\333\001\001" +
    "\000\004\046\100\001\001\000\002\001\001\000\060\031" +
    "\361\032\347\033\354\034\351\036\350\037\366\040\364" +
    "\041\336\042\343\043\363\044\365\054\341\073\346\074" +
    "\352\075\344\076\362\077\342\100\340\101\356\104\345" +
    "\105\360\113\353\114\357\001\001\000\004\142\u024c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\142\u0233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\u0224" +
    "\001\001\000\004\112\u01f2\001\001\000\004\103\u01ca\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u01bb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\142\u0189\001\001\000\002" +
    "\001\001\000\004\142\u0179\001\001\000\002\001\001\000" +
    "\004\115\u0106\001\001\000\004\063\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\u010a\067\u010c\001" +
    "\001\000\010\116\u0171\117\u0170\145\u0172\001\001\000\002" +
    "\001\001\000\010\124\u015e\125\u015f\145\u0160\001\001\000" +
    "\002\001\001\000\010\120\u0157\121\u0155\145\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\122\u011a\123" +
    "\u011b\145\u011c\001\001\000\010\126\u0110\127\u0112\145\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\126\u0119\145\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\130" +
    "\u012b\131\u012a\132\u0128\133\u0126\134\u0132\135\u0131\136\u0130" +
    "\137\u012f\141\u0125\147\u011f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\130\u012b\131\u012a" +
    "\132\u0128\133\u0126\137\u014e\141\u0125\147\u011f\001\001\000" +
    "\002\001\001\000\026\130\u012b\131\u012a\132\u0128\133\u0126" +
    "\134\u014c\135\u0131\136\u0130\137\u012f\141\u0125\147\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\133\u0137\141\u0125" +
    "\147\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\130\u012b\131\u012a\132\u0128\133\u0126\135\u0134\136\u0130\137" +
    "\u012f\141\u0125\147\u011f\001\001\000\002\001\001\000\022" +
    "\130\u012b\131\u012a\132\u0128\133\u0126\136\u0136\137\u012f\141" +
    "\u0125\147\u011f\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\130\u014b\131\u012a\132\u0128\133\u0126\141\u0125\147" +
    "\u011f\001\001\000\014\131\u014a\132\u0128\133\u0126\141\u0125" +
    "\147\u011f\001\001\000\016\130\u0149\131\u012a\132\u0128\133" +
    "\u0126\141\u0125\147\u011f\001\001\000\014\131\u0144\132\u0128" +
    "\133\u0126\141\u0125\147\u011f\001\001\000\016\130\u0143\131" +
    "\u012a\132\u0128\133\u0126\141\u0125\147\u011f\001\001\000\016" +
    "\130\u0142\131\u012a\132\u0128\133\u0126\141\u0125\147\u011f\001" +
    "\001\000\016\130\u0141\131\u012a\132\u0128\133\u0126\141\u0125" +
    "\147\u011f\001\001\000\016\130\u0140\131\u012a\132\u0128\133" +
    "\u0126\141\u0125\147\u011f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\132\u0148\133\u0126\141\u0125\147\u011f\001\001" +
    "\000\012\132\u0147\133\u0126\141\u0125\147\u011f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\122\u0151\145\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\130" +
    "\u012b\131\u012a\132\u0128\133\u0126\134\u015a\135\u0131\136\u0130" +
    "\137\u012f\141\u0125\147\u011f\001\001\000\002\001\001\000" +
    "\006\120\u015d\145\u0156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\130\u012b\131\u012a\132\u0128" +
    "\133\u0126\134\u0163\135\u0131\136\u0130\137\u012f\141\u0125\147" +
    "\u011f\001\001\000\002\001\001\000\006\124\u0166\145\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\130" +
    "\u012b\131\u012a\132\u0128\133\u0126\134\u0175\135\u0131\136\u0130" +
    "\137\u012f\141\u0125\147\u011f\001\001\000\002\001\001\000" +
    "\006\116\u0178\145\u0172\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\066\u017a\146\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\055\u018c\146\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u01b7\001\001\000\004\006\u01b5\001\001\000\004" +
    "\006\u01b3\001\001\000\002\001\001\000\004\006\u01b0\001" +
    "\001\000\002\001\001\000\004\006\u01ad\001\001\000\004" +
    "\006\u01ab\001\001\000\004\006\u01a9\001\001\000\004\006" +
    "\u01a7\001\001\000\004\006\u01a5\001\001\000\004\046\100" +
    "\001\001\000\002\001\001\000\004\046\100\001\001\000" +
    "\002\001\001\000\004\046\100\001\001\000\002\001\001" +
    "\000\004\046\100\001\001\000\002\001\001\000\004\046" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\100\001\001\000\002\001\001\000\004\046\100" +
    "\001\001\000\002\001\001\000\004\046\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\u01cd\060\u01cc\102" +
    "\u01ce\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\142\u01dd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\061\u01e0\146\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\031\361" +
    "\032\347\033\354\034\351\036\350\037\366\040\364\041" +
    "\336\042\343\043\363\044\365\062\u01f4\073\346\074\352" +
    "\075\344\076\362\077\342\100\340\101\356\104\345\105" +
    "\360\113\353\114\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u021d" +
    "\001\001\000\004\006\u021b\001\001\000\002\001\001\000" +
    "\004\006\u0217\001\001\000\004\006\u0215\001\001\000\002" +
    "\001\001\000\004\006\u0211\001\001\000\004\006\u020e\001" +
    "\001\000\004\006\u020c\001\001\000\004\006\u020a\001\001" +
    "\000\004\006\u0208\001\001\000\004\006\u0206\001\001\000" +
    "\004\046\100\001\001\000\002\001\001\000\004\046\100" +
    "\001\001\000\002\001\001\000\004\046\100\001\001\000" +
    "\002\001\001\000\004\046\100\001\001\000\002\001\001" +
    "\000\004\046\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\100\001\001\000" +
    "\002\001\001\000\004\046\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\100\001" +
    "\001\000\002\001\001\000\004\046\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\065\u0234\146\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u0211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\064\u024f\146\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0271\001\001\000\004\006\u026f\001\001\000\004" +
    "\046\100\001\001\000\002\001\001\000\004\046\100\001" +
    "\001\000\002\001\001\000\004\006\u0274\001\001\000\004" +
    "\046\100\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CaptchaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CaptchaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CaptchaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private Operation op;

	private Symbol cur_token;

	public CaptchaParser(CaptchaLex lex) {
		super(lex);
		this.op = new Operation();
	}

	public void syntax_error(Symbol cur_token) {
		this.cur_token = cur_token;

		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}

	protected int error_sync_size() {
		return 1;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CaptchaParser$actions {
  private final CaptchaParser parser;

  /** Constructor */
  CUP$CaptchaParser$actions(CaptchaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000000(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // c_gcic ::= gcic c_head c_body clgcic 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_gcic",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= c_gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		RESULT = start_val;
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CaptchaParser$parser.done_parsing();
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // c_head ::= head head_opt clhead 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_head",68, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // head_opt ::= head_opt h_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // head_opt ::= h_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // h_opt ::= c_title 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // h_opt ::= c_link 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c_body ::= body body_opt clbody 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_body",71, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body_opt ::= body_opt b_opt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body_opt ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_opt ::= c_h1 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b_opt ::= c_paragraph 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b_opt ::= c_spam 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b_opt ::= c_input 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_opt ::= c_txtarea 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b_opt ::= c_select 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b_opt ::= c_img 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b_opt ::= c_button 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b_opt ::= c_div 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b_opt ::= br 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b_opt ::= c_script 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_script ::= script make_script clscript 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_script",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // make_script ::= make_script scripting 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // make_script ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scripting ::= INT make_int SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scripting ::= STR make_str SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scripting ::= DEC make_dec SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // scripting ::= BOOL make_bool SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scripting ::= CHR make_char SEMI 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // make_int ::= make_int COMMA int_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_int",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // make_int ::= int_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_int",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // int_stat ::= mode ID_V EQUAL a 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("integer: " + p.getValue() + " -> " + n1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("int_stat",76, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // int_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("int_stat",76, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // make_dec ::= make_dec COMMA dec_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_dec",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // make_dec ::= dec_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_dec",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec_stat ::= mode ID_V EQUAL a 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable d1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("decimal: " + p.getValue() + " -> " + d1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("dec_stat",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("dec_stat",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // make_bool ::= make_bool COMMA bool_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_bool",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // make_bool ::= bool_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_bool",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bool_stat ::= mode ID_V EQUAL a 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable s = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("boolean: " + p.getValue() + " -> " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bool_stat",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bool_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bool_stat",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // make_char ::= make_char COMMA char_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_char",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // make_char ::= char_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_char",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // char_stat ::= mode ID_V EQUAL CHAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int chleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token ch = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("char: " + p.getValue() + " -> " + ch); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("char_stat",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // char_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("char_stat",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // make_str ::= make_str COMMA str_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_str",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // make_str ::= str_stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_str",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // str_stat ::= mode ID_V EQUAL a 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable s1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("string: " + p.getValue() + " -> " + s1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str_stat",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // str_stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str_stat",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mode ::= GLOBAL 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = true; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mode ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // a ::= a OR b 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.or(b1, b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // a ::= b 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // b ::= b AND c 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.and(b1, b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // b ::= c 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // c ::= NOT d 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.not(b1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // c ::= d 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // d ::= s SMALLER s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.SMALLER); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // d ::= s GREATER s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.GREATER); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // d ::= s GRTREQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.GREATER_OR_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // d ::= s SMLLREQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.LESS_OR_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // d ::= s EQEQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // d ::= s NEQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.NOT_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // d ::= s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // s ::= s PLUS t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.sum(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // s ::= s MINUS t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.subtraction(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // s ::= t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // t ::= t TIMES u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.multiplication(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // t ::= t DIVIDE u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.division(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // t ::= u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // u ::= MINUS v 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.uminus(n1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // u ::= v 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // v ::= INTEGER 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.INTEGER, n1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // v ::= DECIMAL 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.DECIMAL, n1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // v ::= string 
            {
              Variable RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.STRING, s1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // v ::= CHAR 
            {
              Variable RESULT =null;
		int ch1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int ch1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token ch1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.CHAR, ch1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // v ::= boolean_val 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // v ::= LPAREN a RPAREN 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // string ::= STRING 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // string ::= ID_ 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token b1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, b1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",95, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token b1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, b1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",95, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // c_title ::= title in cltitle 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("Titulo: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_title",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // c_link ::= link cllink 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_link",56, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // c_spam ::= spam in clspam 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						System.out.println("Spam: " + list);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_spam",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // c_h1 ::= h1 in clh1 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						System.out.println("h1: " + list);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_h1",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // c_paragraph ::= paragraph in clparagraph 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("paragraph: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_paragraph",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // c_input ::= input clinput 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_input",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // c_txtarea ::= txtarea cltxtarea 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_txtarea",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // c_button ::= button in clbutton 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("button: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_button",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // c_select ::= select make_option clselect 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_select",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // make_option ::= make_option c_option 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // make_option ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // c_option ::= option in cloption 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("option: " + list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_option",64, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // c_img ::= img climg 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_img",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // c_div ::= div body_opt cldiv 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_div",67, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // in ::= in str 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
					list.add(s);
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // in ::= 
            {
              List<Token> RESULT =null;
		
					List<Token> list = new ArrayList<>();
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // str ::= IN 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // str ::= ID_V 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // gcic ::= SMALLER GCIC params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // gcic ::= error GCIC params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // gcic ::= SMALLER error params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // head ::= SMALLER HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // head ::= error HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // head ::= SMALLER error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // head ::= SMALLER HEAD error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // title ::= SMALLER TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // title ::= error TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // title ::= SMALLER TITLE error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // link ::= SMALLER LINK params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // link ::= error LINK params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // body ::= SMALLER BODY params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // body ::= error BODY params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // body ::= SMALLER error params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // spam ::= SMALLER SPAM params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // spam ::= error SPAM params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // input ::= SMALLER INPUT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",24, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // input ::= error INPUT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",24, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // txtarea ::= SMALLER TXTAREA params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",25, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // txtarea ::= error TXTAREA params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",25, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // select ::= SMALLER SELECT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",26, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // select ::= error SELECT params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",26, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // option ::= SMALLER OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // option ::= error OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // option ::= SMALLER error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // option ::= SMALLER OPTION error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // div ::= SMALLER DIV params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // div ::= error DIV params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // img ::= SMALLER IMG params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",29, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // img ::= error IMG params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",29, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // br ::= SMALLER BR GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // br ::= error BR GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // br ::= SMALLER BR error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // button ::= SMALLER BUTTON params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",31, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // button ::= error BUTTON params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",31, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // h1 ::= SMALLER H1 params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // h1 ::= error H1 params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // h1 ::= SMALLER error params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // paragraph ::= SMALLER PARAGRAPH params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // paragraph ::= error PARAGRAPH params GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // script ::= SMALLER SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",34, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // script ::= error SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",34, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // params ::= params param 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // params ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // param ::= LBRACKET opt RBRACKET 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // param ::= error opt RBRACKET 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // param ::= LBRACKET opt error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // opt ::= id 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // opt ::= name 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // opt ::= href_src 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // opt ::= bckgrnd_clr 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // opt ::= font_size 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // opt ::= font_family 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // opt ::= text_align 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // opt ::= type 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // opt ::= cols_rows 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // opt ::= clss 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // opt ::= width_height 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // opt ::= alt 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // opt ::= onclick 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // opt ::= error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // id ::= ID EQUAL ID_ 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("id: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // id ::= error EQUAL ID_ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // id ::= ID error ID_ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // id ::= ID EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // name ::= NAME EQUAL STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("name = " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // name ::= error EQUAL STRING 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // name ::= NAME error STRING 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // name ::= NAME EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // href_src ::= url EQUAL URL 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println(p + ": " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // href_src ::= error EQUAL URL 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // href_src ::= url error URL 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // href_src ::= url EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // url ::= HREF 
            {
              Object RESULT =null;
		 RESULT = "href"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // url ::= SRC 
            {
              Object RESULT =null;
		 RESULT = "src"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // bckgrnd_clr ::= color EQUAL COLOUR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("Color: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // bckgrnd_clr ::= error EQUAL COLOUR 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // bckgrnd_clr ::= color error COLOUR 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // bckgrnd_clr ::= color EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // color ::= BCKGRND 
            {
              String RESULT =null;
		 RESULT = "background"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // color ::= COLOR 
            {
              String RESULT =null;
		 RESULT = "color"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // font_size ::= FONTS EQUAL PIXEL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("font-size: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // font_size ::= FONTS error PIXEL 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // font_size ::= FONTS EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // font_family ::= FONTF EQUAL FONTF_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("font-family: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // font_family ::= error EQUAL FONTF_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // font_family ::= FONTF error FONTF_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // font_family ::= FONTF EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // text_align ::= ALIGN EQUAL ALIGN_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("align: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // text_align ::= error EQUAL ALIGN_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // text_align ::= ALIGN error ALIGN_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // text_align ::= ALIGN EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // type ::= TYPE EQUAL TYPE_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("type: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // type ::= error EQUAL TYPE_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // type ::= TYPE error TYPE_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // type ::= TYPE EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // cols_rows ::= cls_rws EQUAL INTQ 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println(p + ": " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // cols_rows ::= error EQUAL INTQ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // cols_rows ::= cls_rws error INTQ 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // cols_rows ::= cls_rws EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // cls_rws ::= COLS 
            {
              Object RESULT =null;
		 RESULT = "cols"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // cls_rws ::= ROWS 
            {
              Object RESULT =null;
		 RESULT = "rows"; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // clss ::= CLASS EQUAL CLASS_VALUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("class: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // clss ::= error EQUAL CLASS_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // clss ::= CLASS error CLASS_VALUE 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // clss ::= CLASS EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // width_height ::= w_h EQUAL pxl_per 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("width/height: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // width_height ::= error EQUAL pxl_per 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // width_height ::= w_h error pxl_per 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // width_height ::= w_h EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // w_h ::= WIDTH 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // w_h ::= HEIGHT 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // pxl_per ::= PIXEL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // pxl_per ::= PERCNTG 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // alt ::= ALT EQUAL STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("alt: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // alt ::= ALT error STRING 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // alt ::= ALT EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // onclick ::= CLICK EQUAL ONCLICK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println("onclick: " + s); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // onclick ::= error EQUAL ONCLICK 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // onclick ::= CLICK error ONCLICK 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // onclick ::= CLICK EQUAL error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // clgcic ::= SMALLER DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // clgcic ::= error DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // clgcic ::= SMALLER error GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // clgcic ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // clgcic ::= SMALLER DIVIDE GCIC error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // clhead ::= SMALLER DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // clhead ::= error DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // clhead ::= SMALLER error HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // clhead ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // clhead ::= SMALLER DIVIDE HEAD error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // cltitle ::= SMALLER DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // cltitle ::= error DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // cltitle ::= SMALLER error TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // cltitle ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // cltitle ::= SMALLER DIVIDE TITLE error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // cllink ::= SMALLER DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // cllink ::= error DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // cllink ::= SMALLER error LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // cllink ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // cllink ::= SMALLER DIVIDE LINK error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // clbody ::= SMALLER DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // clbody ::= error DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // clbody ::= SMALLER error BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // clbody ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // clbody ::= SMALLER DIVIDE BODY error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // clspam ::= SMALLER DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // clspam ::= error DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // clspam ::= SMALLER error SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // clspam ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // clspam ::= SMALLER DIVIDE SPAM error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // clinput ::= SMALLER DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // clinput ::= error DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // clinput ::= SMALLER error INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // clinput ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // clinput ::= SMALLER DIVIDE INPUT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // cltxtarea ::= SMALLER DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // cltxtarea ::= error DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // cltxtarea ::= SMALLER error TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // cltxtarea ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // cltxtarea ::= SMALLER DIVIDE TXTAREA error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // clselect ::= SMALLER DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // clselect ::= error DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // clselect ::= SMALLER error SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // clselect ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // clselect ::= SMALLER DIVIDE SELECT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // cloption ::= SMALLER DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // cloption ::= error DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // cloption ::= SMALLER error OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // cloption ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // cloption ::= SMALLER DIVIDE OPTION error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // cldiv ::= SMALLER DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // cldiv ::= error DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // cldiv ::= SMALLER error DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // cldiv ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // cldiv ::= SMALLER DIVIDE DIV error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // climg ::= SMALLER DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // climg ::= error DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // climg ::= SMALLER error IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // climg ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // climg ::= SMALLER DIVIDE IMG error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // clbutton ::= SMALLER DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // clbutton ::= error DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // clbutton ::= SMALLER error BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // clbutton ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // clbutton ::= SMALLER DIVIDE BUTTON error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // clh1 ::= SMALLER DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // clh1 ::= error DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // clh1 ::= SMALLER error H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // clh1 ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // clh1 ::= SMALLER DIVIDE H1 error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // clparagraph ::= SMALLER DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // clparagraph ::= error DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // clparagraph ::= SMALLER error PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // clparagraph ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // clparagraph ::= SMALLER DIVIDE PARAGRAPH error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // clscript ::= SMALLER DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // clscript ::= error DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // clscript ::= SMALLER error SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000001(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // clscript ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // clscript ::= SMALLER DIVIDE SCRIPT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CaptchaParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CaptchaParser$do_action_part00000000(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CaptchaParser$do_action_part00000001(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
