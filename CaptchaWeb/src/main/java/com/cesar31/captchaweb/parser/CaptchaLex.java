// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: captcha.flex

package com.cesar31.captchaweb.parser;

import static com.cesar31.captchaweb.parser.CaptchaParserSym.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CaptchaLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\0\1\13"+
    "\1\14\1\15\1\16\1\0\1\17\1\20\1\21\1\22"+
    "\1\23\10\24\1\25\1\26\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\44\1\53\1\54\1\55\1\56\1\57\1\44"+
    "\1\60\1\61\1\44\1\62\1\63\1\64\1\0\1\65"+
    "\1\0\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\7\0\1\3"+
    "\32\0\1\3\11\0\1\44\12\0\1\44\4\0\1\44"+
    "\5\0\27\44\1\0\37\44\1\0\u01ca\44\4\0\14\44"+
    "\16\0\5\44\7\0\1\44\1\0\1\44\21\0\165\44"+
    "\1\0\2\44\2\0\4\44\1\0\1\44\6\0\1\44"+
    "\1\0\3\44\1\0\1\44\1\0\24\44\1\0\123\44"+
    "\1\0\213\44\1\0\255\44\1\0\46\44\2\0\1\44"+
    "\6\0\51\44\10\0\55\44\1\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\0\1\44\10\0\33\44\4\0\4\44"+
    "\35\0\13\44\5\0\100\44\12\123\4\0\146\44\1\0"+
    "\10\44\2\0\12\44\1\0\6\44\12\123\3\44\2\0"+
    "\1\44\20\0\73\44\2\0\145\44\16\0\12\123\54\44"+
    "\4\0\1\44\2\0\1\44\2\0\56\44\22\0\34\44"+
    "\4\0\13\44\65\0\25\44\1\0\10\44\25\0\17\44"+
    "\1\0\201\44\2\0\12\123\1\0\23\44\1\0\10\44"+
    "\2\0\2\44\2\0\26\44\1\0\7\44\1\0\1\44"+
    "\3\0\4\44\2\0\11\44\2\0\2\44\2\0\4\44"+
    "\10\0\1\44\4\0\2\44\1\0\5\44\2\0\12\123"+
    "\2\44\12\0\1\44\1\0\1\44\2\0\3\44\1\0"+
    "\6\44\4\0\2\44\2\0\26\44\1\0\7\44\1\0"+
    "\2\44\1\0\2\44\1\0\2\44\2\0\1\44\1\0"+
    "\5\44\4\0\2\44\2\0\3\44\3\0\1\44\7\0"+
    "\4\44\1\0\1\44\7\0\12\123\6\44\13\0\3\44"+
    "\1\0\11\44\1\0\3\44\1\0\26\44\1\0\7\44"+
    "\1\0\2\44\1\0\5\44\2\0\12\44\1\0\3\44"+
    "\1\0\3\44\2\0\1\44\17\0\4\44\2\0\12\123"+
    "\11\0\7\44\1\0\3\44\1\0\10\44\2\0\2\44"+
    "\2\0\26\44\1\0\7\44\1\0\2\44\1\0\5\44"+
    "\2\0\11\44\2\0\2\44\2\0\3\44\10\0\2\44"+
    "\4\0\2\44\1\0\5\44\2\0\12\123\1\0\1\44"+
    "\20\0\2\44\1\0\6\44\3\0\3\44\1\0\4\44"+
    "\3\0\2\44\1\0\1\44\1\0\2\44\3\0\2\44"+
    "\3\0\3\44\3\0\14\44\4\0\5\44\3\0\3\44"+
    "\1\0\4\44\2\0\1\44\6\0\1\44\16\0\12\123"+
    "\20\0\15\44\1\0\3\44\1\0\27\44\1\0\20\44"+
    "\3\0\10\44\1\0\3\44\1\0\4\44\7\0\2\44"+
    "\1\0\3\44\5\0\4\44\2\0\12\123\20\0\4\44"+
    "\1\0\10\44\1\0\3\44\1\0\27\44\1\0\12\44"+
    "\1\0\5\44\2\0\11\44\1\0\3\44\1\0\4\44"+
    "\7\0\2\44\7\0\1\44\1\0\4\44\2\0\12\123"+
    "\1\0\2\44\15\0\4\44\1\0\10\44\1\0\3\44"+
    "\1\0\63\44\1\0\3\44\1\0\5\44\5\0\4\44"+
    "\7\0\5\44\2\0\12\123\12\0\6\44\2\0\2\44"+
    "\1\0\22\44\3\0\30\44\1\0\11\44\1\0\1\44"+
    "\2\0\7\44\3\0\1\44\4\0\6\44\1\0\1\44"+
    "\1\0\10\44\6\0\12\123\2\0\2\44\15\0\72\44"+
    "\5\0\17\44\1\0\12\123\47\0\2\44\1\0\1\44"+
    "\1\0\5\44\1\0\30\44\1\0\1\44\1\0\27\44"+
    "\2\0\5\44\1\0\1\44\1\0\6\44\2\0\12\123"+
    "\2\0\4\44\40\0\1\44\27\0\2\44\6\0\12\123"+
    "\13\0\1\44\1\0\1\44\1\0\1\44\4\0\12\44"+
    "\1\0\44\44\4\0\24\44\1\0\22\44\1\0\44\44"+
    "\11\0\1\44\71\0\100\44\12\123\6\0\100\44\12\123"+
    "\4\44\2\0\46\44\1\0\1\44\5\0\1\44\2\0"+
    "\53\44\1\0\115\44\1\0\4\44\2\0\7\44\1\0"+
    "\1\44\1\0\4\44\2\0\51\44\1\0\4\44\2\0"+
    "\41\44\1\0\4\44\2\0\7\44\1\0\1\44\1\0"+
    "\4\44\2\0\17\44\1\0\71\44\1\0\4\44\2\0"+
    "\103\44\2\0\3\44\40\0\20\44\20\0\126\44\2\0"+
    "\6\44\3\0\u016c\44\2\0\21\44\1\3\32\44\5\0"+
    "\113\44\3\0\13\44\7\0\15\44\1\0\7\44\13\0"+
    "\25\44\13\0\24\44\14\0\15\44\1\0\3\44\1\0"+
    "\2\44\14\0\124\44\3\0\1\44\4\0\2\44\2\0"+
    "\12\123\41\0\3\44\2\0\12\123\6\0\131\44\7\0"+
    "\53\44\5\0\106\44\12\0\37\44\1\0\14\44\4\0"+
    "\14\44\12\0\12\123\36\44\2\0\5\44\13\0\54\44"+
    "\4\0\32\44\6\0\12\123\46\0\34\44\4\0\77\44"+
    "\1\0\35\44\2\0\1\44\12\123\6\0\12\123\15\0"+
    "\1\44\10\0\17\44\101\0\114\44\4\0\12\123\21\0"+
    "\11\44\14\0\60\44\12\123\72\44\14\0\70\44\10\0"+
    "\12\123\3\0\3\44\12\123\44\44\2\0\11\44\7\0"+
    "\53\44\2\0\3\44\20\0\3\44\1\0\47\44\5\0"+
    "\372\44\1\0\33\44\2\0\6\44\2\0\46\44\2\0"+
    "\6\44\2\0\10\44\1\0\1\44\1\0\1\44\1\0"+
    "\1\44\1\0\37\44\2\0\65\44\1\0\7\44\1\0"+
    "\1\44\3\0\3\44\1\0\7\44\3\0\4\44\2\0"+
    "\6\44\4\0\15\44\5\0\3\44\1\0\7\44\3\0"+
    "\13\3\35\0\2\3\5\0\1\3\17\0\2\44\23\0"+
    "\1\44\12\0\1\3\21\0\1\44\15\0\1\44\20\0"+
    "\15\44\63\0\41\44\21\0\1\44\4\0\1\44\2\0"+
    "\12\44\1\0\1\44\3\0\5\44\6\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\4\44\1\0\13\44\2\0"+
    "\4\44\5\0\5\44\4\0\1\44\21\0\51\44\u022d\0"+
    "\64\44\26\0\57\44\1\0\57\44\1\0\205\44\6\0"+
    "\11\44\14\0\46\44\1\0\1\44\5\0\1\44\2\0"+
    "\70\44\7\0\1\44\17\0\30\44\11\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\7\44\1\0"+
    "\7\44\1\0\7\44\1\0\7\44\1\0\40\44\57\0"+
    "\1\44\320\0\1\3\4\0\3\44\31\0\17\44\1\0"+
    "\5\44\2\0\5\44\4\0\126\44\2\0\2\44\2\0"+
    "\3\44\1\0\132\44\1\0\4\44\5\0\53\44\1\0"+
    "\136\44\21\0\33\44\65\0\306\44\112\0\360\44\20\0"+
    "\215\44\103\0\56\44\2\0\15\44\3\0\20\44\12\123"+
    "\2\44\24\0\63\44\1\0\12\44\1\0\163\44\45\0"+
    "\11\44\2\0\147\44\2\0\65\44\2\0\5\44\60\0"+
    "\61\44\30\0\64\44\14\0\106\44\12\0\12\123\6\0"+
    "\30\44\3\0\1\44\1\0\3\44\12\123\44\44\2\0"+
    "\44\44\14\0\35\44\3\0\101\44\16\0\1\44\12\123"+
    "\6\0\20\44\12\123\5\44\1\0\67\44\11\0\16\44"+
    "\2\0\12\123\6\0\27\44\3\0\111\44\30\0\3\44"+
    "\2\0\20\44\2\0\5\44\12\0\6\44\2\0\6\44"+
    "\2\0\6\44\11\0\7\44\1\0\7\44\1\0\53\44"+
    "\1\0\14\44\10\0\173\44\1\0\2\44\2\0\12\123"+
    "\6\0\244\44\14\0\27\44\4\0\61\44\4\0\156\44"+
    "\2\0\152\44\46\0\7\44\14\0\5\44\5\0\14\44"+
    "\1\0\15\44\1\0\5\44\1\0\1\44\1\0\2\44"+
    "\1\0\2\44\1\0\154\44\41\0\153\44\22\0\100\44"+
    "\2\0\66\44\50\0\14\44\4\0\20\44\20\0\20\44"+
    "\3\0\2\44\30\0\3\44\40\0\5\44\1\0\207\44"+
    "\23\0\12\123\7\0\32\44\4\0\1\44\1\0\32\44"+
    "\13\0\131\44\3\0\6\44\2\0\6\44\2\0\6\44"+
    "\2\0\3\44\43\0\14\44\1\0\32\44\1\0\23\44"+
    "\1\0\2\44\1\0\17\44\2\0\16\44\42\0\173\44"+
    "\105\0\65\44\210\0\1\44\202\0\35\44\3\0\61\44"+
    "\17\0\1\44\37\0\40\44\15\0\36\44\5\0\53\44"+
    "\5\0\36\44\2\0\44\44\4\0\10\44\1\0\5\44"+
    "\52\0\236\44\2\0\12\123\6\0\44\44\4\0\44\44"+
    "\4\0\50\44\10\0\64\44\234\0\67\44\11\0\26\44"+
    "\12\0\10\44\230\0\6\44\2\0\1\44\1\0\54\44"+
    "\1\0\2\44\3\0\1\44\2\0\27\44\12\0\27\44"+
    "\11\0\37\44\101\0\23\44\1\0\2\44\12\0\26\44"+
    "\12\0\32\44\106\0\70\44\6\0\2\44\100\0\4\44"+
    "\1\0\2\44\5\0\10\44\1\0\3\44\1\0\35\44"+
    "\2\0\3\44\4\0\1\44\40\0\35\44\3\0\35\44"+
    "\43\0\10\44\1\0\36\44\31\0\66\44\12\0\26\44"+
    "\12\0\23\44\15\0\22\44\156\0\111\44\67\0\63\44"+
    "\15\0\63\44\15\0\50\44\10\0\12\123\306\0\35\44"+
    "\12\0\1\44\10\0\41\44\217\0\27\44\11\0\107\44"+
    "\37\0\12\123\17\0\74\44\25\0\31\44\7\0\12\123"+
    "\6\0\65\44\1\0\12\123\4\0\3\44\11\0\44\44"+
    "\2\0\1\44\11\0\105\44\4\0\4\44\3\0\12\123"+
    "\1\44\1\0\1\44\43\0\22\44\1\0\45\44\6\0"+
    "\1\44\101\0\7\44\1\0\1\44\1\0\4\44\1\0"+
    "\17\44\1\0\12\44\7\0\73\44\5\0\12\123\6\0"+
    "\4\44\1\0\10\44\2\0\2\44\2\0\26\44\1\0"+
    "\7\44\1\0\2\44\1\0\5\44\1\0\12\44\2\0"+
    "\2\44\2\0\3\44\2\0\1\44\6\0\1\44\5\0"+
    "\7\44\2\0\7\44\3\0\5\44\213\0\113\44\5\0"+
    "\12\123\4\0\2\44\40\0\106\44\1\0\1\44\10\0"+
    "\12\123\246\0\66\44\2\0\11\44\27\0\6\44\42\0"+
    "\101\44\3\0\1\44\13\0\12\123\46\0\71\44\7\0"+
    "\12\123\66\0\33\44\2\0\17\44\4\0\12\123\306\0"+
    "\73\44\145\0\100\44\12\123\25\0\1\44\240\0\10\44"+
    "\2\0\56\44\2\0\10\44\1\0\2\44\33\0\77\44"+
    "\10\0\1\44\10\0\112\44\3\0\1\44\42\0\71\44"+
    "\7\0\11\44\1\0\55\44\1\0\11\44\17\0\12\123"+
    "\30\0\36\44\2\0\26\44\1\0\16\44\111\0\7\44"+
    "\1\0\2\44\1\0\54\44\3\0\1\44\1\0\2\44"+
    "\1\0\11\44\10\0\12\123\6\0\6\44\1\0\2\44"+
    "\1\0\45\44\1\0\2\44\1\0\6\44\7\0\12\123"+
    "\u0136\0\27\44\11\0\232\44\146\0\157\44\21\0\304\44"+
    "\274\0\57\44\321\0\107\44\271\0\71\44\7\0\37\44"+
    "\1\0\12\123\146\0\36\44\2\0\5\44\13\0\67\44"+
    "\11\0\4\44\14\0\12\123\11\0\25\44\5\0\23\44"+
    "\260\0\100\44\200\0\113\44\4\0\71\44\7\0\21\44"+
    "\100\0\2\44\1\0\1\44\34\0\370\44\10\0\363\44"+
    "\15\0\37\44\61\0\3\44\21\0\4\44\10\0\u018c\44"+
    "\4\0\153\44\5\0\15\44\3\0\11\44\7\0\12\44"+
    "\3\0\2\44\306\0\5\44\3\0\6\44\10\0\10\44"+
    "\2\0\7\44\36\0\4\44\224\0\3\44\273\0\125\44"+
    "\1\0\107\44\1\0\2\44\2\0\1\44\2\0\2\44"+
    "\2\0\4\44\1\0\14\44\1\0\1\44\1\0\7\44"+
    "\1\0\101\44\1\0\4\44\2\0\10\44\1\0\7\44"+
    "\1\0\34\44\1\0\4\44\1\0\5\44\1\0\1\44"+
    "\3\0\7\44\1\0\u0154\44\2\0\31\44\1\0\31\44"+
    "\1\0\37\44\1\0\31\44\1\0\37\44\1\0\31\44"+
    "\1\0\37\44\1\0\31\44\1\0\37\44\1\0\31\44"+
    "\1\0\10\44\2\0\62\123\67\44\4\0\62\44\10\0"+
    "\1\44\16\0\1\44\26\0\5\44\1\0\17\44\120\0"+
    "\7\44\1\0\21\44\2\0\7\44\1\0\2\44\1\0"+
    "\5\44\325\0\55\44\3\0\16\44\2\0\12\123\4\0"+
    "\1\44\u0171\0\60\44\12\123\6\0\305\44\13\0\7\44"+
    "\51\0\114\44\4\0\12\123\246\0\4\44\1\0\33\44"+
    "\1\0\2\44\1\0\1\44\2\0\1\44\1\0\12\44"+
    "\1\0\4\44\1\0\1\44\1\0\1\44\6\0\1\44"+
    "\4\0\1\44\1\0\1\44\1\0\1\44\1\0\3\44"+
    "\1\0\2\44\1\0\1\44\2\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\1\44\1\0\2\44"+
    "\1\0\1\44\2\0\4\44\1\0\7\44\1\0\4\44"+
    "\1\0\4\44\1\0\1\44\1\0\12\44\1\0\21\44"+
    "\5\0\3\44\1\0\5\44\1\0\21\44\164\0\32\44"+
    "\6\0\32\44\6\0\32\44\166\0\327\44\51\0\65\44"+
    "\13\0\336\44\2\0\u0182\44\16\0\u0131\44\37\0\36\44"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\10\1\1\20\1\21\15\1\1\22\1\1\1\23"+
    "\1\2\1\24\32\0\1\25\2\0\1\26\1\27\1\30"+
    "\25\0\1\31\12\0\1\32\1\33\1\0\1\34\1\35"+
    "\37\0\1\36\3\0\1\37\10\0\1\40\7\0\1\41"+
    "\16\0\1\42\6\0\1\43\43\0\1\44\3\0\1\45"+
    "\12\0\1\46\1\47\6\0\1\50\2\0\1\51\4\0"+
    "\1\52\1\0\1\53\1\0\1\54\2\0\1\55\1\56"+
    "\2\0\1\57\7\0\1\60\11\0\1\61\12\0\1\62"+
    "\2\0\1\63\16\0\1\64\1\65\1\0\1\66\6\0"+
    "\1\67\13\0\1\70\3\0\1\71\5\0\1\72\1\0"+
    "\1\73\1\74\1\0\1\75\2\0\1\76\14\0\1\77"+
    "\2\0\1\100\2\0\1\101\5\0\1\2\1\102\3\0"+
    "\1\103\4\0\1\104\3\0\1\105\1\0\1\106\1\107"+
    "\2\0\1\110\1\111\7\0\1\112\1\113\1\114\24\0"+
    "\1\115\3\0\1\116\2\0\1\117\1\0\1\120\1\0"+
    "\1\121\1\0\1\122\2\0\1\123\2\0\1\124\2\0"+
    "\1\125\1\0\1\33\2\0\1\126\1\127\4\0\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\124\0\250\0\374\0\u0150\0\u01a4\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\u01f8\0\u024c\0\124"+
    "\0\124\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u03f0\0\u0444\0\u0498"+
    "\0\u04ec\0\u0540\0\u0594\0\u05e8\0\124\0\124\0\u063c\0\u0690"+
    "\0\u06e4\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930"+
    "\0\u0984\0\u09d8\0\u0a2c\0\124\0\u0a80\0\124\0\u0ad4\0\124"+
    "\0\u0b28\0\u0b7c\0\u0bd0\0\u0c24\0\u0c78\0\u0ccc\0\u0d20\0\u0d74"+
    "\0\u0dc8\0\u0e1c\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014"+
    "\0\u1068\0\u10bc\0\u1110\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4"+
    "\0\u1308\0\u135c\0\124\0\u13b0\0\u1404\0\124\0\124\0\124"+
    "\0\u1458\0\u14ac\0\u1500\0\u1554\0\u15a8\0\u15fc\0\u1650\0\u16a4"+
    "\0\u16f8\0\u174c\0\u17a0\0\u17f4\0\u1848\0\u189c\0\u18f0\0\u1944"+
    "\0\u1998\0\u19ec\0\u1a40\0\u1a94\0\u1ae8\0\124\0\u1b3c\0\u1b90"+
    "\0\u1be4\0\u1c38\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc\0\u1e30"+
    "\0\124\0\124\0\u1e84\0\124\0\124\0\u1ed8\0\u1f2c\0\u1f80"+
    "\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124\0\u2178\0\u21cc\0\u2220"+
    "\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4\0\u2418\0\u246c\0\u24c0"+
    "\0\u2514\0\u2568\0\u25bc\0\u2610\0\u2664\0\u26b8\0\u270c\0\u2760"+
    "\0\u27b4\0\u2808\0\u285c\0\u28b0\0\u13b0\0\u2904\0\u2958\0\u29ac"+
    "\0\124\0\u2a00\0\u2a54\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4\0\u2bf8"+
    "\0\u2c4c\0\124\0\u2ca0\0\u2cf4\0\u2d48\0\u2d9c\0\u2df0\0\u2e44"+
    "\0\u2e98\0\124\0\u2eec\0\u2f40\0\u2f94\0\u2fe8\0\u303c\0\u3090"+
    "\0\u30e4\0\u3138\0\u318c\0\u31e0\0\u3234\0\u3288\0\u32dc\0\u3330"+
    "\0\124\0\u3384\0\u33d8\0\u342c\0\u3480\0\u34d4\0\u3528\0\124"+
    "\0\u357c\0\u35d0\0\u3624\0\u3678\0\u36cc\0\u3720\0\u3774\0\u37c8"+
    "\0\u381c\0\u3870\0\u38c4\0\u3918\0\u396c\0\u39c0\0\u3a14\0\u3a68"+
    "\0\u3abc\0\u3b10\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60\0\u3cb4\0\u3d08"+
    "\0\u3d5c\0\u3db0\0\u3e04\0\u3e58\0\u3eac\0\u3f00\0\u3f54\0\u3fa8"+
    "\0\u3ffc\0\u4050\0\u40a4\0\124\0\u40f8\0\u414c\0\u41a0\0\124"+
    "\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\u4398\0\u43ec\0\u4440"+
    "\0\u4494\0\u44e8\0\124\0\124\0\u453c\0\u4590\0\u45e4\0\u4638"+
    "\0\u468c\0\u46e0\0\124\0\u4734\0\u4788\0\124\0\u47dc\0\u4830"+
    "\0\u4884\0\u48d8\0\124\0\u492c\0\124\0\u4980\0\124\0\u49d4"+
    "\0\u4a28\0\124\0\124\0\u4a7c\0\u4ad0\0\124\0\u4b24\0\u4b78"+
    "\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c\0\124\0\u4d70\0\u4dc4"+
    "\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc\0\u5010\0\124"+
    "\0\u5064\0\u50b8\0\u510c\0\u5160\0\u51b4\0\u5208\0\u525c\0\u52b0"+
    "\0\u5304\0\u5358\0\124\0\u53ac\0\u5400\0\124\0\u5454\0\u54a8"+
    "\0\u54fc\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4\0\u5748"+
    "\0\u579c\0\u57f0\0\u5844\0\u5898\0\124\0\124\0\u58ec\0\124"+
    "\0\u5940\0\u5994\0\u59e8\0\u5a3c\0\u5a90\0\u5ae4\0\124\0\u5b38"+
    "\0\u5b8c\0\u5be0\0\u5c34\0\u5c88\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8"+
    "\0\u5e2c\0\u5e80\0\124\0\u5ed4\0\u5f28\0\u5f7c\0\124\0\u5fd0"+
    "\0\u6024\0\u6078\0\u60cc\0\u6120\0\124\0\u6174\0\124\0\124"+
    "\0\u61c8\0\124\0\u621c\0\u6270\0\124\0\u62c4\0\u6318\0\u636c"+
    "\0\u63c0\0\u6414\0\u6468\0\u64bc\0\u6510\0\u6564\0\u65b8\0\u660c"+
    "\0\u6660\0\124\0\u66b4\0\u6708\0\124\0\u675c\0\u67b0\0\124"+
    "\0\u6804\0\u6858\0\u68ac\0\u6900\0\u6954\0\u3f54\0\124\0\u69a8"+
    "\0\u69fc\0\u6a50\0\124\0\u6aa4\0\u6af8\0\u6b4c\0\u6ba0\0\124"+
    "\0\u6bf4\0\u6c48\0\u6c9c\0\124\0\u6cf0\0\124\0\124\0\u6d44"+
    "\0\u6d98\0\124\0\124\0\u6dec\0\u6e40\0\u6e94\0\u6ee8\0\u6f3c"+
    "\0\u6f90\0\u6fe4\0\124\0\124\0\124\0\u7038\0\u708c\0\u70e0"+
    "\0\u7134\0\u7188\0\u71dc\0\u7230\0\u7284\0\u72d8\0\u732c\0\u7380"+
    "\0\u73d4\0\u7428\0\u747c\0\u74d0\0\u7524\0\u7578\0\u75cc\0\u7620"+
    "\0\u7674\0\124\0\u76c8\0\u771c\0\u7770\0\124\0\u77c4\0\u7818"+
    "\0\124\0\u786c\0\124\0\u78c0\0\124\0\u7914\0\124\0\u7968"+
    "\0\u79bc\0\124\0\u7a10\0\u7a64\0\124\0\u7ab8\0\u7b0c\0\124"+
    "\0\u7b60\0\u7bb4\0\u7bb4\0\u7c08\0\124\0\u7bb4\0\u7c5c\0\u7cb0"+
    "\0\u7d04\0\u7d58\0\124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\3\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\2\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\2\1\27\1\30\1\31\6\2\1\32\1\2\1\33"+
    "\2\2\1\34\6\2\1\35\1\2\1\36\1\2\1\37"+
    "\1\40\1\41\1\42\1\2\1\43\1\2\1\44\1\45"+
    "\4\2\1\46\1\47\2\2\1\50\1\51\1\52\2\2"+
    "\1\53\3\2\1\54\1\55\1\56\1\2\126\0\1\3"+
    "\126\0\1\57\22\0\1\60\73\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\0\1\62\1\63\6\61\1\63\2\61"+
    "\1\64\2\65\6\61\1\66\1\63\1\67\3\63\1\70"+
    "\15\63\1\71\2\63\1\61\1\0\1\61\1\63\1\72"+
    "\1\73\1\74\2\63\1\75\1\76\1\77\1\63\1\100"+
    "\1\63\1\101\1\102\1\103\1\104\1\105\1\63\1\106"+
    "\1\107\1\110\2\63\1\111\1\63\1\112\1\63\3\61"+
    "\1\63\12\0\1\113\131\0\1\114\123\0\1\114\1\0"+
    "\3\17\104\0\1\115\22\0\1\116\123\0\1\117\123\0"+
    "\1\120\167\0\1\121\75\0\1\122\5\0\1\123\102\0"+
    "\1\124\31\0\1\125\75\0\1\126\144\0\1\127\102\0"+
    "\1\130\142\0\1\131\104\0\1\132\165\0\1\133\110\0"+
    "\1\134\15\0\1\135\104\0\1\125\7\0\1\136\3\0"+
    "\1\137\2\0\1\140\111\0\1\141\117\0\1\142\15\0"+
    "\1\143\111\0\1\144\14\0\1\145\105\0\1\146\11\0"+
    "\1\147\106\0\1\150\140\0\1\151\124\0\1\152\126\0"+
    "\1\153\1\0\1\154\104\0\1\155\14\0\1\156\6\0"+
    "\1\157\103\0\1\160\146\0\1\161\2\0\2\57\1\3"+
    "\1\57\1\4\117\57\2\61\1\0\1\61\1\0\1\61"+
    "\1\162\54\61\1\0\42\61\1\0\1\61\1\0\1\61"+
    "\1\162\13\61\3\163\6\61\6\163\22\61\1\0\2\61"+
    "\6\163\32\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\33\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\165\1\61\1\63\1\166\5\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\20\63"+
    "\1\167\12\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\165\1\61\1\63\1\166\5\61\1\63\2\61"+
    "\3\65\6\61\27\63\1\61\1\0\1\61\20\63\1\167"+
    "\12\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\22\63\1\170\10\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\17\63\1\171\13\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\5\63\1\172\25\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\5\63\1\173"+
    "\25\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\21\63\1\174\11\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\14\63\1\175\16\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\5\63\1\176\2\63\1\177\6\63\1\200\13\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\25\63\1\201\5\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\22\63\1\202\10\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\24\63\1\203"+
    "\6\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\25\63\1\204\5\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\5\63\1\205\3\63\1\206\21\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\1\63\1\207\31\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\1\63\1\210\23\63\1\211\5\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\14\63\1\212\16\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\25\63\1\213"+
    "\5\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\1\63\1\214\3\63\1\215"+
    "\3\63\1\216\5\63\1\217\13\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\1\63\1\220\7\63\1\221\21\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\5\63\1\222\25\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\10\63\1\223"+
    "\22\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\5\63\1\224\25\63\3\61"+
    "\1\63\22\0\3\225\76\0\1\225\17\0\1\226\205\0"+
    "\1\227\61\0\1\230\121\0\1\231\141\0\1\232\104\0"+
    "\1\233\1\0\1\234\2\0\1\235\1\236\1\237\2\0"+
    "\1\240\2\0\1\241\1\242\1\0\1\243\1\244\11\0"+
    "\1\233\1\0\1\234\2\0\1\235\1\236\1\237\2\0"+
    "\1\240\2\0\1\241\1\242\2\0\1\243\1\244\66\0"+
    "\1\245\112\0\1\246\135\0\1\247\115\0\1\250\133\0"+
    "\1\251\155\0\1\252\102\0\1\253\137\0\1\254\105\0"+
    "\1\255\123\0\1\256\136\0\1\257\112\0\1\260\134\0"+
    "\1\261\125\0\1\262\116\0\1\263\117\0\1\264\142\0"+
    "\1\265\114\0\1\266\111\0\1\267\147\0\1\270\77\0"+
    "\1\271\142\0\1\272\131\0\1\273\120\0\1\274\116\0"+
    "\1\275\107\0\1\276\32\0\2\61\1\0\1\61\1\0"+
    "\1\61\1\162\13\61\3\277\6\61\6\277\22\61\1\0"+
    "\2\61\6\277\32\61\1\0\1\61\1\0\1\61\1\300"+
    "\54\61\1\0\42\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\30\63\1\301\2\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\11\63\1\302\21\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\25\63"+
    "\1\303\5\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\16\63\1\304\14\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\22\63\1\305\10\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\25\63\1\306\5\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\1\63"+
    "\1\307\23\63\1\310\5\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\16\63"+
    "\1\311\14\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\5\63\1\312\25\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\14\63\1\313\16\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\3\63\1\314\27\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\1\63"+
    "\1\315\3\63\1\316\25\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\24\63"+
    "\1\317\6\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\23\63\1\320\7\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\6\63\1\321\24\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\15\63\1\310\15\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\22\63"+
    "\1\322\10\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\26\63\1\315\4\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\15\63\1\323\15\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\11\63\1\324\21\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\22\63"+
    "\1\325\10\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\4\63\1\326\26\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\4\63\1\327\26\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\7\63\1\330\23\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\27\63"+
    "\1\313\3\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\16\63\1\331\14\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\14\63\1\332\16\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\1\63\1\333\26\63\1\334\2\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\11\63\1\335\21\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\14\63"+
    "\1\336\16\63\3\61\1\63\17\0\1\337\210\0\1\340"+
    "\72\0\1\341\103\0\1\342\141\0\1\343\1\0\1\344"+
    "\2\0\1\345\25\0\1\343\2\0\1\344\2\0\1\345"+
    "\54\0\1\346\32\0\1\346\62\0\1\347\32\0\1\347"+
    "\56\0\1\350\13\0\1\351\32\0\1\351\100\0\1\352"+
    "\1\353\31\0\1\352\1\353\63\0\1\354\32\0\1\354"+
    "\77\0\1\355\32\0\1\355\55\0\1\356\12\0\1\357"+
    "\1\360\16\0\1\356\12\0\1\357\1\0\1\360\53\0"+
    "\1\361\3\0\1\362\26\0\1\361\3\0\1\362\62\0"+
    "\1\363\143\0\1\364\111\0\1\365\6\0\1\366\136\0"+
    "\1\367\75\0\1\370\164\0\1\371\124\0\1\372\131\0"+
    "\1\373\124\0\1\374\117\0\1\375\3\0\1\376\111\0"+
    "\1\377\135\0\1\u0100\124\0\1\u0101\106\0\1\u0102\122\0"+
    "\1\u0103\122\0\1\u0104\123\0\1\u0105\132\0\1\u0106\132\0"+
    "\1\u0107\111\0\1\u0108\136\0\1\u0109\104\0\1\u010a\123\0"+
    "\1\u010b\142\0\1\u010c\12\0\2\61\1\0\1\61\1\0"+
    "\1\61\1\162\13\61\3\u010d\6\61\6\u010d\22\61\1\0"+
    "\2\61\6\u010d\32\61\1\0\1\61\1\0\1\61\1\u010e"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\33\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\1\63"+
    "\1\u010f\31\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\22\63\1\u0110\10\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\5\63\1\u0111\25\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\4\63\1\u0112\26\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\1\63"+
    "\1\327\31\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\3\63\1\u0113\27\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\5\63\1\327\25\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\24\63\1\u0114\6\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\3\63"+
    "\1\u0115\27\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\u0116\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\33\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\10\63\1\u0117\22\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\31\63"+
    "\1\327\1\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\5\63\1\u0118\25\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\20\63\1\u0119\12\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\24\63\1\u011a\6\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\24\63"+
    "\1\u011b\6\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\17\63\1\u011c\13\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\2\63\1\u011d\30\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\26\63\1\310\4\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\20\63"+
    "\1\u011e\12\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\11\63\1\u011f\21\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\u0120"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\33\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\10\63"+
    "\1\321\22\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\23\63\1\u0121\7\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\26\63\1\u0122\4\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\14\63\1\327\16\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\24\63"+
    "\1\u0123\6\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\24\63\1\310\6\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\14\63\1\u0124\16\63\3\61\1\63"+
    "\17\337\1\u0125\104\337\67\0\1\u0126\111\0\1\u0127\103\0"+
    "\1\u0128\124\0\1\u0129\32\0\1\u0129\107\0\1\u012a\33\0"+
    "\1\u012a\71\0\1\u012b\33\0\1\u012b\53\0\1\u012c\32\0"+
    "\1\u012c\60\0\1\u012d\32\0\1\u012d\76\0\1\u012e\32\0"+
    "\1\u012e\101\0\1\u012f\32\0\1\u012f\66\0\1\u0130\32\0"+
    "\1\u0130\75\0\1\u0131\33\0\1\u0131\60\0\1\u0132\32\0"+
    "\1\u0132\55\0\1\u0133\32\0\1\u0133\72\0\1\u0134\32\0"+
    "\1\u0134\113\0\1\u0135\34\0\1\u0135\63\0\1\u0136\33\0"+
    "\1\u0136\61\0\1\u0137\107\0\1\u0138\123\0\1\u0139\143\0"+
    "\1\u013a\144\0\1\u013b\121\0\1\u013c\141\0\1\u013d\122\0"+
    "\1\u013e\116\0\1\u013f\113\0\1\u0140\50\0\1\u0141\201\0"+
    "\1\u0142\122\0\1\u0143\125\0\1\u0144\130\0\1\u0145\37\0"+
    "\1\u0146\201\0\1\u0147\26\0\2\61\1\0\1\61\1\0"+
    "\1\61\1\162\13\61\3\u0148\6\61\6\u0148\22\61\1\0"+
    "\2\61\6\u0148\32\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\14\63\1\u0149\16\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\11\63\1\u014a\21\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\26\63"+
    "\1\u014b\4\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\1\63\1\u014c\31\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\13\63\1\327\17\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\5\63\1\u014d\25\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\13\63"+
    "\1\u014e\17\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\23\63\1\u014f\7\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\16\63\1\327\14\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\1\u0150\5\61\27\63\1\61"+
    "\1\0\1\61\23\63\1\u0151\7\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\11\63\1\u0152\21\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\u0153\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\33\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\17\63\1\u0118\13\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\5\63\1\u0154\25\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\14\63\1\310"+
    "\16\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\17\63\1\u0123\13\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\u0155\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\33\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\5\63\1\u0156"+
    "\25\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\u0157\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\33\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\17\63\1\u0158\13\63\3\61\1\63\17\337\1\u0159\104\337"+
    "\66\0\1\u015a\122\0\1\u015b\113\0\1\u015c\127\0\1\u015d"+
    "\34\0\1\u015d\62\0\1\u015e\33\0\1\u015e\47\0\1\u015f"+
    "\32\0\1\u015f\71\0\1\u0160\32\0\1\u0160\110\0\1\u0161"+
    "\33\0\1\u0161\56\0\1\u0162\32\0\1\u0162\66\0\1\u0163"+
    "\32\0\1\u0163\64\0\1\u0164\32\0\1\u0164\100\0\1\u0165"+
    "\32\0\1\u0165\64\0\1\u0166\32\0\1\u0166\102\0\1\u0167"+
    "\33\0\1\u0167\60\0\1\u0168\32\0\1\u0168\74\0\1\u0169"+
    "\124\0\1\u016a\116\0\1\u016b\131\0\1\u016c\156\0\1\u016d"+
    "\102\0\1\u016e\123\0\1\u016f\130\0\1\u0170\14\0\1\u0171"+
    "\124\0\1\u0172\104\0\1\u0173\121\0\1\u0174\127\0\1\u0175"+
    "\115\0\1\u0176\35\0\2\61\1\0\1\61\1\0\1\61"+
    "\1\162\13\61\3\u0177\6\61\6\u0177\22\61\1\0\2\61"+
    "\6\u0177\32\61\1\0\1\61\1\0\1\61\1\u0178\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\33\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\5\63\1\u0179"+
    "\25\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\1\63\1\u0149\31\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\16\63\1\u014b\14\63\3\61\1\63\2\61"+
    "\1\0\1\61\1\0\1\61\1\164\1\61\1\63\6\61"+
    "\1\63\2\61\3\63\6\61\27\63\1\61\1\0\1\61"+
    "\22\63\1\u011b\10\63\3\61\1\63\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\2\63\1\u017a"+
    "\30\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\11\63\1\306\21\63\3\61"+
    "\1\63\2\61\1\0\1\61\1\0\1\61\1\162\12\61"+
    "\1\u017b\41\61\1\0\42\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\1\u0150"+
    "\5\61\27\63\1\61\1\0\1\61\33\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\6\63\1\u017c\24\63\3\61\1\63\2\61\1\0"+
    "\1\61\1\0\1\61\1\164\1\61\1\63\6\61\1\63"+
    "\2\61\3\63\6\61\27\63\1\61\1\0\1\61\22\63"+
    "\1\u0123\10\63\3\61\1\63\2\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\23\63\1\u017d\7\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\22\63\1\327\10\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\27\63\1\327\3\63\3\61\1\63\17\337\1\u0159"+
    "\11\337\1\u017e\72\337\101\0\1\u017f\65\0\1\u0180\117\0"+
    "\1\u0181\135\0\1\u0182\32\0\1\u0182\74\0\1\u0183\33\0"+
    "\1\u0183\63\0\1\u0184\32\0\1\u0184\54\0\1\u0185\32\0"+
    "\1\u0185\105\0\1\u0186\32\0\1\u0186\51\0\1\u0187\32\0"+
    "\1\u0187\74\0\1\u0188\32\0\1\u0188\64\0\1\u0189\155\0"+
    "\1\u018a\75\0\1\u018b\123\0\1\u018c\170\0\1\u018d\122\0"+
    "\1\u018e\121\0\1\u018f\110\0\1\u0190\133\0\1\u0191\134\0"+
    "\1\u0192\114\0\1\u0193\124\0\1\u0194\22\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\162\13\61\3\u0195\6\61\6\u0195"+
    "\22\61\1\0\2\61\6\u0195\32\61\1\0\1\61\1\0"+
    "\1\61\1\164\1\61\1\63\6\61\1\63\2\61\3\63"+
    "\6\61\27\63\1\61\1\0\1\61\22\63\1\u0149\10\63"+
    "\3\61\1\63\2\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\17\63\1\u0196\13\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\162\12\61\1\u0197"+
    "\41\61\1\0\42\61\1\0\1\61\1\0\1\61\1\164"+
    "\1\61\1\63\6\61\1\63\2\61\3\63\6\61\27\63"+
    "\1\61\1\0\1\61\31\63\1\u011b\1\63\3\61\1\63"+
    "\2\61\1\0\1\61\1\0\1\61\1\164\1\61\1\63"+
    "\6\61\1\63\2\61\3\63\6\61\27\63\1\61\1\0"+
    "\1\61\5\63\1\u0198\25\63\3\61\1\63\50\0\1\u0199"+
    "\126\0\1\u019a\120\0\1\u019b\32\0\1\u019b\70\0\1\u019c"+
    "\32\0\1\u019c\75\0\1\u019d\33\0\1\u019d\67\0\1\u019e"+
    "\33\0\1\u019e\65\0\1\u019f\33\0\1\u019f\67\0\1\u01a0"+
    "\120\0\1\u01a1\106\0\1\u01a2\202\0\1\u01a3\113\0\1\u01a4"+
    "\140\0\1\u01a5\102\0\1\u01a6\25\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\u0120\54\61\1\0\42\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\30\63\1\u0123"+
    "\2\63\3\61\1\63\2\61\1\0\1\61\1\0\1\61"+
    "\1\162\10\61\2\u01a7\1\61\3\u01a7\6\61\27\u01a7\1\61"+
    "\1\0\1\61\33\u01a7\3\61\1\u01a7\2\61\1\0\1\61"+
    "\1\0\1\61\1\164\1\61\1\63\6\61\1\63\2\61"+
    "\3\63\6\61\27\63\1\61\1\0\1\61\22\63\1\u01a8"+
    "\10\63\3\61\1\63\40\0\1\u01a9\150\0\1\u01aa\101\0"+
    "\1\u01ab\32\0\1\u01ab\64\0\1\u01ac\32\0\1\u01ac\116\0"+
    "\1\u01ad\114\0\1\u01ae\122\0\1\u01af\151\0\1\u01b0\116\0"+
    "\1\u01b1\117\0\1\u01b2\125\0\1\u01b3\27\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\162\10\61\1\u01a7\1\u01b4\1\61"+
    "\3\u01a7\6\61\27\u01a7\1\61\1\0\1\61\33\u01a7\3\61"+
    "\1\u01a7\2\61\1\0\1\61\1\0\1\61\1\164\1\61"+
    "\1\63\6\61\1\63\2\61\3\63\6\61\27\63\1\61"+
    "\1\0\1\61\11\63\1\u01b5\21\63\3\61\1\63\51\0"+
    "\1\u01b6\105\0\1\u01b7\140\0\1\u01b8\32\0\1\u01b8\53\0"+
    "\1\u01b9\32\0\1\u01b9\105\0\1\u01ba\122\0\1\u01bb\125\0"+
    "\1\u01bc\143\0\1\u01bd\133\0\1\u01be\125\0\1\u01bf\20\0"+
    "\2\61\1\0\1\61\1\0\1\61\1\162\10\61\1\u01a7"+
    "\1\u01b4\1\61\3\u01c0\6\61\27\u01c0\1\61\1\0\1\61"+
    "\33\u01c0\3\61\1\u01c0\2\61\1\0\1\61\1\0\1\61"+
    "\1\164\1\61\1\63\6\61\1\63\2\61\3\63\6\61"+
    "\27\63\1\61\1\0\1\61\6\63\1\u0149\24\63\3\61"+
    "\1\63\46\0\1\u01c1\116\0\1\u01c2\32\0\1\u01c2\105\0"+
    "\1\u01c3\120\0\1\u01c4\166\0\1\u01c5\5\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\162\10\61\1\u01a7\1\u01b4\1\61"+
    "\3\u01c6\6\61\27\u01c6\1\61\1\0\1\61\33\u01c6\3\61"+
    "\1\u01c6\37\0\1\u01c7\133\0\1\u01c8\117\0\1\u01c9\60\0"+
    "\1\u01c6\1\61\1\0\1\61\1\0\1\u01c6\1\u01ca\54\u01c6"+
    "\1\u01cb\40\u01c6\33\0\1\u01cc\141\0\1\u01cd\52\0\1\u01cb"+
    "\4\0\1\u01cb\1\u01ce\115\u01cb\55\0\1\u01cf\117\0\1\u01d0"+
    "\125\0\1\u01d1\113\0\1\u01d2\131\0\1\u01d3\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32172];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\6\11\2\1\2\11\13\1\2\11"+
    "\15\1\1\11\1\1\1\11\1\1\1\11\32\0\1\11"+
    "\2\0\3\11\25\0\1\11\12\0\2\11\1\0\2\11"+
    "\37\0\1\1\3\0\1\11\10\0\1\11\7\0\1\11"+
    "\16\0\1\11\6\0\1\11\43\0\1\11\3\0\1\11"+
    "\12\0\2\11\6\0\1\11\2\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\2\11\2\0\1\11"+
    "\7\0\1\11\11\0\1\11\12\0\1\11\2\0\1\11"+
    "\16\0\2\11\1\0\1\11\6\0\1\11\13\0\1\11"+
    "\3\0\1\11\5\0\1\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\14\0\1\11\2\0\1\11\2\0\1\11"+
    "\5\0\1\1\1\11\3\0\1\11\4\0\1\11\3\0"+
    "\1\11\1\0\2\11\2\0\2\11\7\0\3\11\24\0"+
    "\1\11\3\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\1\2\0\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
		private Symbol symbol(int type) {
			return new Symbol(type, yyline + 1, yycolumn + 1);
		}

		private Symbol symbol(int type, Object object) {
			return new Symbol(type, yyline + 1, yycolumn + 1, object);
		}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CaptchaLex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return symbol(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: < " + yytext() + " >");
	return symbol(ERROR, yytext());
	// throw new Error("Ilegal character: <" + yytext() + ">");
            }
            // fall through
          case 89: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 90: break;
          case 3:
            { return symbol(NOT, yytext());
            }
            // fall through
          case 91: break;
          case 4:
            { return symbol(LPAREN, yytext());
            }
            // fall through
          case 92: break;
          case 5:
            { return symbol(RPAREN, yytext());
            }
            // fall through
          case 93: break;
          case 6:
            { return symbol(TIMES, yytext());
            }
            // fall through
          case 94: break;
          case 7:
            { return symbol(PLUS, yytext());
            }
            // fall through
          case 95: break;
          case 8:
            { return symbol(MINUS, yytext());
            }
            // fall through
          case 96: break;
          case 9:
            { return symbol(DIVIDE, yytext());
            }
            // fall through
          case 97: break;
          case 10:
            { return symbol(INTEGER, yytext());
            }
            // fall through
          case 98: break;
          case 11:
            { return symbol(COLON, yytext());
            }
            // fall through
          case 99: break;
          case 12:
            { return symbol(SEMI, yytext());
            }
            // fall through
          case 100: break;
          case 13:
            { return symbol(SMALLER, yytext());
            }
            // fall through
          case 101: break;
          case 14:
            { return symbol(EQUAL, yytext());
            }
            // fall through
          case 102: break;
          case 15:
            { return symbol(GREATER, yytext());
            }
            // fall through
          case 103: break;
          case 16:
            { return symbol(LBRACKET, yytext());
            }
            // fall through
          case 104: break;
          case 17:
            { return symbol(RBRACKET, yytext());
            }
            // fall through
          case 105: break;
          case 18:
            { return symbol(LBRACE, yytext());
            }
            // fall through
          case 106: break;
          case 19:
            { return symbol(RBRACE, yytext());
            }
            // fall through
          case 107: break;
          case 20:
            { return symbol(NEQ, yytext());
            }
            // fall through
          case 108: break;
          case 21:
            { return symbol(AND, yytext());
            }
            // fall through
          case 109: break;
          case 22:
            { return symbol(SMLLREQ, yytext());
            }
            // fall through
          case 110: break;
          case 23:
            { return symbol(EQEQ, yytext());
            }
            // fall through
          case 111: break;
          case 24:
            { return symbol(GRTREQ, yytext());
            }
            // fall through
          case 112: break;
          case 25:
            { return symbol(ID, yytext());
            }
            // fall through
          case 113: break;
          case 26:
            { return symbol(OR, yytext());
            }
            // fall through
          case 114: break;
          case 27:
            { return symbol(STRING, yytext());
            }
            // fall through
          case 115: break;
          case 28:
            { return symbol(ID_, yytext());
            }
            // fall through
          case 116: break;
          case 29:
            { return symbol(INTQ, yytext());
            }
            // fall through
          case 117: break;
          case 30:
            { return symbol(DECIMAL, yytext());
            }
            // fall through
          case 118: break;
          case 31:
            { return symbol(ASC, yytext());
            }
            // fall through
          case 119: break;
          case 32:
            { return symbol(PARAGRAPH, yytext());
            }
            // fall through
          case 120: break;
          case 33:
            { return symbol(ALT, yytext());
            }
            // fall through
          case 121: break;
          case 34:
            { return symbol(SRC, yytext());
            }
            // fall through
          case 122: break;
          case 35:
            { return symbol(PERCNTG, yytext());
            }
            // fall through
          case 123: break;
          case 36:
            { return symbol(BR, yytext());
            }
            // fall through
          case 124: break;
          case 37:
            { return symbol(H1, yytext());
            }
            // fall through
          case 125: break;
          case 38:
            { return symbol(DESC, yytext());
            }
            // fall through
          case 126: break;
          case 39:
            { return symbol(EXIT, yytext());
            }
            // fall through
          case 127: break;
          case 40:
            { return symbol(CHAR, yytext());
            }
            // fall through
          case 128: break;
          case 41:
            { return symbol(COLS, yytext());
            }
            // fall through
          case 129: break;
          case 42:
            { return symbol(HREF, yytext());
            }
            // fall through
          case 130: break;
          case 43:
            { return symbol(NAME, yytext());
            }
            // fall through
          case 131: break;
          case 44:
            { return symbol(ROWS, yytext());
            }
            // fall through
          case 132: break;
          case 45:
            { return symbol(TRUE, yytext());
            }
            // fall through
          case 133: break;
          case 46:
            { return symbol(TYPE, yytext());
            }
            // fall through
          case 134: break;
          case 47:
            { return symbol(PIXEL, yytext());
            }
            // fall through
          case 135: break;
          case 48:
            { return symbol(CLASS_VALUE, yytext());
            }
            // fall through
          case 136: break;
          case 49:
            { return symbol(COLOUR, yytext());
            }
            // fall through
          case 137: break;
          case 50:
            { return symbol(DIV, yytext());
            }
            // fall through
          case 138: break;
          case 51:
            { return symbol(IMG, yytext());
            }
            // fall through
          case 139: break;
          case 52:
            { return symbol(CLASS, yytext());
            }
            // fall through
          case 140: break;
          case 53:
            { return symbol(COLOR, yytext());
            }
            // fall through
          case 141: break;
          case 54:
            { return symbol(FALSE, yytext());
            }
            // fall through
          case 142: break;
          case 55:
            { return symbol(WIDTH, yytext());
            }
            // fall through
          case 143: break;
          case 56:
            { return symbol(ALIGN_VALUE, yytext());
            }
            // fall through
          case 144: break;
          case 57:
            { return symbol(TYPE_VALUE, yytext());
            }
            // fall through
          case 145: break;
          case 58:
            { return symbol(BODY, yytext());
            }
            // fall through
          case 146: break;
          case 59:
            { return symbol(GCIC, yytext());
            }
            // fall through
          case 147: break;
          case 60:
            { return symbol(HEAD, yytext());
            }
            // fall through
          case 148: break;
          case 61:
            { return symbol(LINK, yytext());
            }
            // fall through
          case 149: break;
          case 62:
            { return symbol(SPAM, yytext());
            }
            // fall through
          case 150: break;
          case 63:
            { return symbol(HEIGHT, yytext());
            }
            // fall through
          case 151: break;
          case 64:
            { return symbol(STR, yytext());
            }
            // fall through
          case 152: break;
          case 65:
            { return symbol(FONTF_VALUE, yytext());
            }
            // fall through
          case 153: break;
          case 66:
            { return symbol(GLOBAL, yytext());
            }
            // fall through
          case 154: break;
          case 67:
            { return symbol(INPUT, yytext());
            }
            // fall through
          case 155: break;
          case 68:
            { return symbol(TITLE, yytext());
            }
            // fall through
          case 156: break;
          case 69:
            { return symbol(REVERSE, yytext());
            }
            // fall through
          case 157: break;
          case 70:
            { return symbol(BOOL, yytext());
            }
            // fall through
          case 158: break;
          case 71:
            { return symbol(DEC, yytext());
            }
            // fall through
          case 159: break;
          case 72:
            { return symbol(INT, yytext());
            }
            // fall through
          case 160: break;
          case 73:
            { return symbol(CLICK, yytext());
            }
            // fall through
          case 161: break;
          case 74:
            { return symbol(BUTTON, yytext());
            }
            // fall through
          case 162: break;
          case 75:
            { return symbol(OPTION, yytext());
            }
            // fall through
          case 163: break;
          case 76:
            { return symbol(SELECT, yytext());
            }
            // fall through
          case 164: break;
          case 77:
            { return symbol(FONTS, yytext());
            }
            // fall through
          case 165: break;
          case 78:
            { return symbol(ALERT, yytext());
            }
            // fall through
          case 166: break;
          case 79:
            { return symbol(TXTAREA, yytext());
            }
            // fall through
          case 167: break;
          case 80:
            { return symbol(LETPAR, yytext());
            }
            // fall through
          case 168: break;
          case 81:
            { return symbol(BCKGRND, yytext());
            }
            // fall through
          case 169: break;
          case 82:
            { return symbol(ALIGN, yytext());
            }
            // fall through
          case 170: break;
          case 83:
            { return symbol(SCRIPT, yytext());
            }
            // fall through
          case 171: break;
          case 84:
            { return symbol(FONTF, yytext());
            }
            // fall through
          case 172: break;
          case 85:
            { return symbol(LETIMPAR, yytext());
            }
            // fall through
          case 173: break;
          case 86:
            { return symbol(RANDOM_N, yytext());
            }
            // fall through
          case 174: break;
          case 87:
            { return symbol(URL, yytext());
            }
            // fall through
          case 175: break;
          case 88:
            { return symbol(RANDOM_C, yytext());
            }
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
