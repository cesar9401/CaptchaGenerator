
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.captchaweb.parser;

import com.cesar31.captchaweb.model.*;
import com.cesar31.captchaweb.control.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CaptchaParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CaptchaParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CaptchaParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CaptchaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CaptchaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\002\023\006\000\002\002\004\000\002\154" +
    "\005\000\002\152\004\000\002\152\003\000\002\147\003" +
    "\000\002\147\003\000\002\153\005\000\002\150\004\000" +
    "\002\150\002\000\002\143\003\000\002\143\003\000\002" +
    "\143\003\000\002\143\003\000\002\143\003\000\002\143" +
    "\003\000\002\143\003\000\002\143\003\000\002\143\003" +
    "\000\002\143\003\000\002\143\003\000\002\130\005\000" +
    "\002\024\004\000\002\024\002\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\027\005\000\002\041" +
    "\006\000\002\064\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\006\000\002\026\004\000\002" +
    "\061\003\000\002\061\002\000\002\037\004\000\002\037" +
    "\003\000\002\035\003\000\002\035\003\000\002\034\003" +
    "\000\002\034\003\000\002\065\011\000\002\040\003\000" +
    "\002\040\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\030\011\000\002\031\012\000\002\031" +
    "\004\000\002\031\002\000\002\032\010\000\002\033\013" +
    "\000\002\046\006\000\002\046\005\000\002\047\005\000" +
    "\002\047\003\000\002\050\005\000\002\050\003\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\052\005\000\002\052\003" +
    "\000\002\042\005\000\002\042\005\000\002\042\003\000" +
    "\002\043\005\000\002\043\005\000\002\043\003\000\002" +
    "\044\004\000\002\044\003\000\002\051\004\000\002\051" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\005\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\053\003\000\002\053\003\000" +
    "\002\131\005\000\002\132\004\000\002\133\005\000\002" +
    "\134\005\000\002\136\005\000\002\140\004\000\002\141" +
    "\004\000\002\135\005\000\002\142\005\000\002\151\004" +
    "\000\002\151\002\000\002\146\005\000\002\137\004\000" +
    "\002\144\003\000\002\145\005\000\002\054\004\000\002" +
    "\054\002\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\122\006" +
    "\000\002\122\006\000\002\122\006\000\002\123\006\000" +
    "\002\123\006\000\002\123\006\000\002\124\006\000\002" +
    "\124\006\000\002\121\006\000\002\121\006\000\002\114" +
    "\006\000\002\114\006\000\002\114\006\000\002\115\006" +
    "\000\002\115\006\000\002\116\006\000\002\116\006\000" +
    "\002\117\006\000\002\117\006\000\002\120\006\000\002" +
    "\120\006\000\002\125\006\000\002\125\006\000\002\125" +
    "\006\000\002\112\006\000\002\112\006\000\002\113\006" +
    "\000\002\113\006\000\002\126\006\000\002\126\006\000" +
    "\002\110\006\000\002\110\006\000\002\111\006\000\002" +
    "\111\006\000\002\111\006\000\002\107\006\000\002\107" +
    "\006\000\002\127\006\000\002\127\006\000\002\106\004" +
    "\000\002\106\002\000\002\105\005\000\002\105\005\000" +
    "\002\105\005\000\002\104\003\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\104\003\000\002\104\003\000\002\067\005\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\070" +
    "\005\000\002\070\005\000\002\070\005\000\002\070\005" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\071\005\000\002\056\003\000\002\056\003\000\002" +
    "\072\005\000\002\072\005\000\002\072\005\000\002\072" +
    "\005\000\002\055\003\000\002\055\003\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\074\005\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\075\005\000\002\075\005\000\002\075\005\000\002\075" +
    "\005\000\002\076\005\000\002\076\005\000\002\076\005" +
    "\000\002\076\005\000\002\077\005\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\057\003\000\002" +
    "\057\003\000\002\100\005\000\002\100\005\000\002\100" +
    "\005\000\002\100\005\000\002\101\005\000\002\101\005" +
    "\000\002\101\005\000\002\101\005\000\002\060\003\000" +
    "\002\060\003\000\002\066\003\000\002\066\003\000\002" +
    "\102\005\000\002\102\005\000\002\102\005\000\002\103" +
    "\005\000\002\103\005\000\002\103\005\000\002\103\005" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\012" +
    "\006\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\013\006\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\020\006\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\021\006\000\002\021" +
    "\006\000\002\022\006\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02a5\000\006\003\004\100\005\001\002\000\004\004" +
    "\u02a5\001\002\000\006\003\u029f\004\u02a0\001\002\000\006" +
    "\003\011\100\014\001\002\000\004\002\010\001\002\000" +
    "\004\002\000\001\002\000\004\005\u029c\001\002\000\006" +
    "\003\330\100\331\001\002\000\006\003\216\100\221\001" +
    "\002\000\006\003\015\005\016\001\002\000\010\003\uff5f" +
    "\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103" +
    "\uff5f\001\002\000\010\003\020\077\021\103\022\001\002" +
    "\000\046\003\044\025\062\026\055\027\051\030\065\031" +
    "\025\032\066\033\035\034\042\035\050\036\052\040\037" +
    "\041\063\042\026\043\047\044\060\045\057\126\031\001" +
    "\002\000\006\003\uff84\100\uff84\001\002\000\046\003\044" +
    "\025\062\026\055\027\051\030\065\031\025\032\066\033" +
    "\035\034\042\035\050\036\052\040\037\041\063\042\026" +
    "\043\047\044\060\045\057\126\031\001\002\000\010\003" +
    "\uff60\077\uff60\103\uff60\001\002\000\006\003\uff59\104\uff59" +
    "\001\002\000\006\003\204\125\205\001\002\000\006\003" +
    "\uff1c\125\uff1c\001\002\000\006\003\177\125\200\001\002" +
    "\000\006\003\172\125\173\001\002\000\006\003\uff25\125" +
    "\uff25\001\002\000\006\003\165\125\166\001\002\000\006" +
    "\003\uff5a\104\uff5a\001\002\000\006\003\uff50\104\uff50\001" +
    "\002\000\006\003\160\125\161\001\002\000\006\003\uff53" +
    "\104\uff53\001\002\000\006\003\153\125\154\001\002\000" +
    "\006\003\151\104\152\001\002\000\006\003\uff52\104\uff52" +
    "\001\002\000\006\003\144\125\145\001\002\000\006\003" +
    "\uff57\104\uff57\001\002\000\010\003\uff4e\104\uff4e\125\126" +
    "\001\002\000\006\003\121\125\122\001\002\000\006\003" +
    "\uff51\104\uff51\001\002\000\006\003\uff1b\125\uff1b\001\002" +
    "\000\006\003\114\125\115\001\002\000\006\003\uff3a\125" +
    "\uff3a\001\002\000\006\003\uff26\125\uff26\001\002\000\006" +
    "\003\uff5b\104\uff5b\001\002\000\006\003\uff4f\104\uff4f\001" +
    "\002\000\006\003\uff3b\125\uff3b\001\002\000\006\003\uff55" +
    "\104\uff55\001\002\000\006\003\107\125\110\001\002\000" +
    "\006\003\102\125\103\001\002\000\006\003\uff58\104\uff58" +
    "\001\002\000\006\003\uff41\125\uff41\001\002\000\006\003" +
    "\uff40\125\uff40\001\002\000\006\003\uff56\104\uff56\001\002" +
    "\000\006\003\075\125\076\001\002\000\006\003\070\125" +
    "\071\001\002\000\006\003\uff54\104\uff54\001\002\000\004" +
    "\133\074\001\002\000\006\003\072\133\073\001\002\000" +
    "\006\003\uff2f\104\uff2f\001\002\000\006\003\uff32\104\uff32" +
    "\001\002\000\006\003\uff30\104\uff30\001\002\000\004\072" +
    "\101\001\002\000\006\003\077\072\100\001\002\000\006" +
    "\003\uff37\104\uff37\001\002\000\006\003\uff39\104\uff39\001" +
    "\002\000\006\003\uff38\104\uff38\001\002\000\004\142\106" +
    "\001\002\000\006\003\105\142\104\001\002\000\006\003" +
    "\uff18\104\uff18\001\002\000\006\003\uff16\104\uff16\001\002" +
    "\000\006\003\uff17\104\uff17\001\002\000\004\137\113\001" +
    "\002\000\006\003\111\137\112\001\002\000\006\003\uff12" +
    "\104\uff12\001\002\000\006\003\uff15\104\uff15\001\002\000" +
    "\006\003\uff13\104\uff13\001\002\000\004\142\120\001\002" +
    "\000\006\003\117\142\116\001\002\000\006\003\uff49\104" +
    "\uff49\001\002\000\006\003\uff46\104\uff46\001\002\000\006" +
    "\003\uff47\104\uff47\001\002\000\004\070\125\001\002\000" +
    "\006\003\123\070\124\001\002\000\006\003\uff3c\104\uff3c" +
    "\001\002\000\006\003\uff3f\104\uff3f\001\002\000\006\003" +
    "\uff3d\104\uff3d\001\002\000\032\070\141\071\131\072\142" +
    "\073\140\074\130\122\137\127\132\132\143\133\127\134" +
    "\136\137\133\142\134\001\002\000\006\003\uff31\104\uff31" +
    "\001\002\000\006\003\uff4c\104\uff4c\001\002\000\006\003" +
    "\uff29\104\uff29\001\002\000\006\003\uff35\104\uff35\001\002" +
    "\000\006\003\uff14\104\uff14\001\002\000\006\003\uff48\104" +
    "\uff48\001\002\000\006\003\uff1f\104\uff1f\001\002\000\006" +
    "\003\uff23\104\uff23\001\002\000\006\003\uff44\104\uff44\001" +
    "\002\000\006\003\uff19\104\uff19\001\002\000\006\003\uff3e" +
    "\104\uff3e\001\002\000\006\003\uff1a\104\uff1a\001\002\000" +
    "\006\003\uff2d\104\uff2d\001\002\000\004\074\150\001\002" +
    "\000\006\003\147\074\146\001\002\000\006\003\uff4d\104" +
    "\uff4d\001\002\000\006\003\uff4a\104\uff4a\001\002\000\006" +
    "\003\uff4b\104\uff4b\001\002\000\010\003\uff5c\077\uff5c\103" +
    "\uff5c\001\002\000\010\003\uff5e\077\uff5e\103\uff5e\001\002" +
    "\000\004\134\157\001\002\000\006\003\155\134\156\001" +
    "\002\000\006\003\uff21\104\uff21\001\002\000\006\003\uff24" +
    "\104\uff24\001\002\000\006\003\uff22\104\uff22\001\002\000" +
    "\004\132\164\001\002\000\006\003\162\132\163\001\002" +
    "\000\006\003\uff2b\104\uff2b\001\002\000\006\003\uff2e\104" +
    "\uff2e\001\002\000\006\003\uff2c\104\uff2c\001\002\000\004" +
    "\071\171\001\002\000\006\003\167\071\170\001\002\000" +
    "\006\003\uff27\104\uff27\001\002\000\006\003\uff2a\104\uff2a" +
    "\001\002\000\006\003\uff28\104\uff28\001\002\000\006\072" +
    "\142\073\140\001\002\000\010\003\175\072\142\073\140" +
    "\001\002\000\006\003\uff20\104\uff20\001\002\000\006\003" +
    "\uff1d\104\uff1d\001\002\000\006\003\uff1e\104\uff1e\001\002" +
    "\000\004\122\203\001\002\000\006\003\202\122\201\001" +
    "\002\000\006\003\uff45\104\uff45\001\002\000\006\003\uff42" +
    "\104\uff42\001\002\000\006\003\uff43\104\uff43\001\002\000" +
    "\004\127\210\001\002\000\006\003\206\127\207\001\002" +
    "\000\006\003\uff33\104\uff33\001\002\000\006\003\uff36\104" +
    "\uff36\001\002\000\006\003\uff34\104\uff34\001\002\000\004" +
    "\104\212\001\002\000\010\003\uff5d\077\uff5d\103\uff5d\001" +
    "\002\000\010\003\020\077\214\103\022\001\002\000\006" +
    "\003\uff82\100\uff82\001\002\000\006\003\ufffd\100\ufffd\001" +
    "\002\000\006\006\300\007\276\001\002\000\006\003\ufffb" +
    "\100\ufffb\001\002\000\006\003\307\100\310\001\002\000" +
    "\006\006\262\007\257\001\002\000\006\003\254\100\256" +
    "\001\002\000\006\003\ufffc\100\ufffc\001\002\000\020\003" +
    "\uff8d\046\uff8d\100\uff8d\105\uff8d\116\uff8d\140\uff8d\141\uff8d" +
    "\001\002\000\020\003\235\046\227\100\226\105\230\116" +
    "\232\140\231\141\236\001\002\000\006\003\242\121\243" +
    "\001\002\000\020\003\uff89\046\uff89\100\uff89\105\uff89\116" +
    "\uff89\140\uff89\141\uff89\001\002\000\020\003\uff8a\046\uff8a" +
    "\100\uff8a\105\uff8a\116\uff8a\140\uff8a\141\uff8a\001\002\000" +
    "\020\003\uff8c\046\uff8c\100\uff8c\105\uff8c\116\uff8c\140\uff8c" +
    "\141\uff8c\001\002\000\020\003\uff88\046\uff88\100\uff88\105" +
    "\uff88\116\uff88\140\uff88\141\uff88\001\002\000\006\003\uff9d" +
    "\100\uff9d\001\002\000\020\003\uff8e\046\uff8e\100\uff8e\105" +
    "\uff8e\116\uff8e\140\uff8e\141\uff8e\001\002\000\004\121\237" +
    "\001\002\000\020\003\uff8b\046\uff8b\100\uff8b\105\uff8b\116" +
    "\uff8b\140\uff8b\141\uff8b\001\002\000\004\006\240\001\002" +
    "\000\004\077\241\001\002\000\006\003\uff06\100\uff06\001" +
    "\002\000\004\006\251\001\002\000\006\003\244\006\245" +
    "\001\002\000\004\077\250\001\002\000\006\003\247\077" +
    "\246\001\002\000\006\003\uff07\100\uff07\001\002\000\006" +
    "\003\uff03\100\uff03\001\002\000\006\003\uff04\100\uff04\001" +
    "\002\000\004\077\252\001\002\000\006\003\uff05\100\uff05" +
    "\001\002\000\006\003\ufffe\100\ufffe\001\002\000\010\006" +
    "\300\007\276\121\277\001\002\000\006\003\uffff\100\uffff" +
    "\001\002\000\012\003\260\006\262\007\257\121\261\001" +
    "\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\004" +
    "\005\272\001\002\000\006\003\265\005\266\001\002\000" +
    "\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\020" +
    "\077\264\103\022\001\002\000\020\003\uff81\046\uff81\100" +
    "\uff81\105\uff81\116\uff81\140\uff81\141\uff81\001\002\000\004" +
    "\077\271\001\002\000\006\003\270\077\267\001\002\000" +
    "\006\003\uff0c\100\uff0c\001\002\000\006\003\uff08\100\uff08" +
    "\001\002\000\006\003\uff09\100\uff09\001\002\000\004\077" +
    "\273\001\002\000\006\003\uff0a\100\uff0a\001\002\000\010" +
    "\003\020\077\275\103\022\001\002\000\006\003\uff7f\100" +
    "\uff7f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002" +
    "\000\004\005\303\001\002\000\010\003\uff5f\077\uff5f\103" +
    "\uff5f\001\002\000\010\003\020\077\302\103\022\001\002" +
    "\000\020\003\uff80\046\uff80\100\uff80\105\uff80\116\uff80\140" +
    "\uff80\141\uff80\001\002\000\004\077\304\001\002\000\006" +
    "\003\uff0b\100\uff0b\001\002\000\010\003\020\077\306\103" +
    "\022\001\002\000\006\003\uff7e\100\uff7e\001\002\000\004" +
    "\121\323\001\002\000\006\003\312\121\313\001\002\000" +
    "\006\003\uff9c\100\uff9c\001\002\000\004\007\321\001\002" +
    "\000\006\003\315\007\314\001\002\000\006\003\320\077" +
    "\317\001\002\000\004\077\316\001\002\000\006\003\ufeff" +
    "\100\ufeff\001\002\000\006\003\uff02\100\uff02\001\002\000" +
    "\006\003\ufefe\100\ufefe\001\002\000\004\077\322\001\002" +
    "\000\006\003\uff00\100\uff00\001\002\000\004\007\324\001" +
    "\002\000\004\077\325\001\002\000\006\003\uff01\100\uff01" +
    "\001\002\000\006\003\u028e\100\u028f\001\002\000\006\003" +
    "\ufff8\100\ufff8\001\002\000\004\010\340\001\002\000\006" +
    "\003\332\010\333\001\002\000\010\003\uff5f\077\uff5f\103" +
    "\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002" +
    "\000\010\003\020\077\335\103\022\001\002\000\006\003" +
    "\uff7d\100\uff7d\001\002\000\010\003\020\077\337\103\022" +
    "\001\002\000\006\003\uff7b\100\uff7b\001\002\000\010\003" +
    "\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\020\077\342" +
    "\103\022\001\002\000\006\003\uff7c\100\uff7c\001\002\000" +
    "\006\003\364\100\345\001\002\000\020\003\uff8d\046\uff8d" +
    "\100\uff8d\105\uff8d\116\uff8d\140\uff8d\141\uff8d\001\002\000" +
    "\034\003\u0275\011\u0232\012\u022d\013\u022a\014\u0231\016\u022e" +
    "\017\u0234\020\u022c\021\u022b\022\u0233\023\u0235\024\u022f\121" +
    "\u0274\001\002\000\006\003\ufff4\100\ufff4\001\002\000\006" +
    "\003\ufffa\100\ufffa\001\002\000\006\003\uffee\100\uffee\001" +
    "\002\000\006\003\ufff1\100\ufff1\001\002\000\020\003\uff8d" +
    "\046\uff8d\100\uff8d\105\uff8d\116\uff8d\140\uff8d\141\uff8d\001" +
    "\002\000\006\003\ufff0\100\ufff0\001\002\000\006\003\ufff2" +
    "\100\ufff2\001\002\000\006\003\ufff5\100\ufff5\001\002\000" +
    "\006\003\u0256\100\u0257\001\002\000\006\003\ufff8\100\ufff8" +
    "\001\002\000\006\003\uff93\100\uff93\001\002\000\006\003" +
    "\ufff7\100\ufff7\001\002\000\006\003\ufff9\100\ufff9\001\002" +
    "\000\006\003\u01ea\100\u01eb\001\002\000\032\011\u01cd\012" +
    "\u01c8\013\u01c7\014\u01cc\016\u01ca\017\u01d0\020\u01c9\021\u01c6" +
    "\022\u01ce\023\u01cf\024\u01cb\121\u01c5\001\002\000\006\003" +
    "\ufff3\100\ufff3\001\002\000\006\003\uffed\100\uffed\001\002" +
    "\000\006\003\uffef\100\uffef\001\002\000\020\003\uff8d\046" +
    "\uff8d\100\uff8d\105\uff8d\116\uff8d\140\uff8d\141\uff8d\001\002" +
    "\000\006\003\ufff6\100\ufff6\001\002\000\020\003\uff8d\046" +
    "\uff8d\100\uff8d\105\uff8d\116\uff8d\140\uff8d\141\uff8d\001\002" +
    "\000\006\003\uff90\100\uff90\001\002\000\030\003\uffea\050" +
    "\uffea\053\uffea\054\uffea\075\uffea\076\uffea\100\uffea\141\uffea" +
    "\144\uffea\147\uffea\151\uffea\001\002\000\006\003\376\100" +
    "\377\001\002\000\004\121\u010a\001\002\000\006\003\u0101" +
    "\121\u0102\001\002\000\006\003\uff91\100\uff91\001\002\000" +
    "\004\017\u0108\001\002\000\006\003\u0103\017\u0104\001\002" +
    "\000\004\077\u0107\001\002\000\006\003\u0105\077\u0106\001" +
    "\002\000\006\003\ufed6\100\ufed6\001\002\000\006\003\ufeda" +
    "\100\ufeda\001\002\000\006\003\ufed7\100\ufed7\001\002\000" +
    "\004\077\u0109\001\002\000\006\003\ufed8\100\ufed8\001\002" +
    "\000\004\017\u010b\001\002\000\004\077\u010c\001\002\000" +
    "\006\003\ufed9\100\ufed9\001\002\000\030\003\u011b\050\u011e" +
    "\053\u011f\054\u011d\075\u0111\076\u0119\100\u0110\141\u0121\144" +
    "\u0115\147\u0120\151\u0113\001\002\000\032\003\uffd0\050\uffd0" +
    "\053\uffd0\054\uffd0\075\uffd0\076\uffd0\100\uffd0\105\uffd0\141" +
    "\uffd0\144\uffd0\147\uffd0\151\uffd0\001\002\000\030\003\uffe9" +
    "\050\uffe9\053\uffe9\054\uffe9\075\uffe9\076\uffe9\100\uffe9\141" +
    "\uffe9\144\uffe9\147\uffe9\151\uffe9\001\002\000\006\003\u019c" +
    "\121\u019d\001\002\000\006\066\uffe4\141\uffe4\001\002\000" +
    "\032\003\uffcf\050\uffcf\053\uffcf\054\uffcf\075\uffcf\076\uffcf" +
    "\100\uffcf\105\uffcf\141\uffcf\144\uffcf\147\uffcf\151\uffcf\001" +
    "\002\000\004\123\u0197\001\002\000\006\066\u018e\141\uffda" +
    "\001\002\000\004\123\u017e\001\002\000\006\003\uffec\100" +
    "\uffec\001\002\000\030\003\uffe7\050\uffe7\053\uffe7\054\uffe7" +
    "\075\uffe7\076\uffe7\100\uffe7\141\uffe7\144\uffe7\147\uffe7\151" +
    "\uffe7\001\002\000\030\003\uffeb\050\uffeb\053\uffeb\054\uffeb" +
    "\075\uffeb\076\uffeb\100\uffeb\141\uffeb\144\uffeb\147\uffeb\151" +
    "\uffeb\001\002\000\006\066\uffe2\141\uffe2\001\002\000\030" +
    "\003\uffe8\050\uffe8\053\uffe8\054\uffe8\075\uffe8\076\uffe8\100" +
    "\uffe8\141\uffe8\144\uffe8\147\uffe8\151\uffe8\001\002\000\004" +
    "\121\u017b\001\002\000\032\003\uffce\050\uffce\053\uffce\054" +
    "\uffce\075\uffce\076\uffce\100\uffce\105\uffce\141\uffce\144\uffce" +
    "\147\uffce\151\uffce\001\002\000\006\066\uffe3\141\uffe3\001" +
    "\002\000\006\066\uffe1\141\uffe1\001\002\000\006\066\uffe0" +
    "\141\uffe0\001\002\000\004\123\u015d\001\002\000\004\125" +
    "\u0122\001\002\000\050\046\u013a\047\u0126\051\u0128\052\u0137" +
    "\070\u0131\071\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117" +
    "\u0138\123\u012a\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136" +
    "\142\u0132\143\u0125\001\002\000\040\077\uffa3\100\uffa3\106" +
    "\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113\uffa3\114\uffa3" +
    "\116\uffa3\117\uffa3\120\uffa3\121\uffa3\124\uffa3\135\uffa3\001" +
    "\002\000\040\077\uffae\100\uffae\106\uffae\107\uffae\110\uffae" +
    "\111\uffae\112\uffae\113\uffae\114\uffae\116\uffae\117\uffae\120" +
    "\uffae\121\uffae\124\uffae\135\uffae\001\002\000\040\077\uffad" +
    "\100\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112\uffad\113" +
    "\uffad\114\uffad\116\uffad\117\uffad\120\uffad\121\uffad\124\uffad" +
    "\135\uffad\001\002\000\040\077\uffaf\100\uffaf\106\uffaf\107" +
    "\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf\114\uffaf\116\uffaf" +
    "\117\uffaf\120\uffaf\121\uffaf\124\uffaf\135\uffaf\001\002\000" +
    "\044\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c" +
    "\072\u0139\073\u012b\074\u0133\123\u012a\127\u012c\132\u012f\133" +
    "\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001\002\000\040" +
    "\077\uff9f\100\uff9f\106\uff9f\107\uff9f\110\uff9f\111\uff9f\112" +
    "\uff9f\113\uff9f\114\uff9f\116\uff9f\117\uff9f\120\uff9f\121\uff9f" +
    "\124\uff9f\135\uff9f\001\002\000\040\077\uffa6\100\uffa6\106" +
    "\uffa6\107\uffa6\110\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6" +
    "\116\uffa6\117\uffa6\120\uffa6\121\uffa6\124\uffa6\135\uffa6\001" +
    "\002\000\050\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131" +
    "\071\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123" +
    "\u012a\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132" +
    "\143\u0125\001\002\000\040\077\uffa1\100\uffa1\106\uffa1\107" +
    "\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\114\uffa1\116\uffa1" +
    "\117\uffa1\120\uffa1\121\uffa1\124\uffa1\135\uffa1\001\002\000" +
    "\040\077\uffa7\100\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7" +
    "\112\uffa7\113\uffa7\114\uffa7\116\uffa7\117\uffa7\120\uffa7\121" +
    "\uffa7\124\uffa7\135\uffa7\001\002\000\040\077\uffac\100\uffac" +
    "\106\uffac\107\uffac\110\uffac\111\uffac\112\uffac\113\uffac\114" +
    "\uffac\116\uffac\117\uffac\120\uffac\121\uffac\124\uffac\135\uffac" +
    "\001\002\000\040\077\uffb1\100\uffb1\106\uffb1\107\uffb1\110" +
    "\uffb1\111\uffb1\112\uffb1\113\uffb1\114\uffb1\116\uffb1\117\uffb1" +
    "\120\uffb1\121\uffb1\124\uffb1\135\uffb1\001\002\000\040\077" +
    "\uffa4\100\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4" +
    "\113\uffa4\114\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\124" +
    "\uffa4\135\uffa4\001\002\000\040\077\uffb5\100\uffb5\106\uffb5" +
    "\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\116" +
    "\uffb5\117\uffb5\120\uffb5\121\uffb5\124\uffb5\135\uffb5\001\002" +
    "\000\040\077\uffa5\100\uffa5\106\uffa5\107\uffa5\110\uffa5\111" +
    "\uffa5\112\uffa5\113\uffa5\114\uffa5\116\uffa5\117\uffa5\120\uffa5" +
    "\121\uffa5\124\uffa5\135\uffa5\001\002\000\040\077\uffaa\100" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112\uffaa\113\uffaa" +
    "\114\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa\124\uffaa\135" +
    "\uffaa\001\002\000\040\077\uffa9\100\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\113\uffa9\114\uffa9\116\uffa9\117" +
    "\uffa9\120\uffa9\121\uffa9\124\uffa9\135\uffa9\001\002\000\040" +
    "\077\uffb8\100\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112" +
    "\uffb8\113\uffb8\114\uffb8\116\uffb8\117\uffb8\120\u0154\121\u0153" +
    "\124\uffb8\135\uffb8\001\002\000\034\077\u0146\100\u014a\106" +
    "\uffbb\107\u014d\110\u014c\111\u014b\112\u0148\113\uffbb\114\uffbb" +
    "\116\u0147\117\u0149\124\uffbb\135\uffbb\001\002\000\040\077" +
    "\uffa0\100\uffa0\106\uffa0\107\uffa0\110\uffa0\111\uffa0\112\uffa0" +
    "\113\uffa0\114\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0\124" +
    "\uffa0\135\uffa0\001\002\000\040\077\uff9e\100\uff9e\106\uff9e" +
    "\107\uff9e\110\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e\116" +
    "\uff9e\117\uff9e\120\uff9e\121\uff9e\124\uff9e\135\uff9e\001\002" +
    "\000\046\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071" +
    "\u013c\072\u0139\073\u012b\074\u0133\115\u0127\123\u012a\127\u012c" +
    "\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001" +
    "\002\000\040\077\uffa2\100\uffa2\106\uffa2\107\uffa2\110\uffa2" +
    "\111\uffa2\112\uffa2\113\uffa2\114\uffa2\116\uffa2\117\uffa2\120" +
    "\uffa2\121\uffa2\124\uffa2\135\uffa2\001\002\000\040\077\uffb0" +
    "\100\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113" +
    "\uffb0\114\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\124\uffb0" +
    "\135\uffb0\001\002\000\014\106\uffc2\113\uffc2\114\uffc2\124" +
    "\uffc2\135\uffc2\001\002\000\040\077\uffa8\100\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\116" +
    "\uffa8\117\uffa8\120\uffa8\121\uffa8\124\uffa8\135\uffa8\001\002" +
    "\000\040\077\uffb3\100\uffb3\106\uffb3\107\uffb3\110\uffb3\111" +
    "\uffb3\112\uffb3\113\uffb3\114\uffb3\116\uffb3\117\uffb3\120\uffb3" +
    "\121\uffb3\124\uffb3\135\uffb3\001\002\000\014\106\uffc4\113" +
    "\uffc4\114\u0143\124\uffc4\135\uffc4\001\002\000\006\106\u0140" +
    "\113\u0141\001\002\000\034\003\uffe5\050\uffe5\053\uffe5\054" +
    "\uffe5\075\uffe5\076\uffe5\100\uffe5\105\uffe5\141\uffe5\144\uffe5" +
    "\146\uffe5\147\uffe5\151\uffe5\001\002\000\050\046\u013a\047" +
    "\u0126\051\u0128\052\u0137\070\u0131\071\u013c\072\u0139\073\u012b" +
    "\074\u0133\115\u0127\117\u0138\123\u012a\127\u012c\132\u012f\133" +
    "\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001\002\000\014" +
    "\106\uffc5\113\uffc5\114\u0143\124\uffc5\135\uffc5\001\002\000" +
    "\050\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c" +
    "\072\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123\u012a\127" +
    "\u012c\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125" +
    "\001\002\000\014\106\uffc3\113\uffc3\114\uffc3\124\uffc3\135" +
    "\uffc3\001\002\000\040\077\uffb4\100\uffb4\106\uffb4\107\uffb4" +
    "\110\uffb4\111\uffb4\112\uffb4\113\uffb4\114\uffb4\116\uffb4\117" +
    "\uffb4\120\uffb4\121\uffb4\124\uffb4\135\uffb4\001\002\000\050" +
    "\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c\072" +
    "\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123\u012a\127\u012c" +
    "\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001" +
    "\002\000\050\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131" +
    "\071\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123" +
    "\u012a\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132" +
    "\143\u0125\001\002\000\050\046\u013a\047\u0126\051\u0128\052" +
    "\u0137\070\u0131\071\u013c\072\u0139\073\u012b\074\u0133\115\u0127" +
    "\117\u0138\123\u012a\127\u012c\132\u012f\133\u0129\134\u0123\137" +
    "\u0136\142\u0132\143\u0125\001\002\000\050\046\u013a\047\u0126" +
    "\051\u0128\052\u0137\070\u0131\071\u013c\072\u0139\073\u012b\074" +
    "\u0133\115\u0127\117\u0138\123\u012a\127\u012c\132\u012f\133\u0129" +
    "\134\u0123\137\u0136\142\u0132\143\u0125\001\002\000\050\046" +
    "\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c\072\u0139" +
    "\073\u012b\074\u0133\115\u0127\117\u0138\123\u012a\127\u012c\132" +
    "\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001\002" +
    "\000\050\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071" +
    "\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123\u012a" +
    "\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143" +
    "\u0125\001\002\000\050\046\u013a\047\u0126\051\u0128\052\u0137" +
    "\070\u0131\071\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117" +
    "\u0138\123\u012a\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136" +
    "\142\u0132\143\u0125\001\002\000\050\046\u013a\047\u0126\051" +
    "\u0128\052\u0137\070\u0131\071\u013c\072\u0139\073\u012b\074\u0133" +
    "\115\u0127\117\u0138\123\u012a\127\u012c\132\u012f\133\u0129\134" +
    "\u0123\137\u0136\142\u0132\143\u0125\001\002\000\020\106\uffbd" +
    "\113\uffbd\114\uffbd\116\u0147\117\u0149\124\uffbd\135\uffbd\001" +
    "\002\000\020\106\uffbc\113\uffbc\114\uffbc\116\u0147\117\u0149" +
    "\124\uffbc\135\uffbc\001\002\000\020\106\uffbf\113\uffbf\114" +
    "\uffbf\116\u0147\117\u0149\124\uffbf\135\uffbf\001\002\000\020" +
    "\106\uffc1\113\uffc1\114\uffc1\116\u0147\117\u0149\124\uffc1\135" +
    "\uffc1\001\002\000\040\077\uffb9\100\uffb9\106\uffb9\107\uffb9" +
    "\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\116\uffb9\117" +
    "\uffb9\120\u0154\121\u0153\124\uffb9\135\uffb9\001\002\000\050" +
    "\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c\072" +
    "\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123\u012a\127\u012c" +
    "\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001" +
    "\002\000\050\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131" +
    "\071\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123" +
    "\u012a\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132" +
    "\143\u0125\001\002\000\040\077\uffb7\100\uffb7\106\uffb7\107" +
    "\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\114\uffb7\116\uffb7" +
    "\117\uffb7\120\uffb7\121\uffb7\124\uffb7\135\uffb7\001\002\000" +
    "\040\077\uffb6\100\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6" +
    "\112\uffb6\113\uffb6\114\uffb6\116\uffb6\117\uffb6\120\uffb6\121" +
    "\uffb6\124\uffb6\135\uffb6\001\002\000\020\106\uffbe\113\uffbe" +
    "\114\uffbe\116\u0147\117\u0149\124\uffbe\135\uffbe\001\002\000" +
    "\040\077\uffba\100\uffba\106\uffba\107\uffba\110\uffba\111\uffba" +
    "\112\uffba\113\uffba\114\uffba\116\uffba\117\uffba\120\u0154\121" +
    "\u0153\124\uffba\135\uffba\001\002\000\020\106\uffc0\113\uffc0" +
    "\114\uffc0\116\u0147\117\u0149\124\uffc0\135\uffc0\001\002\000" +
    "\006\113\u0141\124\u015b\001\002\000\040\077\uffab\100\uffab" +
    "\106\uffab\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\114" +
    "\uffab\116\uffab\117\uffab\120\uffab\121\uffab\124\uffab\135\uffab" +
    "\001\002\000\040\077\uffb2\100\uffb2\106\uffb2\107\uffb2\110" +
    "\uffb2\111\uffb2\112\uffb2\113\uffb2\114\uffb2\116\uffb2\117\uffb2" +
    "\120\uffb2\121\uffb2\124\uffb2\135\uffb2\001\002\000\006\075" +
    "\u015f\141\u015e\001\002\000\004\125\u0179\001\002\000\004" +
    "\141\u0176\001\002\000\004\124\u0161\001\002\000\004\150" +
    "\u0162\001\002\000\004\123\u0163\001\002\000\050\046\u013a" +
    "\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c\072\u0139\073" +
    "\u012b\074\u0133\115\u0127\117\u0138\123\u012a\127\u012c\132\u012f" +
    "\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001\002\000" +
    "\006\113\u0141\124\u0165\001\002\000\020\050\u011e\053\u011f" +
    "\054\u011d\075\u0111\076\u0119\141\u0121\153\u016a\001\002\000" +
    "\034\003\uffd2\050\uffd2\053\uffd2\054\uffd2\075\uffd2\076\uffd2" +
    "\100\uffd2\105\uffd2\141\uffd2\144\uffd2\146\uffd2\147\uffd2\151" +
    "\uffd2\001\002\000\034\003\uffd4\050\uffd4\053\uffd4\054\uffd4" +
    "\075\uffd4\076\uffd4\100\uffd4\105\uffd4\141\uffd4\144\uffd4\146" +
    "\uffd4\147\uffd4\151\uffd4\001\002\000\034\003\uffd5\050\uffd5" +
    "\053\uffd5\054\uffd5\075\uffd5\076\uffd5\100\uffd5\105\uffd5\141" +
    "\uffd5\144\uffd5\146\uffd5\147\uffd5\151\uffd5\001\002\000\032" +
    "\003\uffc8\050\uffc8\053\uffc8\054\uffc8\075\uffc8\076\uffc8\100" +
    "\uffc8\105\uffc8\141\uffc8\144\uffc8\147\uffc8\151\uffc8\001\002" +
    "\000\004\101\u016c\001\002\000\034\003\uffd1\050\uffd1\053" +
    "\uffd1\054\uffd1\075\uffd1\076\uffd1\100\uffd1\105\uffd1\141\uffd1" +
    "\144\uffd1\146\uffd1\147\uffd1\151\uffd1\001\002\000\004\105" +
    "\u016d\001\002\000\024\050\u011e\053\u011f\054\u011d\075\u0111" +
    "\076\u0119\141\u0121\144\u0115\147\u0120\151\u0113\001\002\000" +
    "\026\050\uffd8\053\uffd8\054\uffd8\075\uffd8\076\uffd8\105\uffd8" +
    "\141\uffd8\144\uffd8\147\uffd8\151\uffd8\001\002\000\026\050" +
    "\uffd7\053\uffd7\054\uffd7\075\uffd7\076\uffd7\105\uffd7\141\uffd7" +
    "\144\uffd7\147\uffd7\151\uffd7\001\002\000\026\050\u011e\053" +
    "\u011f\054\u011d\075\u0111\076\u0119\105\u0173\141\u0121\144\u0115" +
    "\147\u0120\151\u0113\001\002\000\026\050\uffd6\053\uffd6\054" +
    "\uffd6\075\uffd6\076\uffd6\105\uffd6\141\uffd6\144\uffd6\147\uffd6" +
    "\151\uffd6\001\002\000\026\050\uffd9\053\uffd9\054\uffd9\075" +
    "\uffd9\076\uffd9\105\uffd9\141\uffd9\144\uffd9\147\uffd9\151\uffd9" +
    "\001\002\000\004\102\u0174\001\002\000\004\154\u0175\001" +
    "\002\000\034\003\uffd3\050\uffd3\053\uffd3\054\uffd3\075\uffd3" +
    "\076\uffd3\100\uffd3\105\uffd3\141\uffd3\144\uffd3\146\uffd3\147" +
    "\uffd3\151\uffd3\001\002\000\004\125\u0177\001\002\000\050" +
    "\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c\072" +
    "\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123\u012a\127\u012c" +
    "\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001" +
    "\002\000\006\113\u0141\124\uffc7\001\002\000\050\046\u013a" +
    "\047\u0126\051\u0128\052\u0137\070\u0131\071\u013c\072\u0139\073" +
    "\u012b\074\u0133\115\u0127\117\u0138\123\u012a\127\u012c\132\u012f" +
    "\133\u0129\134\u0123\137\u0136\142\u0132\143\u0125\001\002\000" +
    "\006\113\u0141\124\uffc6\001\002\000\004\024\u017c\001\002" +
    "\000\004\077\u017d\001\002\000\006\003\ufec5\100\ufec5\001" +
    "\002\000\050\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131" +
    "\071\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123" +
    "\u012a\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132" +
    "\143\u0125\001\002\000\006\113\u0141\124\u0180\001\002\000" +
    "\004\145\u0181\001\002\000\020\050\u011e\053\u011f\054\u011d" +
    "\075\u0111\076\u0119\141\u0121\153\u016a\001\002\000\034\003" +
    "\uffca\050\uffca\053\uffca\054\uffca\075\uffca\076\uffca\100\uffca" +
    "\105\uffca\141\uffca\144\uffca\146\u0183\147\uffca\151\uffca\001" +
    "\002\000\022\050\u011e\053\u011f\054\u011d\075\u0111\076\u0119" +
    "\141\u0121\144\u0185\153\u016a\001\002\000\032\003\uffcd\050" +
    "\uffcd\053\uffcd\054\uffcd\075\uffcd\076\uffcd\100\uffcd\105\uffcd" +
    "\141\uffcd\144\uffcd\147\uffcd\151\uffcd\001\002\000\004\123" +
    "\u0187\001\002\000\032\003\uffcb\050\uffcb\053\uffcb\054\uffcb" +
    "\075\uffcb\076\uffcb\100\uffcb\105\uffcb\141\uffcb\144\uffcb\147" +
    "\uffcb\151\uffcb\001\002\000\050\046\u013a\047\u0126\051\u0128" +
    "\052\u0137\070\u0131\071\u013c\072\u0139\073\u012b\074\u0133\115" +
    "\u0127\117\u0138\123\u012a\127\u012c\132\u012f\133\u0129\134\u0123" +
    "\137\u0136\142\u0132\143\u0125\001\002\000\006\113\u0141\124" +
    "\u0189\001\002\000\004\145\u018a\001\002\000\020\050\u011e" +
    "\053\u011f\054\u011d\075\u0111\076\u0119\141\u0121\153\u016a\001" +
    "\002\000\034\003\uffca\050\uffca\053\uffca\054\uffca\075\uffca" +
    "\076\uffca\100\uffca\105\uffca\141\uffca\144\uffca\146\u0183\147" +
    "\uffca\151\uffca\001\002\000\032\003\uffcc\050\uffcc\053\uffcc" +
    "\054\uffcc\075\uffcc\076\uffcc\100\uffcc\105\uffcc\141\uffcc\144" +
    "\uffcc\147\uffcc\151\uffcc\001\002\000\006\106\u0195\135\u0194" +
    "\001\002\000\004\141\uffdb\001\002\000\006\106\uffde\135" +
    "\uffde\001\002\000\004\141\u0191\001\002\000\010\106\uffdc" +
    "\125\u0192\135\uffdc\001\002\000\050\046\u013a\047\u0126\051" +
    "\u0128\052\u0137\070\u0131\071\u013c\072\u0139\073\u012b\074\u0133" +
    "\115\u0127\117\u0138\123\u012a\127\u012c\132\u012f\133\u0129\134" +
    "\u0123\137\u0136\142\u0132\143\u0125\001\002\000\010\106\uffdd" +
    "\113\u0141\135\uffdd\001\002\000\006\066\u018e\141\uffda\001" +
    "\002\000\034\003\uffe6\050\uffe6\053\uffe6\054\uffe6\075\uffe6" +
    "\076\uffe6\100\uffe6\105\uffe6\141\uffe6\144\uffe6\146\uffe6\147" +
    "\uffe6\151\uffe6\001\002\000\006\106\uffdf\135\uffdf\001\002" +
    "\000\050\046\u013a\047\u0126\051\u0128\052\u0137\070\u0131\071" +
    "\u013c\072\u0139\073\u012b\074\u0133\115\u0127\117\u0138\123\u012a" +
    "\127\u012c\132\u012f\133\u0129\134\u0123\137\u0136\142\u0132\143" +
    "\u0125\001\002\000\006\113\u0141\124\u0199\001\002\000\004" +
    "\152\u019a\001\002\000\020\050\u011e\053\u011f\054\u011d\075" +
    "\u0111\076\u0119\141\u0121\153\u016a\001\002\000\032\003\uffc9" +
    "\050\uffc9\053\uffc9\054\uffc9\075\uffc9\076\uffc9\100\uffc9\105" +
    "\uffc9\141\uffc9\144\uffc9\147\uffc9\151\uffc9\001\002\000\004" +
    "\024\u01a3\001\002\000\006\003\u019f\024\u019e\001\002\000" +
    "\006\003\u01a1\077\u01a2\001\002\000\004\077\u01a0\001\002" +
    "\000\006\003\ufec3\100\ufec3\001\002\000\006\003\ufec2\100" +
    "\ufec2\001\002\000\006\003\ufec6\100\ufec6\001\002\000\004" +
    "\077\u01a4\001\002\000\006\003\ufec4\100\ufec4\001\002\000" +
    "\020\003\u01a8\046\227\100\u01a7\105\230\116\232\140\231" +
    "\141\236\001\002\000\006\003\uff99\100\uff99\001\002\000" +
    "\006\003\u01ac\121\u01ad\001\002\000\004\121\u01a9\001\002" +
    "\000\004\023\u01aa\001\002\000\004\077\u01ab\001\002\000" +
    "\006\003\ufeca\100\ufeca\001\002\000\004\023\u01b3\001\002" +
    "\000\006\003\u01ae\023\u01af\001\002\000\004\077\u01b2\001" +
    "\002\000\006\003\u01b1\077\u01b0\001\002\000\006\003\ufecb" +
    "\100\ufecb\001\002\000\006\003\ufec7\100\ufec7\001\002\000" +
    "\006\003\ufec8\100\ufec8\001\002\000\004\077\u01b4\001\002" +
    "\000\006\003\ufec9\100\ufec9\001\002\000\020\003\u01b7\046" +
    "\227\100\u01b6\105\230\116\232\140\231\141\236\001\002" +
    "\000\006\003\u01bc\121\u01bd\001\002\000\004\121\u01b9\001" +
    "\002\000\006\003\uff9b\100\uff9b\001\002\000\004\011\u01ba" +
    "\001\002\000\004\077\u01bb\001\002\000\006\003\ufef7\100" +
    "\ufef7\001\002\000\004\011\u01c3\001\002\000\006\003\u01bf" +
    "\011\u01be\001\002\000\006\003\u01c1\077\u01c2\001\002\000" +
    "\004\077\u01c0\001\002\000\006\003\ufef5\100\ufef5\001\002" +
    "\000\006\003\ufef4\100\ufef4\001\002\000\006\003\ufef8\100" +
    "\ufef8\001\002\000\004\077\u01c4\001\002\000\006\003\ufef6" +
    "\100\ufef6\001\002\000\004\010\u01e7\001\002\000\010\003" +
    "\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f" +
    "\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001" +
    "\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010" +
    "\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077" +
    "\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f" +
    "\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000" +
    "\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f" +
    "\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103" +
    "\uff5f\001\002\000\010\003\020\077\u01d2\103\022\001\002" +
    "\000\006\003\uff6c\100\uff6c\001\002\000\010\003\020\077" +
    "\u01d4\103\022\001\002\000\020\003\uff63\046\uff63\100\uff63" +
    "\105\uff63\116\uff63\140\uff63\141\uff63\001\002\000\010\003" +
    "\020\077\u01d6\103\022\001\002\000\020\003\uff66\046\uff66" +
    "\100\uff66\105\uff66\116\uff66\140\uff66\141\uff66\001\002\000" +
    "\010\003\020\077\u01d8\103\022\001\002\000\020\003\uff79" +
    "\046\uff79\100\uff79\105\uff79\116\uff79\140\uff79\141\uff79\001" +
    "\002\000\010\003\020\077\u01da\103\022\001\002\000\006" +
    "\003\uff73\100\uff73\001\002\000\010\003\020\077\u01dc\103" +
    "\022\001\002\000\030\003\uff61\050\uff61\053\uff61\054\uff61" +
    "\075\uff61\076\uff61\100\uff61\141\uff61\144\uff61\147\uff61\151" +
    "\uff61\001\002\000\010\003\020\077\u01de\103\022\001\002" +
    "\000\006\003\uff6e\100\uff6e\001\002\000\010\003\020\077" +
    "\u01e0\103\022\001\002\000\006\003\uff6a\100\uff6a\001\002" +
    "\000\010\003\020\077\u01e2\103\022\001\002\000\006\003" +
    "\uff77\100\uff77\001\002\000\010\003\020\077\u01e4\103\022" +
    "\001\002\000\006\003\uff75\100\uff75\001\002\000\010\003" +
    "\020\077\u01e6\103\022\001\002\000\020\003\uff68\046\uff68" +
    "\100\uff68\105\uff68\116\uff68\140\uff68\141\uff68\001\002\000" +
    "\004\077\u01e8\001\002\000\006\003\ufefc\100\ufefc\001\002" +
    "\000\006\003\uff97\100\uff97\001\002\000\004\121\u01f5\001" +
    "\002\000\006\003\u01ec\121\u01ed\001\002\000\004\013\u01f3" +
    "\001\002\000\006\003\u01ee\013\u01ef\001\002\000\004\077" +
    "\u01f2\001\002\000\006\003\u01f1\077\u01f0\001\002\000\006" +
    "\003\ufeee\100\ufeee\001\002\000\006\003\ufeea\100\ufeea\001" +
    "\002\000\006\003\ufeeb\100\ufeeb\001\002\000\004\077\u01f4" +
    "\001\002\000\006\003\ufeec\100\ufeec\001\002\000\004\013" +
    "\u01f6\001\002\000\004\077\u01f7\001\002\000\006\003\ufeed" +
    "\100\ufeed\001\002\000\006\003\u01f9\100\u01fc\001\002\000" +
    "\006\015\u021c\121\u021d\001\002\000\006\003\uff95\100\uff95" +
    "\001\002\000\020\003\uff8d\046\uff8d\100\uff8d\105\uff8d\116" +
    "\uff8d\140\uff8d\141\uff8d\001\002\000\010\003\u01fe\015\u01ff" +
    "\121\u0200\001\002\000\006\003\uff94\100\uff94\001\002\000" +
    "\012\003\uff5f\014\u0209\077\uff5f\103\uff5f\001\002\000\010" +
    "\003\uff5f\077\uff5f\103\uff5f\001\002\000\006\003\u0201\014" +
    "\u0202\001\002\000\004\077\u0205\001\002\000\006\003\u0204" +
    "\077\u0203\001\002\000\006\003\ufee9\100\ufee9\001\002\000" +
    "\006\003\ufee5\100\ufee5\001\002\000\006\003\ufee6\100\ufee6" +
    "\001\002\000\010\003\020\077\u0207\103\022\001\002\000" +
    "\020\003\uff72\046\uff72\100\uff72\105\uff72\116\uff72\140\uff72" +
    "\141\uff72\001\002\000\010\003\020\077\u020b\103\022\001" +
    "\002\000\004\077\u020a\001\002\000\006\003\ufee7\100\ufee7" +
    "\001\002\000\020\003\uff70\046\uff70\100\uff70\105\uff70\116" +
    "\uff70\140\uff70\141\uff70\001\002\000\020\003\u020f\046\227" +
    "\100\u020d\105\230\116\232\140\231\141\236\001\002\000" +
    "\006\003\u0213\121\u0214\001\002\000\006\003\uff92\100\uff92" +
    "\001\002\000\004\121\u0210\001\002\000\004\015\u0211\001" +
    "\002\000\004\077\u0212\001\002\000\006\003\ufee3\100\ufee3" +
    "\001\002\000\004\015\u021a\001\002\000\006\003\u0215\015" +
    "\u0216\001\002\000\004\077\u0219\001\002\000\006\003\u0217" +
    "\077\u0218\001\002\000\006\003\ufee0\100\ufee0\001\002\000" +
    "\006\003\ufee4\100\ufee4\001\002\000\006\003\ufee1\100\ufee1" +
    "\001\002\000\004\077\u021b\001\002\000\006\003\ufee2\100" +
    "\ufee2\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002" +
    "\000\004\014\u021e\001\002\000\004\077\u021f\001\002\000" +
    "\006\003\ufee8\100\ufee8\001\002\000\010\003\020\077\u0221" +
    "\103\022\001\002\000\020\003\uff71\046\uff71\100\uff71\105" +
    "\uff71\116\uff71\140\uff71\141\uff71\001\002\000\006\003\u0224" +
    "\100\u0223\001\002\000\034\003\u0230\011\u0232\012\u022d\013" +
    "\u022a\014\u0231\016\u022e\017\u0234\020\u022c\021\u022b\022\u0233" +
    "\023\u0235\024\u022f\121\u0229\001\002\000\032\011\u01cd\012" +
    "\u01c8\013\u01c7\014\u01cc\016\u01ca\017\u01d0\020\u01c9\021\u01c6" +
    "\022\u01ce\023\u01cf\024\u01cb\121\u0226\001\002\000\006\003" +
    "\uff8f\100\uff8f\001\002\000\004\016\u0227\001\002\000\004" +
    "\077\u0228\001\002\000\006\003\ufede\100\ufede\001\002\000" +
    "\006\003\u0250\016\u0251\001\002\000\010\003\uff5f\077\uff5f" +
    "\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001" +
    "\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010" +
    "\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077" +
    "\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f" +
    "\001\002\000\012\003\uff5f\016\u0240\077\uff5f\103\uff5f\001" +
    "\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000\010" +
    "\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\uff5f\077" +
    "\uff5f\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f" +
    "\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001\002\000" +
    "\010\003\020\077\u0237\103\022\001\002\000\020\003\uff64" +
    "\046\uff64\100\uff64\105\uff64\116\uff64\140\uff64\141\uff64\001" +
    "\002\000\010\003\020\077\u0239\103\022\001\002\000\006" +
    "\003\uff6d\100\uff6d\001\002\000\010\003\020\077\u023b\103" +
    "\022\001\002\000\020\003\uff67\046\uff67\100\uff67\105\uff67" +
    "\116\uff67\140\uff67\141\uff67\001\002\000\010\003\020\077" +
    "\u023d\103\022\001\002\000\020\003\uff7a\046\uff7a\100\uff7a" +
    "\105\uff7a\116\uff7a\140\uff7a\141\uff7a\001\002\000\010\003" +
    "\020\077\u023f\103\022\001\002\000\006\003\uff74\100\uff74" +
    "\001\002\000\004\077\u0243\001\002\000\010\003\020\077" +
    "\u0242\103\022\001\002\000\020\003\uff65\046\uff65\100\uff65" +
    "\105\uff65\116\uff65\140\uff65\141\uff65\001\002\000\006\003" +
    "\ufedd\100\ufedd\001\002\000\010\003\020\077\u0245\103\022" +
    "\001\002\000\030\003\uff62\050\uff62\053\uff62\054\uff62\075" +
    "\uff62\076\uff62\100\uff62\141\uff62\144\uff62\147\uff62\151\uff62" +
    "\001\002\000\010\003\020\077\u0247\103\022\001\002\000" +
    "\006\003\uff6f\100\uff6f\001\002\000\010\003\020\077\u0249" +
    "\103\022\001\002\000\006\003\uff78\100\uff78\001\002\000" +
    "\010\003\020\077\u024b\103\022\001\002\000\006\003\uff6b" +
    "\100\uff6b\001\002\000\010\003\020\077\u024d\103\022\001" +
    "\002\000\020\003\uff69\046\uff69\100\uff69\105\uff69\116\uff69" +
    "\140\uff69\141\uff69\001\002\000\010\003\020\077\u024f\103" +
    "\022\001\002\000\006\003\uff76\100\uff76\001\002\000\004" +
    "\077\u0254\001\002\000\006\003\u0252\077\u0253\001\002\000" +
    "\006\003\ufedb\100\ufedb\001\002\000\006\003\ufedf\100\ufedf" +
    "\001\002\000\006\003\ufedc\100\ufedc\001\002\000\006\003" +
    "\uff98\100\uff98\001\002\000\004\121\u0261\001\002\000\006" +
    "\003\u0258\121\u0259\001\002\000\004\012\u025f\001\002\000" +
    "\006\003\u025b\012\u025a\001\002\000\006\003\u025e\077\u025d" +
    "\001\002\000\004\077\u025c\001\002\000\006\003\ufef0\100" +
    "\ufef0\001\002\000\006\003\ufef3\100\ufef3\001\002\000\006" +
    "\003\ufeef\100\ufeef\001\002\000\004\077\u0260\001\002\000" +
    "\006\003\ufef1\100\ufef1\001\002\000\004\012\u0262\001\002" +
    "\000\004\077\u0263\001\002\000\006\003\ufef2\100\ufef2\001" +
    "\002\000\020\003\u0267\046\227\100\u0265\105\230\116\232" +
    "\140\231\141\236\001\002\000\006\003\u026b\121\u026c\001" +
    "\002\000\006\003\uff9a\100\uff9a\001\002\000\004\121\u0268" +
    "\001\002\000\004\022\u0269\001\002\000\004\077\u026a\001" +
    "\002\000\006\003\ufecf\100\ufecf\001\002\000\004\022\u0272" +
    "\001\002\000\006\003\u026d\022\u026e\001\002\000\004\077" +
    "\u0271\001\002\000\006\003\u0270\077\u026f\001\002\000\006" +
    "\003\ufed0\100\ufed0\001\002\000\006\003\ufecc\100\ufecc\001" +
    "\002\000\006\003\ufecd\100\ufecd\001\002\000\004\077\u0273" +
    "\001\002\000\006\003\ufece\100\ufece\001\002\000\006\003" +
    "\u0278\010\u0279\001\002\000\012\003\uff5f\010\u0276\077\uff5f" +
    "\103\uff5f\001\002\000\004\077\u0277\001\002\000\006\003" +
    "\ufefb\100\ufefb\001\002\000\004\077\u027c\001\002\000\006" +
    "\003\u027a\077\u027b\001\002\000\006\003\ufef9\100\ufef9\001" +
    "\002\000\006\003\ufefd\100\ufefd\001\002\000\006\003\ufefa" +
    "\100\ufefa\001\002\000\020\003\u0280\046\227\100\u027e\105" +
    "\230\116\232\140\231\141\236\001\002\000\006\003\u0284" +
    "\121\u0285\001\002\000\006\003\uff96\100\uff96\001\002\000" +
    "\004\121\u0281\001\002\000\004\021\u0282\001\002\000\004" +
    "\077\u0283\001\002\000\006\003\ufed4\100\ufed4\001\002\000" +
    "\004\021\u028b\001\002\000\006\003\u0287\021\u0286\001\002" +
    "\000\006\003\u028a\077\u0289\001\002\000\004\077\u0288\001" +
    "\002\000\006\003\ufed2\100\ufed2\001\002\000\006\003\ufed5" +
    "\100\ufed5\001\002\000\006\003\ufed1\100\ufed1\001\002\000" +
    "\004\077\u028c\001\002\000\006\003\ufed3\100\ufed3\001\002" +
    "\000\004\002\001\001\002\000\004\121\u0299\001\002\000" +
    "\006\003\u0290\121\u0291\001\002\000\004\004\u0297\001\002" +
    "\000\006\003\u0292\004\u0293\001\002\000\004\077\u0296\001" +
    "\002\000\006\003\u0294\077\u0295\001\002\000\004\002\uff0d" +
    "\001\002\000\004\002\uff11\001\002\000\004\002\uff0e\001" +
    "\002\000\004\077\u0298\001\002\000\004\002\uff0f\001\002" +
    "\000\004\004\u029a\001\002\000\004\077\u029b\001\002\000" +
    "\004\002\uff10\001\002\000\010\003\uff5f\077\uff5f\103\uff5f" +
    "\001\002\000\010\003\020\077\u029e\103\022\001\002\000" +
    "\006\003\uff83\100\uff83\001\002\000\010\003\uff5f\077\uff5f" +
    "\103\uff5f\001\002\000\010\003\uff5f\077\uff5f\103\uff5f\001" +
    "\002\000\010\003\020\077\u02a2\103\022\001\002\000\006" +
    "\003\uff87\100\uff87\001\002\000\010\003\020\077\u02a4\103" +
    "\022\001\002\000\006\003\uff85\100\uff85\001\002\000\010" +
    "\003\uff5f\077\uff5f\103\uff5f\001\002\000\010\003\020\077" +
    "\u02a7\103\022\001\002\000\006\003\uff86\100\uff86\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02a5\000\006\023\006\122\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\123\012\154\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\114\326\153\325\001\001\000\016\121\217\124\223" +
    "\131\222\132\216\147\214\152\221\001\001\000\002\001" +
    "\001\000\004\106\212\001\001\000\004\106\016\001\001" +
    "\000\004\105\022\001\001\000\046\055\044\056\026\057" +
    "\031\060\027\067\052\070\032\071\023\072\060\073\042" +
    "\074\063\075\055\076\066\077\035\100\040\101\045\102" +
    "\033\103\053\104\210\001\001\000\002\001\001\000\046" +
    "\055\044\056\026\057\031\060\027\067\052\070\032\071" +
    "\023\072\060\073\042\074\063\075\055\076\066\077\035" +
    "\100\040\101\045\102\033\103\053\104\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\175\001\001\000\004\066\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\105\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\310\001\001\000\002\001\001\000\016\004" +
    "\254\121\217\124\223\131\222\132\216\147\252\001\001" +
    "\000\002\001\001\000\004\054\224\001\001\000\006\005" +
    "\232\062\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\262\001\001\000\004\105\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\004\106\304\001\001\000\002\001" +
    "\001\000\004\106\300\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\105\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u028c\001\001\000\004\150" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\106\335\001\001\000\004\106\333\001\001\000\004\105" +
    "\022\001\001\000\002\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\004\106\340\001\001\000\004\105" +
    "\022\001\001\000\002\001\001\000\062\007\346\107\371" +
    "\110\343\111\351\112\356\113\374\115\367\116\355\117" +
    "\362\120\357\126\372\127\373\130\365\133\354\134\360" +
    "\135\352\136\370\137\350\140\345\141\364\142\353\143" +
    "\361\144\347\145\366\001\001\000\004\054\u027c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u0263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u0254\001\001\000\004\150\u0221\001\001\000\004" +
    "\151\u01f7\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u01e8\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\u01b4\001" +
    "\001\000\002\001\001\000\004\054\u01a4\001\001\000\002" +
    "\001\001\000\004\024\u010c\001\001\000\004\016\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\u0117" +
    "\022\u0115\027\u010e\030\u010d\032\u0111\033\u011b\036\u0116\041" +
    "\u0119\064\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\u018c\026\u018e\061\u018f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\042\u0134\043\u0133\044\u012f\045\u012d\047\u013e\050" +
    "\u013d\051\u013c\052\u013a\053\u012c\063\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\u015b\053\u012c\063\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\042\u0134\043\u0133\044" +
    "\u012f\045\u012d\047\u0159\050\u013d\051\u013c\052\u013a\053\u012c" +
    "\063\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\u012d\051\u0144\053\u012c\063" +
    "\u0123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\042\u0134" +
    "\043\u0133\044\u012f\045\u012d\050\u0141\051\u013c\052\u013a\053" +
    "\u012c\063\u0123\001\001\000\002\001\001\000\022\042\u0134" +
    "\043\u0133\044\u012f\045\u012d\051\u013c\052\u0143\053\u012c\063" +
    "\u0123\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\042\u0158\043\u0133\044\u012f\045\u012d\051\u013c\053\u012c\063" +
    "\u0123\001\001\000\016\043\u0157\044\u012f\045\u012d\051\u013c" +
    "\053\u012c\063\u0123\001\001\000\020\042\u0156\043\u0133\044" +
    "\u012f\045\u012d\051\u013c\053\u012c\063\u0123\001\001\000\016" +
    "\043\u0151\044\u012f\045\u012d\051\u013c\053\u012c\063\u0123\001" +
    "\001\000\020\042\u0150\043\u0133\044\u012f\045\u012d\051\u013c" +
    "\053\u012c\063\u0123\001\001\000\020\042\u014f\043\u0133\044" +
    "\u012f\045\u012d\051\u013c\053\u012c\063\u0123\001\001\000\020" +
    "\042\u014e\043\u0133\044\u012f\045\u012d\051\u013c\053\u012c\063" +
    "\u0123\001\001\000\020\042\u014d\043\u0133\044\u012f\045\u012d" +
    "\051\u013c\053\u012c\063\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\044\u0155\045\u012d\051\u013c\053\u012c\063" +
    "\u0123\001\001\000\014\044\u0154\045\u012d\051\u013c\053\u012c" +
    "\063\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\042" +
    "\u0134\043\u0133\044\u012f\045\u012d\047\u0163\050\u013d\051\u013c" +
    "\052\u013a\053\u012c\063\u0123\001\001\000\002\001\001\000" +
    "\016\027\u0167\034\u0165\040\u0168\041\u0166\064\u0113\065\u016a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\027\u0167\030\u010d\032\u0111\033" +
    "\u011b\034\u0170\035\u016d\036\u016e\037\u016f\041\u0166\064\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\027" +
    "\u0167\030\u010d\032\u0111\033\u011b\034\u0170\035\u0171\036\u016e" +
    "\041\u0166\064\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\042\u0134\043\u0133\044\u012f\045" +
    "\u012d\047\u0177\050\u013d\051\u013c\052\u013a\053\u012c\063\u0123" +
    "\001\001\000\002\001\001\000\026\042\u0134\043\u0133\044" +
    "\u012f\045\u012d\047\u0179\050\u013d\051\u013c\052\u013a\053\u012c" +
    "\063\u0123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\042\u0134\043\u0133" +
    "\044\u012f\045\u012d\047\u017e\050\u013d\051\u013c\052\u013a\053" +
    "\u012c\063\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\u0167\034\u0165\040\u0181\041\u0166\064\u0113\065" +
    "\u016a\001\001\000\004\031\u0183\001\001\000\016\027\u0167" +
    "\034\u0165\040\u0185\041\u0166\064\u0113\065\u016a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\042\u0134\043\u0133\044\u012f\045\u012d\047\u0187\050\u013d\051" +
    "\u013c\052\u013a\053\u012c\063\u0123\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\u0167\034\u0165\040\u018a\041" +
    "\u0166\064\u0113\065\u016a\001\001\000\004\031\u018b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\042\u0134\043\u0133\044\u012f\045\u012d\047\u0192\050\u013d\051" +
    "\u013c\052\u013a\053\u012c\063\u0123\001\001\000\002\001\001" +
    "\000\006\026\u0195\061\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\042\u0134\043\u0133\044\u012f\045\u012d" +
    "\047\u0197\050\u013d\051\u013c\052\u013a\053\u012c\063\u0123\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\027\u0167" +
    "\034\u0165\040\u019a\041\u0166\064\u0113\065\u016a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\u01a5\062\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u01b7\062\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\u01e4\001\001\000\004\106\u01e2\001\001\000\004\106\u01e0" +
    "\001\001\000\004\106\u01de\001\001\000\004\106\u01dc\001" +
    "\001\000\004\106\u01da\001\001\000\004\106\u01d8\001\001" +
    "\000\004\106\u01d6\001\001\000\004\106\u01d4\001\001\000" +
    "\004\106\u01d2\001\001\000\004\106\u01d0\001\001\000\004" +
    "\105\022\001\001\000\002\001\001\000\004\105\022\001" +
    "\001\000\002\001\001\000\004\105\022\001\001\000\002" +
    "\001\001\000\004\105\022\001\001\000\002\001\001\000" +
    "\004\105\022\001\001\000\002\001\001\000\004\105\022" +
    "\001\001\000\002\001\001\000\004\105\022\001\001\000" +
    "\002\001\001\000\004\105\022\001\001\000\002\001\001" +
    "\000\004\105\022\001\001\000\002\001\001\000\004\105" +
    "\022\001\001\000\002\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\u01f9\125\u01fa" +
    "\146\u01fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u020b\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\u0207\001\001\000\004\106\u0205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\105" +
    "\022\001\001\000\002\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u020d\062\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\u021f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\062\015\u0224\107\371\110\343\111" +
    "\351\112\356\113\374\115\367\116\355\117\362\120\357" +
    "\126\372\127\373\130\365\133\354\134\360\135\352\136" +
    "\370\137\350\140\345\141\364\142\353\143\361\144\347" +
    "\145\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\106\u024d\001\001\000" +
    "\004\106\u024b\001\001\000\004\106\u0249\001\001\000\004" +
    "\106\u0247\001\001\000\004\106\u0245\001\001\000\004\106" +
    "\u0243\001\001\000\004\106\u0240\001\001\000\004\106\u023d" +
    "\001\001\000\004\106\u023b\001\001\000\004\106\u0239\001" +
    "\001\000\004\106\u0237\001\001\000\004\106\u0235\001\001" +
    "\000\004\105\022\001\001\000\002\001\001\000\004\105" +
    "\022\001\001\000\002\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\004\105\022\001\001\000\002\001" +
    "\001\000\004\105\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\105\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\105\022\001\001\000\002\001\001" +
    "\000\004\105\022\001\001\000\002\001\001\000\004\105" +
    "\022\001\001\000\002\001\001\000\004\105\022\001\001" +
    "\000\002\001\001\000\004\105\022\001\001\000\002\001" +
    "\001\000\004\105\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\u0265\062\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\u0240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u027e\062\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\u029c\001\001\000\004\105\022\001\001\000" +
    "\002\001\001\000\004\106\u02a2\001\001\000\004\106\u02a0" +
    "\001\001\000\004\105\022\001\001\000\002\001\001\000" +
    "\004\105\022\001\001\000\002\001\001\000\004\106\u02a5" +
    "\001\001\000\004\105\022\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CaptchaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CaptchaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CaptchaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private List<Err> errors;
	private Operation op;
	private BuildTag tag;

	private Symbol cur_token;

	public CaptchaParser(CaptchaLex lex) {
		super(lex);
		this.op = new Operation();
		this.tag = new BuildTag(this);
		this.errors = new ArrayList<>();
	}

	public void syntax_error(Symbol cur_token) {
		this.cur_token = cur_token;

		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}

	public List<Err> getErrors() {
		return this.errors;
	}

	protected int error_sync_size() {
		return 1;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CaptchaParser$actions {
  private final CaptchaParser parser;

  /** Constructor */
  CUP$CaptchaParser$actions(CaptchaParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000000(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // c_gcic ::= gcic c_head c_body clgcic 
            {
              Object RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		ComponentParent head = (ComponentParent)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		ComponentParent body = (ComponentParent)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
					RESULT = tag.makeCaptcha(head, body);
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_gcic",17, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= c_gcic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		RESULT = start_val;
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CaptchaParser$parser.done_parsing();
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // c_head ::= head head_opt clhead 
            {
              ComponentParent RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int componentsleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int componentsright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Component> components = (List<Component>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
					RESULT = tag.makeTagParent(Tag.HEAD, m, components);
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_head",106, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // head_opt ::= head_opt h_opt 
            {
              List<Component> RESULT =null;
		int compsleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int compsright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Component> comps = (List<Component>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
						comps.add(c);
						RESULT = comps;
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",104, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // head_opt ::= h_opt 
            {
              List<Component> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
					List<Component> comps = new ArrayList<>();
					comps.add(c);
					RESULT = comps;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head_opt",104, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // h_opt ::= c_title 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // h_opt ::= c_link 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h_opt",101, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // c_body ::= body body_opt clbody 
            {
              ComponentParent RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int componentsleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int componentsright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Component> components = (List<Component>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						RESULT = tag.makeTagParent(Tag.BODY, m, components);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_body",105, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body_opt ::= body_opt b_opt 
            {
              List<Component> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Component> list = (List<Component>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
						list.add(c);
						RESULT = list;
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",102, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body_opt ::= 
            {
              List<Component> RESULT =null;
		 RESULT = new ArrayList<Component>(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body_opt",102, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // b_opt ::= c_h1 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // b_opt ::= c_paragraph 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // b_opt ::= c_spam 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // b_opt ::= c_input 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b_opt ::= c_txtarea 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b_opt ::= c_select 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b_opt ::= c_img 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b_opt ::= c_button 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b_opt ::= c_div 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b_opt ::= c_br 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // b_opt ::= c_script 
            {
              Component RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = c; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b_opt",97, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_script ::= script make_script clscript 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		 RESULT = tag.makeTag(Tag.SCRIPT, m, null); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_script",86, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // make_script ::= make_script scripting 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // make_script ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_script",18, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scripting ::= statement 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scripting ::= assignment 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scripting ::= control 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("scripting",0, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= type_var make_var SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		 System.out.println("Tipo: " + t.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("statement",21, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment ::= ID_V EQUAL a SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("Asignacion: " + id.getValue() + " = " + v1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("assignment",31, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_var ::= INT 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_var ::= STR 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_var ::= DEC 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_var ::= BOOL 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_var ::= CHR 
            {
              Token RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = t; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_var",50, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // make_var ::= make_var COMMA stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_var",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // make_var ::= stat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_var",19, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stat ::= mode ID_V EQUAL a 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 System.out.println(id.getValue() + " -> " + v1.toString()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stat ::= mode ID_V 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("stat",20, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // mode ::= GLOBAL 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = true; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // mode ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("mode",47, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // make_ins ::= make_ins instructions 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_ins",29, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // make_ins ::= instructions 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_ins",29, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instructions ::= control 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instructions",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instructions ::= instruction 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instructions",27, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= statement 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instruction",26, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction ::= assignment 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("instruction",26, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ini ::= INIT LBRACE COLON make_ins COLON RBRACE END 
            {
              Token RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("ini",51, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_instruction ::= instruction 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_instruction",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_instruction ::= ini 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type_instruction",30, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control ::= control_if 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // control ::= control_while 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // control ::= control_repeat 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control",28, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // control_if ::= IF LPAREN a RPAREN THEN type_instruction else_if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).value;
		 System.out.println("if -> " + b1 + ": " + i); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_if",22, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_if ::= ELSE IF LPAREN a RPAREN THEN type_instruction else_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-4)).value;
		 System.out.println("else if -> " + b1 + ": " + e); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("else_if",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-7)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_if ::= ELSE type_instruction 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 System.out.println("else: " + e); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("else_if",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_if ::= 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("else_if",23, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control_while ::= WHILE LPAREN a RPAREN THEN_WHILE type_instruction 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		 System.out.println("while -> " + b1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_while",24, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-5)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control_repeat ::= REPEAT LPAREN control_stat RPAREN UNTIL LPAREN a RPAREN type_instruction 
            {
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-6)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		 System.out.println("repeat -> " + b1 + " until ->" + b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_repeat",25, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-8)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control_stat ::= INT ID_V EQUAL a 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_stat",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control_stat ::= ID_V EQUAL a 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("control_stat",36, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // a ::= a OR b 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.or(b1, b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // a ::= b 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("a",37, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // b ::= b AND d 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.and(b1, b2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // b ::= d 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("b",38, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // d ::= s SMALLER s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.SMALLER); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // d ::= s GREATER s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.GREATER); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // d ::= s GRTREQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.GREATER_OR_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // d ::= s SMLLREQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.LESS_OR_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // d ::= s EQEQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // d ::= s NEQ s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.compare(n1, n2, Compare.NOT_EQUAL); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // d ::= s 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("d",40, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // s ::= s PLUS t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.sum(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // s ::= s MINUS t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.subtraction(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // s ::= t 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("s",32, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // t ::= t TIMES u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.multiplication(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // t ::= t DIVIDE u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.division(n1, n2); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // t ::= u 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("t",33, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // u ::= MINUS c 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.uminus(n1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",34, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // u ::= c 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("u",34, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // c ::= NOT v 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = op.not(b1); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // c ::= v 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c",39, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // v ::= INTEGER 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.INTEGER, n1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // v ::= DECIMAL 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token n1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.DECIMAL, n1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // v ::= string 
            {
              Variable RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.STRING, s1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // v ::= CHAR 
            {
              Variable RESULT =null;
		int ch1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int ch1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token ch1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.CHAR, ch1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // v ::= boolean_val 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Variable b1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = b1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // v ::= LPAREN a RPAREN 
            {
              Variable RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = n1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("v",35, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // string ::= STRING 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // string ::= ID_ 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // string ::= INTQ 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // string ::= FONTF_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // string ::= ALIGN_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // string ::= COLOUR 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // string ::= TYPE_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // string ::= CLASS_VALUE 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // string ::= PIXEL 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // string ::= PERCNTG 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // string ::= ONCLICK 
            {
              Token RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s1; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolean_val ::= TRUE 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token b1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, b1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolean_val ::= FALSE 
            {
              Variable RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token b1 = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Variable(Var.BOOLEAN, b1.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("boolean_val",41, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // c_title ::= title in cltitle 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.TITLE, m, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_title",87, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // c_link ::= link cllink 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.LINK, m, null); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_link",88, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // c_spam ::= spam in clspam 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.SPAN, m, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_spam",89, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // c_h1 ::= h1 in clh1 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.H1, m, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_h1",90, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // c_paragraph ::= paragraph in clparagraph 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.P, m, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_paragraph",92, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // c_input ::= input clinput 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.INPUT, m, null); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_input",94, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // c_txtarea ::= txtarea cltxtarea 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.TEXTAREA, m, null); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_txtarea",95, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // c_button ::= button in clbutton 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.BUTTON, m, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_button",91, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // c_select ::= select make_option clselect 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int optionsleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int optionsright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Component> options = (List<Component>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTagParent(Tag.SELECT, m, options); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_select",96, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // make_option ::= make_option c_option 
            {
              List<Component> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Component> list = (List<Component>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Component o = (Component)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
						list.add(o);
						RESULT = list;
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",103, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // make_option ::= 
            {
              List<Component> RESULT =null;
		 RESULT = new ArrayList<Component>(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("make_option",103, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // c_option ::= option in cloption 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.OPTION, m, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_option",100, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // c_img ::= img climg 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.makeTag(Tag.IMG, m, null); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_img",93, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // c_br ::= br 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = tag.makeTag(Tag.BR, m, null); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_br",98, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // c_div ::= div body_opt cldiv 
            {
              Component RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		HashMap<Param,Parameter> m = (HashMap<Param,Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int childrenleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int childrenright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Component> children = (List<Component>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		
						/* Opciones para crear div */
						RESULT = tag.makeTagParent(Tag.DIV, m, children);
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("c_div",99, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // in ::= in str 
            {
              List<Token> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Token> list = (List<Token>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
					list.add(s);
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // in ::= 
            {
              List<Token> RESULT =null;
		
					List<Token> list = new ArrayList<>();
					RESULT = list;
				
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("in",42, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // str ::= IN 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // str ::= ID_V 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // str ::= COLON 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // str ::= INTEGER 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // str ::= PLUS 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("str",48, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // gcic ::= SMALLER GCIC params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.GCIC, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // gcic ::= error GCIC params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // gcic ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("gcic",80, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // head ::= SMALLER HEAD params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.HEAD, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // head ::= error HEAD params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // head ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("head",81, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // title ::= SMALLER TITLE params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.TITLE, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // title ::= error TITLE params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("title",82, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // link ::= SMALLER LINK params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.LINK, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // link ::= error LINK params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("link",79, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // body ::= SMALLER BODY params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.BODY, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // body ::= error BODY params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // body ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("body",74, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // spam ::= SMALLER SPAM params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.SPAN, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // spam ::= error SPAM params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("spam",75, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // input ::= SMALLER INPUT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.INPUT, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",76, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // input ::= error INPUT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("input",76, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // txtarea ::= SMALLER TXTAREA params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.TEXTAREA, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // txtarea ::= error TXTAREA params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("txtarea",77, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // select ::= SMALLER SELECT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.SELECT, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // select ::= error SELECT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("select",78, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // option ::= SMALLER OPTION params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.OPTION, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // option ::= error OPTION params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // option ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("option",83, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // div ::= SMALLER DIV params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.DIV, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // div ::= error DIV params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("div",72, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // img ::= SMALLER IMG params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.IMG, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // img ::= error IMG params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("img",73, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // br ::= SMALLER BR params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.BR, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // br ::= error BR params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("br",84, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // button ::= SMALLER BUTTON params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.BUTTON, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // button ::= error BUTTON params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("button",70, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // h1 ::= SMALLER H1 params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.H1, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",71, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // h1 ::= error H1 params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",71, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // h1 ::= SMALLER error params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("h1",71, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // paragraph ::= SMALLER PARAGRAPH params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.P, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // paragraph ::= error PARAGRAPH params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("paragraph",69, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // script ::= SMALLER SCRIPT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = tag.getParameters(t, Tag.SCRIPT, list); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // script ::= error SCRIPT params GREATER 
            {
              HashMap<Param,Parameter> RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("script",85, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // params ::= params param 
            {
              List<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		List<Parameter> list = (List<Parameter>)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		
						list.add(p);
						RESULT = list;
					
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",68, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // params ::= 
            {
              List<Parameter> RESULT =null;
		 RESULT = new ArrayList<Parameter>(); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("params",68, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // param ::= LBRACKET opt RBRACKET 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-1)).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",67, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // param ::= error opt RBRACKET 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",67, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // param ::= LBRACKET opt error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("param",67, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // opt ::= id 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // opt ::= name 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // opt ::= href_src 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // opt ::= bckgrnd_clr 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // opt ::= font_size 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // opt ::= font_family 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // opt ::= text_align 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // opt ::= type 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // opt ::= cols_rows 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // opt ::= clss 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // opt ::= width_height 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // opt ::= alt 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // opt ::= onclick 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = p; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // opt ::= error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("opt",66, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // id ::= ID EQUAL ID_ 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.ID, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // id ::= error EQUAL ID_ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // id ::= ID error ID_ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // id ::= ID EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("id",53, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // name ::= NAME EQUAL STRING 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.NAME, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // name ::= error EQUAL STRING 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // name ::= NAME error STRING 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // name ::= NAME EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("name",54, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // href_src ::= url EQUAL URL 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // href_src ::= error EQUAL URL 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // href_src ::= url error URL 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // href_src ::= url EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("href_src",55, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // url ::= HREF 
            {
              Param RESULT =null;
		 RESULT = Param.HREF; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // url ::= SRC 
            {
              Param RESULT =null;
		 RESULT = Param.SRC; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("url",44, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // bckgrnd_clr ::= color EQUAL COLOUR 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",56, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // bckgrnd_clr ::= error EQUAL COLOUR 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",56, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // bckgrnd_clr ::= color error COLOUR 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",56, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // bckgrnd_clr ::= color EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("bckgrnd_clr",56, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // color ::= BCKGRND 
            {
              Param RESULT =null;
		 RESULT = Param.BACKGROUND; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // color ::= COLOR 
            {
              Param RESULT =null;
		 RESULT = Param.COLOR; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("color",43, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // font_size ::= FONTS EQUAL PIXEL 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.FONT_SIZE, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // font_size ::= FONTS error PIXEL 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // font_size ::= FONTS EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_size",57, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // font_family ::= FONTF EQUAL FONTF_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.FONT_FAMILY, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // font_family ::= error EQUAL FONTF_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // font_family ::= FONTF error FONTF_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // font_family ::= FONTF EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("font_family",58, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // text_align ::= ALIGN EQUAL ALIGN_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.TEXT_ALIGN, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // text_align ::= error EQUAL ALIGN_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // text_align ::= ALIGN error ALIGN_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // text_align ::= ALIGN EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("text_align",59, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // type ::= TYPE EQUAL TYPE_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.TYPE, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // type ::= error EQUAL TYPE_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // type ::= TYPE error TYPE_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // type ::= TYPE EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("type",60, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // cols_rows ::= cls_rws EQUAL INTQ 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // cols_rows ::= error EQUAL INTQ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // cols_rows ::= cls_rws error INTQ 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // cols_rows ::= cls_rws EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cols_rows",61, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // cls_rws ::= COLS 
            {
              Param RESULT =null;
		 RESULT = Param.COLS; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // cls_rws ::= ROWS 
            {
              Param RESULT =null;
		 RESULT = Param.ROWS; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cls_rws",45, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // clss ::= CLASS EQUAL CLASS_VALUE 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.CLASS, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // clss ::= error EQUAL CLASS_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // clss ::= CLASS error CLASS_VALUE 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // clss ::= CLASS EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clss",62, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // width_height ::= w_h EQUAL pxl_per 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(p, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // width_height ::= error EQUAL pxl_per 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // width_height ::= w_h error pxl_per 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // width_height ::= w_h EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("width_height",63, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // w_h ::= WIDTH 
            {
              Param RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = Param.WIDTH; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // w_h ::= HEIGHT 
            {
              Param RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = Param.HEIGHT; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("w_h",46, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // pxl_per ::= PIXEL 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // pxl_per ::= PERCNTG 
            {
              Token RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = s; 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("pxl_per",52, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // alt ::= ALT EQUAL STRING 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.ALT, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",64, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // alt ::= ALT error STRING 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",64, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // alt ::= ALT EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("alt",64, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // onclick ::= CLICK EQUAL ONCLICK 
            {
              Parameter RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$CaptchaParser$stack.peek()).value;
		 RESULT = new Parameter(Param.ONCLICK, s.getValue()); 
              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // onclick ::= error EQUAL ONCLICK 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // onclick ::= CLICK error ONCLICK 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // onclick ::= CLICK EQUAL error 
            {
              Parameter RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("onclick",65, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-2)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // clgcic ::= SMALLER DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // clgcic ::= error DIVIDE GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // clgcic ::= SMALLER error GCIC GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // clgcic ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // clgcic ::= SMALLER DIVIDE GCIC error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clgcic",1, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // clhead ::= SMALLER DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // clhead ::= error DIVIDE HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // clhead ::= SMALLER error HEAD GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // clhead ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // clhead ::= SMALLER DIVIDE HEAD error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clhead",2, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // cltitle ::= SMALLER DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // cltitle ::= error DIVIDE TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // cltitle ::= SMALLER error TITLE GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // cltitle ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // cltitle ::= SMALLER DIVIDE TITLE error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltitle",3, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // cllink ::= SMALLER DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // cllink ::= error DIVIDE LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // cllink ::= SMALLER error LINK GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // cllink ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // cllink ::= SMALLER DIVIDE LINK error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cllink",4, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // clbody ::= SMALLER DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // clbody ::= error DIVIDE BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // clbody ::= SMALLER error BODY GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // clbody ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // clbody ::= SMALLER DIVIDE BODY error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbody",5, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // clspam ::= SMALLER DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // clspam ::= error DIVIDE SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // clspam ::= SMALLER error SPAM GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // clspam ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // clspam ::= SMALLER DIVIDE SPAM error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clspam",6, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // clinput ::= SMALLER DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // clinput ::= error DIVIDE INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // clinput ::= SMALLER error INPUT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // clinput ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // clinput ::= SMALLER DIVIDE INPUT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clinput",7, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // cltxtarea ::= SMALLER DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // cltxtarea ::= error DIVIDE TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // cltxtarea ::= SMALLER error TXTAREA GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // cltxtarea ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // cltxtarea ::= SMALLER DIVIDE TXTAREA error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cltxtarea",8, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // clselect ::= SMALLER DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // clselect ::= error DIVIDE SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // clselect ::= SMALLER error SELECT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // clselect ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // clselect ::= SMALLER DIVIDE SELECT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clselect",9, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // cloption ::= SMALLER DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // cloption ::= error DIVIDE OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // cloption ::= SMALLER error OPTION GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // cloption ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // cloption ::= SMALLER DIVIDE OPTION error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cloption",10, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // cldiv ::= SMALLER DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // cldiv ::= error DIVIDE DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // cldiv ::= SMALLER error DIV GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // cldiv ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // cldiv ::= SMALLER DIVIDE DIV error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("cldiv",11, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // climg ::= SMALLER DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // climg ::= error DIVIDE IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // climg ::= SMALLER error IMG GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // climg ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // climg ::= SMALLER DIVIDE IMG error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("climg",12, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action_part00000001(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CaptchaParser$result;

      /* select the action based on the action number */
      switch (CUP$CaptchaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // clbutton ::= SMALLER DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // clbutton ::= error DIVIDE BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // clbutton ::= SMALLER error BUTTON GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // clbutton ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // clbutton ::= SMALLER DIVIDE BUTTON error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clbutton",13, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // clh1 ::= SMALLER DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // clh1 ::= error DIVIDE H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // clh1 ::= SMALLER error H1 GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // clh1 ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // clh1 ::= SMALLER DIVIDE H1 error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clh1",14, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // clparagraph ::= SMALLER DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // clparagraph ::= error DIVIDE PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // clparagraph ::= SMALLER error PARAGRAPH GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // clparagraph ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // clparagraph ::= SMALLER DIVIDE PARAGRAPH error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clparagraph",15, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // clscript ::= SMALLER DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // clscript ::= error DIVIDE SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // clscript ::= SMALLER error SCRIPT GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // clscript ::= SMALLER DIVIDE error GREATER 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // clscript ::= SMALLER DIVIDE SCRIPT error 
            {
              Object RESULT =null;

              CUP$CaptchaParser$result = parser.getSymbolFactory().newSymbol("clscript",16, ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.elementAt(CUP$CaptchaParser$top-3)), ((java_cup.runtime.Symbol)CUP$CaptchaParser$stack.peek()), RESULT);
            }
          return CUP$CaptchaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CaptchaParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CaptchaParser$do_action(
    int                        CUP$CaptchaParser$act_num,
    java_cup.runtime.lr_parser CUP$CaptchaParser$parser,
    java.util.Stack            CUP$CaptchaParser$stack,
    int                        CUP$CaptchaParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CaptchaParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CaptchaParser$do_action_part00000000(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CaptchaParser$do_action_part00000001(
                               CUP$CaptchaParser$act_num,
                               CUP$CaptchaParser$parser,
                               CUP$CaptchaParser$stack,
                               CUP$CaptchaParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
